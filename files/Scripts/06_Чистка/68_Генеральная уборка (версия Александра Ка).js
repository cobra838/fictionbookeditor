//======================================
//             «Генеральная уборка» v.3.6
// Скрипт тестировался в FBE v.2.7.6 (win XP, IE8 и win 7, IE11)
// * История изменений в конце скрипта
//~~~~~~~~~~~~~~~~~~

function Run() {

 var NumerusVersion="3.6";
 var Ts=new Date().getTime();

//--------------------------------------------------------------------
//--------------------------------------------------------------------
//--------------------------------------------------------------------

                 ///  НАСТРОЙКИ

//--------------------------------------------------------------------

         //   •  Максимум строк в окне результатов.
//  * Скрипт постарается не превышать это значение, и при необходимости добавит необходимое количество страниц.

var Vysota_teksta = 50;      // примерно 30-52 //      Ориентировочный максимум строк в окне результатов

// * Для монитора 1024х768 максимальная высота окна равна 52 строкам (в win XP) и 50 строк (в win 7).

// ---------------------------------------------------------------

         //     Обработка текста внутри "Истории изменений файла"

var ObrabotkaHistory_on_off = 1;      // 0 ; 1 //      ("0" — отключить, "1" — включить)

// ---------------------------------------------------------------

         //  Автоматическое повышение версии файла и добавление записи в историю изменений.
//  * Скрипт будет производить эти действия, но не чаще чем один раз в 10 дней.

  var Version_on_off = 1;      // 0 ; 1 //      ("0" — отключить, "1" — включить)


//  Добавлять, если не сделано ни одного исправления

  var Vsegda_on_off = 0;      // 0 ; 1 //      ("0" — отключить, "1" — включить)


//   Имя используемое в добавленной записи:
//  * Можно использовать почти любые символы. Исключения:   |  "  |  '  |  /  |  \  |    Но и любой из этих знаков можно добавить, если поставить перед ним наклонную черту ("\"), например: "\/" = "/"
//  ** Или можно оставить эти кавычки пустыми (""), тогда строка в истории будет без имени

  var YouName = "Зорро";

// ---------------------------------------------------------------

          //   •  Закрепление висящих слов

//   Максимальное длина слова в конце АБЗАЦА, которое следует прикрепить к предыдущему слову

  var Abz1 = 2;      // 0 ; 1; 2 ; 3 //      ("0" — отключить)


//   Максимальное длина слова в конце ПРЕДЛОЖЕНИЯ, которое следует прикрепить к предыдущему слову

  var Abz2 = 1;      // 0 ; 1 ; 2 //      ("0" — отключить)


//   Прикреплять некоторые предлоги к следующему слову

  var Abz3 = 1;      // 0 ; 1 //      ("0" — отключить, "1" — включить)


//   Прикреплять однобуквенные слова в начале предложения к следующему слову

  var Abz4 = 0;      // 0 ; 1 //      ("0" — отключить, "1" — включить)

// ---------------------------------------------------------------

          //   •  Включить режим "Дефис рядом с цифрой"
//   Включает сохранение дефиса внутри буквенно-цифровых кодов при повторной обработке
//   * Чтобы скрипт смог распознать повторную обработку, в "истории изменений" должна остаться хотя бы одна запись сделанная этим скриптом (а именно — фрагмент текста: "ГенУборка–").

  var dubl_on_off = 1;      // 0 ; 1 //      ("0" — отключить, "1" — включить)

// ---------------------------------------------------------------

       //   •  День рождения
//  Скрипт поздравит вас с Днем Рождения

  var DR = "7.10";      // "1.09" ; "30.11" и т.п. //      дата в указанном формате

//  Пустые кавычки или неправильное заполнение отключают эту функцию

// ---------------------------------------------------------------

       //   •  Преобразовывать выделение подчеркиванием в курсив и полужирность
//  _Этот текст_    _будет_    _преобразован_в_курсивный_
//  _А _э_т_о_т_ _с_т_а_н_е_т_ п_о_л_у_ж_и_р_н_ы_м
//  * Если в тексте книги уже есть курсив/жирность, то соответствующее преобразование блокируется -- чтобы не перепутались два совершенно разных вида оформления.

  var Zp_on_off = 1;      // 0 ; 1 //      ("0" — ничего не трогать, "1" — преобразовать)

// ---------------------------------------------------------------

       //   •  Расставлять стандартное ударе́ние (&#769;) с помощью следующих операций:
//  160. латинская диакрúтика  ›››  ударе́ние
//  220. выделЕние буквы с помощью тегов курсива/жирности ››› ударе́ние
//  911. выдЕление кАпсом  ›››  ударе́ние

  var Ud_on_off = 1;      // 0 ; 1 //      ("0" — отключить эти операции, "1" — включить)

// ---------------------------------------------------------------

       //   •  Демонстрационный режим
//  Включает присмотр всех возможных строк статистики.
//  Удобно для редактирования строк статистики.

var VseStroki_on_off = 0;      // 0 ; 1 //      ("0" — отключить, "1" — включить)

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОБРАБОТКА НАСТРОЕК


 if ((Abz1+"").search(/^[123]$/) == -1)  Abz1=0;
 if ((Abz2+"").search(/^[12]$/) == -1)  Abz2=0;
 if (Abz3 != 1)  Abz3 = 0;
 if (Abz4 != 1)  Abz4 = 0;
 var Abz5 = 1;
 if (Abz1 != 0) Abz5 = Abz1;
 var Abz6 = 1;  var Abz7 = 0;
 if (Abz2 < 2) { Abz6 = 0; Abz7 = 1 }
 var ObrabotkaHistory = (ObrabotkaHistory_on_off==1);

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОБЩИЕ ПЕРЕМЕННЫЕ


//   Неразрывный пробел:  "nbspEntity" - для обычного использования; "nbspChar" - используется при временной замене кода "&nbsp;" на прозрачный н/р пробел
 var nbspEntity="&nbsp;";          //  использование кода для н/р пробела
 try {                           // для FBE в котором есть настройки выбора символа для н/р пробела:
         var nbspChar=window.external.GetNBSP();              //  выбранный символ для н/р пробела в FBE
         if (nbspChar.charCodeAt(0)!=160)  nbspEntity=nbspChar;    }        //  для непрозрачных символов, код "&nbsp;" при записи н/р пробела не используется
 catch(e) {                 // для FBE в котором отсутствуют эти настройки, и в котором команда "window.external.GetNBSP()" вызывает ошибку:
         var nbspChar=String.fromCharCode(160);    }       //  символ прозрачного н/р пробела

var sIB="<EM><STRONG>|<STRONG><EM>|<EM>|<STRONG>";
var fIB="</EM></STRONG>|</STRONG></EM>|</EM>|</STRONG>";
var aIB="<EM><STRONG>|<STRONG><EM>|</EM></STRONG>|</STRONG></EM>|<EM>|<STRONG>|</EM>|</STRONG>";
// Сдвоенные теги должны стоять в начале. Иначе, если в конце рег. выражения стоит ("+_IB+"), то формула находит в тексте только первый тег, а если за ним следует второй тег, то он проигнорируется, и это может привести к ошибке.

var NC="<A href=[^>]{0,}?><SUP>\\\{\\\d{1,5}\\\}</SUP></A>|<A class=note [^<]{1,}?</A>";   //  Любая стандартная сноска (на примечание или на комментарий)

var FalseSim="&0&"; // Заменитель текста для нескольких небольших эпизодов
var FalseCode="&1&"; // Заменитель текста для формата <code>
var UrlFalse1="&2&"; // Заменитель текста для активных ссылок
var UrlFalse3="u&&u"; // Заменитель текста для адреса текстом
var FalseTire="&3&"; // Заменитель текста для длинного тире между названиями
// * Заменитель текста необходим для того чтобы сохранить текст от изменений
var Ud="́"; // Знак ударения (чтобы был заметным)

 var n=0;  //   Локальная переменная для небольших областей
 var k=0;  //   Локальная переменная для небольших областей

  var fbwBody=document.getElementById("fbw_body");

 var T_pause=0;  //  продолжительность диалоговых пауз

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ПРОВЕРКА НА ПОВТОРНОЕ ПРИМЕНЕНИЕ "ГенУборки"


 var dubl=false;
 var History=fbwBody.firstChild;
//  Поиск раздела "историй"
 while (History!=null  &&  History.className!="history") History=History.nextSibling;
//  Если найдено
 if (History!=null)  {
         if (History.innerHTML.search("ГенУборка–")!=-1)  dubl=true }


 if (dubl_on_off !=1)  dubl=false;

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ПРЕДВАРИТЕЛЬНЫЙ АНАЛИЗ
                 //      (регулярные выражения)


// Замена ряда дефисов/тире на одно длинное тире (дубль №152)
 var reA152 = new RegExp("[\\\-–—]((\\\s|"+nbspEntity+"){0,1}[\\\-–—]){1,}","g");
 var reA152_ = "—";


//  Счетчики для дефисов, тире, короткого тире
 var count_D=0;
 var count_T=0;
 var count_K=0;

// Курсив и жирность во всем тексте (для преобразования выделений подчёркиванием)
// Учитывается формат, в котором есть хотя бы одно сочетание из двух букв и цифр
 var reEmAll = new RegExp("<EM>.{0,}[А-яA-Za-zЁё0-9]{2}.{0,}</EM>","g");
 var EmAll  = false;
 var reStAll = new RegExp("<STRONG>.{0,}[А-яA-Za-zЁё0-9]{2}.{0,}</STRONG>","g");
 var StAll  = false;

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ПРЕДВАРИТЕЛЬНЫЙ АНАЛИЗ
                 //      (сборка функции "Analiz")


 var s="";

 function Analiz(ptr) {

s=ptr.innerHTML;  // оригинальный абзац

   if (s.search(reA152)!=-1)  s=s.replace(reA152, reA152_);

//  подсчет черточек
   if (s.search(/-/g)!=-1)   count_D+=s.match(/-/g).length;
   if (s.search(/—/g)!=-1)   count_T+=s.match(/—/g).length;
   if (s.search(/–/g)!=-1)   count_K+=s.match(/–/g).length;

// Курсив и жирность во всем тексте
   if (!EmAll  &&  s.search(reEmAll)!=-1)   EmAll  = true;
   if (!StAll  &&  s.search(reStAll)!=-1)   StAll  = true;

    }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ПРЕДВАРИТЕЛЬНЫЙ АНАЛИЗ
                 //      (применение функции "Analiz")


 var div;
 var mP;
 var mPL;
 var j;
 var jj;
 var ptr;

 var mChild = fbwBody.children;     //  Получение всех первых разделов "fbw_body"
 for (j=0;  j<mChild.length;  j++) {            //  Последовательный просмотр этих разделов
         div = mChild[j];
         if (div.className != "history"  &&  div.className != "annotation") {        //  выбор раздела (не аннотация и не история)
                 mP = div.getElementsByTagName("P");          //  Получение всех строк в найденном разделе
                 mPL = mP.length;                                       //  Получение количества строк
                 for (jj=0;  jj<mPL;  jj++)                       //  Последовательный просмотр строк
                         Analiz(mP[jj]);                                //   ... и применение к ним функции "Analiz"
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ПРЕДВАРИТЕЛЬНЫЙ АНАЛИЗ
                 //      (обработка и применение полученных данных)


     //  Анализ дефисов/тире


// подготовка к делению на ноль
 var count_DTK = count_D+count_T+count_K+0.00003;

//  процент от общего числа
 var pеrсent_D = (count_D+0.00001) / count_DTK * 100;
 var pеrсent_T = (count_T+0.00001) / count_DTK * 100;
 var pеrсent_K = (count_K+0.00001) / count_DTK * 100;

 var R_Def=true;  //  true  —  дефис  рядом с одной буквой   ›››   к/тире;     false  —  дефис  рядом с одной буквой   ›››   тире;

 var R_Tire=true;  //  true  —  тире  рядом с буквами   ›››   тире;     false  —  тире  рядом с буквами   ›››   дефис;
 var R_TireAvto=false;  //  true  —  закрепление за R_Tire значения "false"

 var R_KTi=true;  //  true  —  к/тире  рядом с буквами   ›››   дефис;     false  —  к/тире  рядом с буквами   ›››   тире;
 var R_KTiAvto=false;  //  true  —  закрепление за R_KTi значения "true"

//  Ситуация когда дефисов и к.тире меньше 0,6%, но есть длинные тире (хотя бы 5 шт.) — "тире" рядом с буквами всегда переходит в "дефис"
 R_TireAvto=(pеrсent_D<0.6  &&  pеrсent_K<0.6  &&  count_T>=5);
 if (R_TireAvto)  R_Tire=false;

//  Ситуация когда дефисов меньше 0,6%, но есть тире и короткие тире (хотя бы 5 шт.) — "короткое тире" рядом с буквами всегда переходит в "дефис"
 R_KTiAvto=(pеrсent_D<0.6  &&  count_K>=5);
 if (R_KTiAvto)  R_KTi=true;

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ВОПРОСЫ
                 //      (регулярные выражения)


           // Форматирование "Код"

 var reV01 = new RegExp("(<SPAN class=code>.+?</SPAN>)","g");
 var mV01=[];  //   Сохраненные фрагменты
 var count_V01=0;  //   Счетчик номеров для фрагмента
 var count_V01_=0;  //   Общий счетчик формата "код"


         // Предварительная обработка текста перед поиском дефисов/тире

// Строка без тегов
 var reCT = new RegExp("(<.+?>)","g");
 var reCT_ = "";

// Ряд пробелов   ›››   обычный пробел   (копия №120)
 var reV120 = new RegExp("(\\\s|"+nbspEntity+"){2,}","g");
 var reV120_ = " ";

// Замена ряда дефисов/тире на одно длинное тире (копия №152)
 var reV152 = new RegExp("[\\\-–—]((\\\s|"+nbspEntity+"){0,1}[\\\-–—]){1,}","g");
 var reV152_ = "—";


       //  Дефис

// дефис + пробел       между букв
 var reV10s = new RegExp("[А-яABD-HJKM-UWYZa-zЁё“»”\\\"]((\\\-|\\\s|"+nbspEntity+"){2})[А-яA-Za-zЁё«„“\\\"]","g");  //  для поиска
 var reV10 = new RegExp("(^|[^А-яA-Za-zЁё\\\-])[А-яA-Za-zЁё\\\-]{0,17}.{0,32}?[А-яABD-HJKM-UWYZa-zЁё“»”\\\"](\\\-|\\\s|"+nbspEntity+"){2}[А-яA-Za-zЁё«„“\\\"].{0,37}[А-яA-Za-zЁё\\\-]{0,17}(?=[^А-яA-Za-zЁё\\\-]|$)","g");
	//  для вставки квадратных скобок
	 var reV11 = new RegExp("([А-яABD-HJKM-UWYZa-zЁё“»”\\\"])((\\\-|\\\s|"+nbspEntity+"){2})(?=[А-яA-Za-zЁё«„“\\\"])","g");
	 var reV11_ = "$1[$2]";

 var mDef=[];  //   Сохраненные фрагменты
 var count_V10=0;  //   Счетчик номеров для фрагмента
 var count_V10_=0;  //   Общий счетчик


       //  Тире

// (тире    или    тире + пробел)       между букв
 var reV20s = new RegExp("[А-яABD-HJKM-UWYZa-zЁё“»”\\\"](—|(—|\\\s|"+nbspEntity+"){2})[А-яA-Za-zЁё«„“\\\"]","g");
 var reV20 = new RegExp("(^|[^А-яA-Za-zЁё\\\-])[А-яA-Za-zЁё\\\-]{0,17}.{0,32}?[А-яABD-HJKM-UWYZa-zЁё“»”\\\"](—|(—|\\\s|"+nbspEntity+"){2})[А-яA-Za-zЁё«„“\\\"].{0,37}[А-яA-Za-zЁё\\\-]{0,17}(?=[^А-яA-Za-zЁё\\\-]|$)","g");
	//  для вставки квадратных скобок
	 var reV21 = new RegExp("([А-яABD-HJKM-UWYZa-zЁё“»”\\\"])(—|(—|\\\s|"+nbspEntity+"){2})(?=[А-яA-Za-zЁё«„“\\\"])","g");
	 var reV21_ = "$1[$2]";

 var mTire=[];
 var count_V20=0;
 var count_V20_=0;  //   Общий счетчик


       //  Короткое тире

// к.тире    или    к.тире + пробел       между букв
 var reV30s = new RegExp("[А-яABD-HJKM-UWYZa-zЁё“»”\\\"](–|(–|\\\s|"+nbspEntity+"){2})[А-яA-Za-zЁё«„“\\\"]","g");
 var reV30 = new RegExp("(^|[^А-яA-Za-zЁё\\\-])[А-яA-Za-zЁё\\\-]{0,17}.{0,32}?[А-яABD-HJKM-UWYZa-zЁё“»”\\\"](–|(–|\\\s|"+nbspEntity+"){2})[А-яA-Za-zЁё«„“\\\"].{0,37}[А-яA-Za-zЁё\\\-]{0,17}(?=[^А-яA-Za-zЁё\\\-]|$)","g");
	//  для вставки квадратных скобок
	 var reV31 = new RegExp("([А-яABD-HJKM-UWYZa-zЁё“»”\\\"])(–|(–|\\\s|"+nbspEntity+"){2})(?=[А-яA-Za-zЁё«„“\\\"])","g");
	 var reV31_ = "$1[$2]";

 var mKTi=[];  //   Сохраненные фрагменты
 var count_V30=0;  //   Счетчик номеров для фрагмента
 var count_V30_=0;  //   Общий счетчик


       //  Обработка фрагментов

   // обрезка фрагмента
 var reF01 = new RegExp("^((.{85,110}?)(\\\s|"+nbspEntity+"|$)|(.{110}))(.{0,})$","g");
 var reF01_ = "$1";

   // удвоение пробелов для лучшей картинки
 var reF02 = new RegExp("(\\\s|"+nbspEntity+")","g");
 var reF02_ = "  ";

   // Добавление многоточий
 var reF03 = new RegExp("^[^А-яA-Za-zЁё0-9«„“»”\\\"]{0,5}|(.)[^А-яA-Za-zЁё0-9«„“»”\\\"]{0,5}$","g");
 var reF03_ = "$1…";

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ВОПРОСЫ
                 //      (сборка функции "Vopros")


 var max0=22;  //   Максимум найденных строк в окне вопроса
 var massif=[];  //   Сохраненные фрагменты из одной строки


 function Vopros(ptr) {
 s=ptr.innerHTML;  // оригинальный абзац
  // В оригинальном абзаце ничего не изменяется — можно попортить текст в формате Код
 // Здесь всё только для качественного сохранения фрагментов


   if (s.search(/</g)!=-1  &&  s.search(reV01)!=-1)  {
           if (count_V01<max0)  {
                   massif=s.match(reV01);  //  Сохранение фрагментов текста одного абзаца
                   for (n=0;  (n < massif.length  &&  count_V01< max0);  n++) {
                           mV01[count_V01]=massif[n].replace(reCT, reCT_);  //  Сохранение фрагментов текста в основном массиве
                           count_V01++;    }    }
               else  count_V01_+=s.match(reV01).length;
          }


   if (s.search(/</g)!=-1)  s=s.replace(reCT, reCT_);   //  Удаление всех внутренних тегов
   if (s.search(reV120)!=-1)  s=s.replace(reV120, reV120_);   //  ряд пробелов  ›››  пробел
   if (s.search(reV152)!=-1)  s=s.replace(reV152, reV152_);   //  ряд дефисов/тире  ›››  тире


   if (s.search(/-/g)!=-1  &&  s.search(reV10s)!=-1)  {
           if (count_V10<max0)  {
                   massif=s.match(reV10);  //  Сохранение фрагментов текста одного абзаца
                   for (n=0;  (n < massif.length  &&  count_V10< max0);  n++) {
                           mDef[count_V10]=massif[n].replace(reV11, reV11_);  //  Сохранение фрагментов текста в основном массиве
                           count_V10++;    }    }
               else  count_V10_+=s.match(reV10s).length;
           }

   if (!R_TireAvto  &&  s.search(/—/g)!=-1  &&  s.search(reV20s)!=-1)  {
           if (count_V20<max0)  {
                   massif=s.match(reV20);  //  Сохранение фрагментов текста одного абзаца
                   for (n=0;  (n < massif.length  &&  count_V20< max0);  n++) {
                           mTire[count_V20]=massif[n].replace(reV21, reV21_);  //  Сохранение фрагментов текста в основном массиве
                           count_V20++;    }    }
               else  count_V20_+=s.match(reV20s).length;
           }

   if (!R_KTiAvto  &&  s.search(/–/g)!=-1  &&  s.search(reV30s)!=-1)  {
           if (count_V30<max0)  {
                   massif=s.match(reV30);  //  Сохранение фрагментов текста одного абзаца
                   for (n=0;  (n < massif.length  &&  count_V30< max0);  n++) {
                           mKTi[count_V30]=massif[n].replace(reV31, reV31_);  //  Сохранение фрагментов текста в основном массиве
                           count_V30++;    }    }
               else  count_V30_+=s.match(reV30s).length;
           }

   }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ВОПРОСЫ
                 //      (применение функции)


 for (j=0;  j<mChild.length;  j++) {            //  Последовательный просмотр всех первых разделов "fbw_body"
         div = mChild[j];
         if (div.className != "history" || ObrabotkaHistory) {        //  выбор раздела (не история при отказе от обработки)
                 mP = div.getElementsByTagName("P");          //  Получение всех строк в найденном разделе
                 mPL = mP.length;                                       //  Получение количества строк
                 for (jj=0;  jj<mPL;  jj++)                       //  Последовательный просмотр строк
                         Vopros(mP[jj]);                              //   ... и применение к ним функции "Vopros"
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ВОПРОСЫ
                 //      (обработка и применение полученных данных)


         //  Функция склонения по падежам в зависимости от числа
 var ok=0;
 function pad(Numer) {
         var m1;
         var m2;
         var Numer;
         ok=2;
         m1=Numer % 10;
         m2=Numer % 100;
         if (m2<11 || m2>19) {
                 if (m1==1) ok=0;
                 else  if (m1==2 || m1==3 || m1==4) ok=1;    }
         return ok;
         }

  var vop="";
 var fragmentov=["похожий фрагмент", "похожих фрагмента", "похожих фрагментов"];

 T_pause -= new Date().getTime();

 var R_Code=true;
 if (count_V01!=0) {
         for (n=0; n<count_V01; n++) {
                vop += "\n"+mV01[n].replace(reF01, reF01_).replace(reF02, reF02_).replace(reF03, reF03_)+"  \n" }
         if (count_V01_>0)  vop = vop.replace(/\n.+\n$/, "\n   * В тексте есть ещё  "+(count_V01_+1)+"  "+fragmentov[pad(count_V01_+1)]+"\n");
         R_Code=AskYesNo("•  ОБРАБАТЫВАТЬ  формат  «КОД» ?\n"+
                              "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"+
                              vop+"\n"+
                              "......................................................................................\n"+
                              "• ДА  —	Обрабатывать\n"+
                              "• НЕТ —	Экранировать (сохранить оригинальный текст)");
         vop="" }


if (count_V10!=0) {
        for (n=0; n<count_V10; n++) {
               vop += "\n"+mDef[n].replace(reF02, reF02_).replace(reF03, reF03_)+"  \n" }
         if (count_V10_>0)  vop = vop.replace(/\n.+\n$/, "\n   * В тексте есть ещё  "+(count_V10_+1)+"  "+fragmentov[pad(count_V10_+1)]+"\n");
        R_Def=AskYesNo("• ДЕФИС РЯДОМ С ОДНОЙ БУКВОЙ\n"+
                             "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"+
                             vop+"\n"+
                             "......................................................................................\n"+
                             "• ДА  —	сохранить дефис как  КОРОТКОЕ ТИРЕ\n"+
                             "• НЕТ —	оторвать от букв и заменить на  ДЛИННОЕ ТИРЕ");
        vop="" }

if (count_V30!=0) {
        for (n=0; n<count_V30; n++) {
               vop += "\n"+mKTi[n].replace(reF02, reF02_).replace(reF03, reF03_)+"  \n" }
         if (count_V30_>0)  vop = vop.replace(/\n.+\n$/, "\n   * В тексте есть ещё  "+(count_V30_+1)+"  "+fragmentov[pad(count_V30_+1)]+"\n");
        R_KTi=AskYesNo("• КОРОТКОЕ ТИРЕ РЯДОМ С БУКВАМИ\n"+
                             "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"+
                             vop+"\n"+
                             "......................................................................................\n"+
                             "• ДА  —	сохранить как  КОРОТКОЕ ТИРЕ  или  ДЕФИС\n"+
                             "• НЕТ —	оторвать от букв и заменить на  ДЛИННОЕ ТИРЕ");    }

if (count_V20!=0) {
        for (n=0; n<count_V20; n++) {
               vop += "\n"+mTire[n].replace(reF02, reF02_).replace(reF03, reF03_)+"  \n" }
         if (count_V20_>0)  vop = vop.replace(/\n.+\n$/, "\n   * В тексте есть ещё  "+(count_V20_+1)+"  "+fragmentov[pad(count_V20_+1)]+"\n");
        R_Tire=AskYesNo("• ДЛИННОЕ ТИРЕ РЯДОМ С БУКВАМИ\n"+
                             "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"+
                             vop+"\n"+
                             "......................................................................................\n"+
                             "• ДА  —	сохранить  ДЛИННОЕ ТИРЕ  и оторвать его от букв\n"+
                             "• НЕТ —	заменить на  КОРОТКОЕ ТИРЕ  или  ДЕФИС");
        vop="" }

 T_pause += new Date().getTime();

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОБРАБОТКА ТЕКСТА
                 //      (регулярные выражения)


// Замена кода   "&nbsp;"   на обычный неразрывный пробел (временно)
 var reNBSPoff = new RegExp(nbspEntity,"g");
 var reNBSPoff_ = nbspChar;


// ---------------------------------------------------------------
/// СКРЫТИЕ АДРЕСОВ И ФОРМАТА КОД
// ---------------------------------------------------------------


// Скрытие и сохранение кода в массиве (временно)
 var reCode1 = new RegExp("(<SPAN class=code>.+?</SPAN>)","g");
 var reCode1_ = FalseCode;   // замена фрагмента на обманку
 var count_Code=0;
 var mCode=[];  //   Массив для сохраненных фрагментов одного абзаца
 var Code_=false;  //   Индикатор сохранения

// Скрытие и сохранение эл. адреса в массиве. (временно)
//   * Все активные ссылки (внутри кавычек href="...")
 var reUrl1_s = new RegExp("href=\\\"","g");
 var reUrl1 = new RegExp("href=\\\"[^&\\\"][^<>\\\"]{0,}","g");
 var reUrl1_ = "href=\""+UrlFalse1;   // замена фрагмента на обманку
 var count_Url1 = 0;
 var mUrl1=[];  //   Массив для сохраненных фрагментов одного абзаца
 var Url1_=false;  //   Индикатор сохранения

// Скрытие и сохранение эл. адреса (текстом) в массиве. (временно)
 var reUrl3 = new RegExp("([a-z]:[\\\\/]|www\\\.|mailto:)[^<>\\\s"+nbspChar+"]{0,}[а-яa-zё0-9]","gi");
 var reUrl3_ = UrlFalse3;   // замена фрагмента на обманку
 var count_Url3 = 0;
 var mUrl3=[];  //   Массив для сохраненных фрагментов одного абзаца
 var Url3_=false;  //   Индикатор сохранения


       // Ошибочное примечание
 var re011 = new RegExp("(<A )class=note (href=\")[^>]{0,}?((http:|mailto:)[^>]{0,}>)","g");
 var re011_ = "$1$2$3";
 var count_011 = 0;

//  Исправление ошибки в сетевом неактивном адресе (пробел перед %+число)
 var re021 = new RegExp("(([a-z]:[\\\\/]|www\\\.|mailto:)[^<>\\\s"+nbspChar+"]{0,})(\\\s|"+nbspChar+")(%[0-9A-F])","g");
 var re021_ = "$1$4";
 var count_021 = 0;



// ---------------------------------------------------------------
/// ПОИСК
// ---------------------------------------------------------------


       // Разделы

// Стихи
 var poem_ = false;


       // Кавычки

//   Угловые кавычки (обе)
 var reQQ = new RegExp("[«»]","g");
 var QQ_  = false;

// Все кавычки
 var reQuQu = new RegExp("[“”«„»\\\"]","g");
 var QuQu_  = false;


       // Дефисы и тире

// Дефисы
 var reDef = new RegExp("\\\-","g");
 var Def_  = false;

// Тире
 var reTire = new RegExp("—","g");
 var Tire_  = false;

// Короткие тире
 var reKTi = new RegExp("–","g");
 var KTi_  = false;

// Дефисы и тире (все)
 var reTiDe = new RegExp("[—–\\\-]","g");
 var TiDe_  = false;


       // Символы

// Многоточия
 var reTTT = new RegExp("…","g");
 var TTT_  = false;

// Неразрывные пробелы
 var reP41 = new RegExp(nbspChar,"g");
 var P41_  = false;

// Знаки вопроса и восклицания
 var reP43 = new RegExp("[\\\?!]","g");
 var P43_  = false;

// Двоеточие или точка-запятая
 var reP48 = new RegExp("[:;]","g");
 var P48_ = false;


       // Разное

// Числа
 var reNN = new RegExp("[0-9]","g");
 var NN_  = false;

// Римские числа
 var reXXI = new RegExp("[IVXLC]","g");
 var XXI_  = false;

// Сокращение + пробел
 var reSokr = new RegExp("\\\.\\\s{0,1}[а-яё]","g");
 var Sokr_  = false;


       // Теги

// Курсив
 var reEm = new RegExp("<EM>","g");
 var Em_  = false;

// Жирность
 var reSt = new RegExp("<STRONG>","g");
 var St_  = false;

// Курсив-жирность
 var EmSt_  = false;


// Все сноски
 var reNoCom = new RegExp("<A class=note|><SUP>\\\{\\\d{1,5}\\\}</SUP></A>","g");
 var NoCom_  = false;



// ---------------------------------------------------------------
/// ВАЛИДАЦИЯ ЗНАКОВ ПРЕПИНАНИЯ И Т.П.  :  операции  № 1хх
// ---------------------------------------------------------------


// Удаление спец. символов
// U+00AD; U+200A; U+200B; U+200E; U+200C; U+200D; U+FEFF;
 var re101 = new RegExp("[­ ​‌‍‎﻿]|&shy;","g");
 var re101_ = "";
 var count_101 = 0;

// Замена спец. символов на обычные пробелы
// U+2002; U+2003; U+2004; U+2005; U+2006; U+2007; U+2008; U+2009; U+2028; U+2029; U+3000;
 var re102 = new RegExp("[          　]","g");
 var re102_ = " ";
 var count_102 = 0;
	// Коррекция для стихов
	 var re102a = new RegExp("\\\s(?=\\\s|"+nbspChar+")","g");
	 var re102a_ = nbspChar;

// Замена спец. символа на неразрывный пробел
// U+202F;
 var re103 = new RegExp("[ ]","g");
 var re103_ = nbspChar;
 var count_103 = 0;

// Замена спец. символов на дефисы
// U+2010; U+2011; U+2012;
 var re104 = new RegExp("[‐‑‒]","g");
 var re104_ = "-";
 var count_104 = 0;

// Замена спец. символов на длинное тире
// U+2015; U+2500;
 var re105 = new RegExp("[―─]","g");
 var re105_ = "—";
 var count_105 = 0;

// Замена спец. символа на запятую
// U+201A;
 var re106 = new RegExp("[‚]([^А-яA-Za-zЁё0-9]|$)","g");
 var re106_ = ",";
 var count_106 = 0;

// Замена спец. символов на апостроф (U+2019)
// U+0027; U+0060; U+00B4; U+02BC; U+0384; U+2018; U+2032;
 var re107 = new RegExp("(^|[^0-9])′|['`´ʼ΄‘]","g");
 var re107_ = "$1’";
 var count_107 = 0;

// Сдвоенный апостроф   ›››   прямые кавычки
 var re108 = new RegExp("(’’)","g");
 var re108_ = "\"";
 var count_108 = 0;

// Добавление пропущенного знака "&"
 var re110 = new RegExp("(^|[^A-Za-z;&])(amp;|nbsp;)","g");
 var re110_ = "$1&$2";
 var count_110 = 0;

// Замена кода н/р пробела на принятое обозначение в FBE
// Устраняет небольшой глюк, который получается после вставки в FBE нескольких строк, после некоторых скриптов или действий в FBE
 var re111 = new RegExp("&nbsp;","g");
 var re111_ = nbspChar;
 var count_111 = 0;


       // Чистка пустых ссылок
 var re114s = new RegExp("href=\\\"\\\"","g");
 var re114 = new RegExp("<A\\\s[^>]{0,}href=\\\"\\\"[^>]{0,}>(.{0,}?)</A>","g");
 var re114_ = "$1";
 var count_114 = 0;


       // Курсив и жирность

//  Нормализация пробелов на Окраине курсива/жирности
 var re119 = new RegExp("("+sIB+")((\\\s|"+nbspChar+"){1,})|((\\\s|"+nbspChar+"){1,})("+fIB+")","g");
 var re119_ = "$2$1$6$4";
 var count_119 = 0;


       //  Ряд пробелов

// Ряд пробелов   ›››   обычный пробел   (не в стихах)
 var re120 = new RegExp("(\\\s|"+nbspChar+"){2,}","g");
 var re120_ = " ";
 var count_120 = 0;

// удаление начальных пробелов строки   (не в стихах)
 var re121 = new RegExp("^(\\\s|"+nbspChar+"){1,}","g");
 var re121_ = "";
 var count_121 = 0;

// удаление конечных пробелов строки
 var re122 = new RegExp("(\\\s|"+nbspChar+"){1,}$","g");
 var re122_ = "";
 var count_122 = 0;


//  Исключение из обработки строк, целиком состоящих из 2-х и более символов:       .    \    /    *    _    -    –    —    ~    •    ·  
//  И строк, целиком состоящих из 3-х и более символов:       "х"
//  НО допускается к обработке комбинация: тире/дефис (0-2 шт.)  + точки (2-4 шт.)
 var re129ex1 = new RegExp("^("+sIB+"){0,1}([\\\.|\\\\/\\\*_\\\-–—~•·](\\\s|"+nbspChar+"){0,}){2,}("+fIB+"){0,1}$","g");
 var re129ex2 = new RegExp("^("+sIB+"){0,1}([хx](\\\s|"+nbspChar+"){0,}){3,}("+fIB+"){0,1}$","g");
 var re129ex_ex = new RegExp("^("+sIB+"){0,1}[\\\-–—~]{0,2}((\\\s|"+nbspChar+"){0,}\\\.){2,4}("+fIB+"){0,1}$","g");
 var count_129ex = 0;


       //  Многоточие и т.п.

// троеточие и его производные (... ,.. .,. ..,)   ›››   многоточие
 var re130 = new RegExp("(\\\.\\\s{0,1}\\\.\\\s{0,1}\\\.|,\\\.\\\.|\\\.,\\\.|\\\.\\\.,)","g");
 var re130_ = "…";
 var count_130 = 0;

// многоточие + комбинации точки и запятой   ›››   многоточие
 var re131= new RegExp("(…)[\\\.,]{1,2}","g");
 var re131_ = "…";
 var count_131 = 0;

// "?…", "!…" и похожие наборы знаков   ›››   "?.." и "!.."
 var re132 = new RegExp("([!\\\?])(…|\\\.,|,\\\.)","g");
 var re132_ = "$1..";
 var count_132 = 0;

// "?!"  +  две точки или зпт   ›››     "?!."
 var re133= new RegExp("([^\\\?!][\\\?!]{2})(\\\.\\\.|,)","g");
 var re133_ = "$1.";
 var count_133 = 0;

// точка + точка    ›››   многоточие   - в начале слов и предложений
 var re140= new RegExp("(^|\\\s|"+nbspChar+"|[\\\(\\\[«„])\\\.\\\.(?=[^\\\?!]|$)","g");
 var re140_ = "$1…";
 var count_140 = 0;

// точка + точка    ›››   многоточие   - перед знаками и буквами
 var re141= new RegExp("([^\\\?!])\\\.\\\.(?=([А-яA-Za-zЁё…\\\)\\\]«„“»”\\\"]|(\\\s|"+nbspChar+")[…\\\(\\\[«„“»”\\\"]{0,1}[а-яa-zё]))","g");
 var re141_ = "$1…";
// используется счетчик №140
//  * Основной случай замены   двух точек   в конце предложения   на многоточие или точку   у меня не получился -- слишком много ошибочных исправлений.. даже с анализом текста на лишние точки..


//  Знак + точка, запятая или маркер   ›››   знак
 var re150= new RegExp("(^;|[^a-z];|[,:—])[\\\.,•]","g");
 var re150_ = "$1";
 var count_150 = 0;
   //   возможно повторное выполнение после № 420, 423


// Замена ряда дефисов/тире на одно длинное тире
 var re152 = new RegExp("[\\\-–—]((\\\s|"+nbspChar+"){0,1}[\\\-–—]){1,}","g");
 var re152_ = "—";
 var count_152 = 0;


       //  Выделение подчеркиванием в обычное выделение

// Стартовая формула для № 155-158
 var re155s = new RegExp("_[^<_>]{1,}_[^>]{0,}(<|$)","g");

// Константы для №№ 155-158 (для упрощения записи формул)
 var Z1="…\\\(\\\[«„“\\\"’—–\\\-";  // начальные знаки
// var Z2="…\\\.,:;\\\?!\\\(\\\)\\\[\\\]«„“»”\\\"’—–\\\-";  // средние знаки
 var Z3="…\\\.,:;\\\?!\\\)\\\]»“”\\\"’—–\\\-";  // конечные знаки

// _Подчеркивание в курсив_
// пробел  +  (знак)  +  _  +  знаки/буквы/пробелы  +  _  +  (знак)  +  пробел    ›››
//      ›››    пробел  +  (знак)  +  <EM>  +  знаки/буквы/пробелы  +  </EM>  +  (знак)  +  пробел
// * Если в тексте идут несколько таких блоков подряд, то они обрабатываются все вместе
// Исключения:   ряд блоков из одной буквы (_а_)
//            1. Поиск фрагментов
 var re155 = new RegExp("(^|\\\s|"+nbspChar+"|>)(["+Z1+"]{0,2})_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]([^<>_]{0,}?[А-яA-Za-zЁё0-9]){0,1}["+Z3+"]{0,4})_((["+Z3+"]{0,4}(\\\s|"+nbspChar+")["+Z1+"]{0,2})_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]([^<>_]{0,}?[А-яA-Za-zЁё0-9]){0,1}["+Z3+"]{0,4})_){0,}(?=["+Z3+"]{0,4}(<|\\\s|"+nbspChar+"|$))","g");
 var m155 = [];
//            2. Первое преобразование фрагментов (добавление формата курсива)
 var re155_2 = new RegExp("^(\\\s|"+nbspChar+"|>){0,1}(["+Z1+"]{0,2})(.{1,})$","g");
 var re155_2ex = new RegExp("^(\\\s|"+nbspChar+"|>){0,1}["+Z1+"]{0,2}_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]["+Z3+"]{0,4})_((["+Z3+"]{0,4}(\\\s|"+nbspChar+")["+Z1+"]{0,2})_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]["+Z3+"]{0,4})_){0,}$","g"); // искл.: _а_  ;  _а_ _а_
 var re155_2_ = "$1$2<EM>$3</EM>";
//            3. Ещё одно преобразование фрагментов (удаление знаков подчеркивания)
 var re155_3 = new RegExp("_","g");
//            4-5. Возвращение фрагментов в строку
 var re155_4 = new RegExp(FalseSim+"(.{0,})$","g");  // при удалении этой части, остается строка до фрагмента
 var re155_5 = new RegExp("^(.{0,}?)"+FalseSim,"g");  // при удалении этой части, остается строка после фрагмента
//            Счетчик
 var count_155 = 0;
//            Выполненная операция в строке
 var if_155 = false;

// _П_о_д_ч_е_р_к_и_в_а_н_и_е_ _в_ _п_о_л_у_ж_и_р_н_о_с_т_ь_
// пробел  +  (знак/буква)  +  _  +  (знак/буква/пробел  +  _  +  .................    +  _  +  знак/буква/пробел  +  _)  +  (знак/буква)  +  пробел    ›››
//      ›››    пробел  +  (знак/буква)  +  <STRONG>  +  фрагмент без подчеркиваний  +  </STRONG>  +  (знак/буква)  +  пробел
// * Если в тексте идут несколько таких блоков подряд, то они обрабатываются все вместе
// Исключения:   ряд блоков из одной буквы (_а_)
//            1. Поиск фрагментов
 var re156 = new RegExp("(^|\\\s|"+nbspChar+"|>)["+Z1+"]{0,2}(([А-яA-Za-zЁё0-9]["+Z3+"]{0,4}_(["+Z3+"]{0,4}[А-яA-Za-zЁё0-9"+Z3+"]["+Z3+"]{0,4}_){0,}(["+Z3+"]{0,4}[А-яA-Za-zЁё0-9"+Z3+"]){0,1})|(([А-яA-Za-zЁё0-9"+Z1+"]["+Z1+"]{0,2}){0,1}(_["+Z1+"]{0,2}[А-яA-Za-zЁё0-9"+Z1+"]["+Z1+"]{0,2}){0,}_[А-яA-Za-zЁё0-9](["+Z3+"]{0,4}_["+Z3+"]{0,4}[А-яA-Za-zЁё0-9"+Z3+"]){0,}(["+Z3+"]{0,4}_){0,1}))(((["+Z3+"]{0,4}(\\\-|\\\s|"+nbspChar+")["+Z1+"]{0,2})|(\\\-|\\\s|"+nbspChar+")[А-яA-Za-zЁё0-9—–\\\-](\\\-|\\\s|"+nbspChar+"))(([А-яA-Za-zЁё0-9]["+Z3+"]{0,4}_(["+Z3+"]{0,4}[А-яA-Za-zЁё0-9"+Z3+"]["+Z3+"]{0,4}_){0,}(["+Z3+"]{0,4}[А-яA-Za-zЁё0-9"+Z3+"]){0,1})|(([А-яA-Za-zЁё0-9"+Z1+"]["+Z1+"]{0,2}){0,1}(_["+Z1+"]{0,2}[А-яA-Za-zЁё0-9"+Z1+"]["+Z1+"]{0,2}){0,}_[А-яA-Za-zЁё0-9](["+Z3+"]{0,4}_["+Z3+"]{0,4}[А-яA-Za-zЁё0-9"+Z3+"]){0,}(["+Z3+"]{0,4}_){0,1}))){0,}(?=["+Z3+"]{0,4}(<|\\\s|"+nbspChar+"|$))","g");
//  * коротко:   А_(ш_)*ш? || ш?(_ш)*_А(_ш)*_?   , где А- буква/цифра, ш- буква/цифра/знак.   Плюс повторы этого же выражения через пробел, или через букву/тире с пробелами
 var m156 = [];
//            2. Первое преобразование фрагментов (добавление формата полужирности)
 var re156_2 = new RegExp("^(\\\s|"+nbspChar+"|>){0,1}(["+Z1+"]{0,2})(.{1,}?)$","g");
 var re156_2ex = new RegExp("^(\\\s|"+nbspChar+"|>){0,1}["+Z1+"]{0,2}_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]["+Z3+"]{0,4})_((["+Z3+"]{0,4}(\\\s|"+nbspChar+")["+Z1+"]{0,2})_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]["+Z3+"]{0,4})_){0,}$","g"); // искл.: _а_  ;  _а_ _а_
 var re156_2_ = "$1$2<STRONG>$3</STRONG>";
//            3. Ещё одно преобразование фрагментов (удаление знаков подчеркивания)
 var re156_3 = new RegExp("_","g");
//            4-5. Возвращение фрагментов в строку
 var re156_4 = new RegExp(FalseSim+"(.{0,})$","g");  // при удалении этой части, остается строка до фрагмента
 var re156_5 = new RegExp("^(.{0,}?)"+FalseSim,"g");  // при удалении этой части, остается строка после фрагмента
//            Счетчик
 var count_156 = 0;
//            Выполненная операция в строке
 var if_156 = false;

// _Подчеркивание_в_курсив_
// пробел  +  (знак)  +  _  +  знаки/буквы  +  (_  +  .................    +  _  +  знаки/буквы)  +  _  +  (знак)  +  пробел    ›››
//      ›››    пробел  +  (знак)  +  <EM>  +  фрагмент без подчеркиваний  +  </EM>  +  (знак)  +  пробел
// * Если в тексте идут несколько таких блоков подряд, то они обрабатываются все вместе
// Исключения:   ряд блоков из одной буквы (_а_)
//            1. Поиск фрагментов
 var re157 = new RegExp("(^|\\\s|"+nbspChar+"|>)["+Z1+"]{0,2}_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]{1,}["+Z3+"]{0,4}_){1,}(["+Z3+"]{0,4}(\\\s|"+nbspChar+")["+Z1+"]{0,2}_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]{1,}["+Z3+"]{0,4}_){1,}){0,}(?=["+Z3+"]{0,4}(<|\\\s|"+nbspChar+"|$))","g");
 var m157 = [];
//            2. Первое преобразование фрагментов (добавление формата курсив)
 var re157_2 = new RegExp("^([^_]{0,})_(.{1,}?)_$","g");
 var re157_2ex = new RegExp("^(\\\s|"+nbspChar+"|>){0,1}["+Z1+"]{0,2}_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]["+Z3+"]{0,4})_((["+Z3+"]{0,4}(\\\s|"+nbspChar+")["+Z1+"]{0,2})_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]["+Z3+"]{0,4})_){0,}$","g"); // искл.: _а_  ;  _а_ _а_
 var re157_2_ = "$1<EM>$2</EM>";
//            3. Второе преобразование фрагментов (удаление знаков подчеркивания)
//            * еще одно преобразование фрагментов (замена оставшихся знаков подчеркивания на пробелы) производится без заготовок рег. выражений
 var re157_3 = new RegExp("_(["+Z3+"]{0,4}(\\\s|"+nbspChar+")["+Z1+"]{0,2})_","g");
 var re157_3_ = "$1";
//            4-5. Возвращение фрагментов в строку
 var re157_4 = new RegExp(FalseSim+"(.{0,})$","g");  // при удалении этой части, остается строка до фрагмента
 var re157_5 = new RegExp("^(.{0,}?)"+FalseSim,"g");  // при удалении этой части, остается строка после фрагмента
//            Счетчик
 var count_157 = 0;

// _одна оторванная буква_
// пробел  +  (знак)  +  _  +  (знак)  +  буква  +  (знак)  +  _  +  (знак)  +  пробел    ›››    в курсив или жирность
// * Если в тексте идут несколько таких блоков подряд, то они обрабатываются все вместе
// Исключение:   если рядом есть знак подчеркивания
//            1. Поиск фрагментов
 var re158 = new RegExp("(^|(^[^_]{0,1}|[^_]{2})(\\\s|"+nbspChar+")|>)(["+Z1+"]{0,2})_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]["+Z3+"]{0,4})_((["+Z3+"]{0,4}(\\\s|"+nbspChar+")["+Z1+"]{0,2})_(["+Z1+"]{0,2}[А-яA-Za-zЁё0-9]["+Z3+"]{0,4})_){0,}(?=["+Z3+"]{0,4}(<|(\\\s|"+nbspChar+")([^_]{2}|[^_]{0,1}$)|$))","g");
 var m158 = [];
//            2. Первое преобразование фрагментов (добавление формата курсив/жирность)
 var re158_2 = new RegExp("^([^_]{0,})(.{1,}?)$","g");
 var re158_2_ = "$1<STRONG>$2</STRONG>";
 var re158_2__ = "$1<EM>$2</EM>";
//            3. Ещё одно преобразование фрагментов (удаление знаков подчеркивания)
 var re158_3 = new RegExp("_","g");
//            4-5. Возвращение фрагментов в строку
 var re158_4 = new RegExp(FalseSim+"(.{0,})$","g");  // при удалении этой части, остается строка до фрагмента
 var re158_5 = new RegExp("^(.{0,}?)"+FalseSim,"g");  // при удалении этой части, остается строка после фрагмента


       //  Диакритика  ›››  Ударение

 var re160s = new RegExp("[áéúóý]","g");
 var count_160 = 0;

// а
 var re161 = new RegExp("([А-яЁё])á|á([а-яё])","g");
 var re161_ = "$1а"+Ud+"$2";

// е
 var re162 = new RegExp("([А-яЁё])é|é([а-яё])","g");
 var re162_ = "$1е"+Ud+"$2";

// о
 var re163 = new RegExp("([А-яЁё])ó|ó([а-яё])","g");
 var re163_ = "$1о"+Ud+"$2";

// у
 var re164 = new RegExp("([А-яЁё])ý|ý([а-яё])","g");
 var re164_ = "$1у"+Ud+"$2";

// и
 var re165 = new RegExp("([А-яЁё])ú|ú([а-яё])","g");
 var re165_ = "$1и"+Ud+"$2";


       // Лишние знаки в начале и конце строки

// Лишние знаки препинания в начале строки
// Исключения:   Смайлы из ";"
//  * Двоеточие полностью исключено — кроме использования в смайлах, это может быть и своеобразный маркер
 var re172 = new RegExp("^("+sIB+"){0,1}([\\\.;])(\\\s|"+nbspChar+"|$)","g");
 var re172_ = "$1";
 var count_172 = 0;
	// без тегов
	 var re172_0 = new RegExp("^([\\\.;])(\\\s|"+nbspChar+"|$)","g");
	 var re172_0_ = "";

//  Лишняя запятая в начале строки
 var re173 = new RegExp("^("+sIB+"){0,1}(,)(\\\s|"+nbspChar+"){0,1}","g");
 var re173_ = "$1";
	// без тегов
	 var re173_0 = new RegExp("^(,)(\\\s|"+nbspChar+"){0,1}","g");
	 var re173_0_ = "";
// используется счетчик №172

//  Лишняя точка в начале строки
// Исключения:   |  .ру  |  .рф  |  .РУ  |  .Ру  |
 var re174 = new RegExp("^("+sIB+"){0,1}(\\\.)(?![A-Za-z0-9\\\.]|(ру|рф|Ру|РУ)([^А-я]|$))","g");
 var re174_ = "$1";
	// без тегов
	 var re174_0 = new RegExp("^(\\\.)(?![A-Za-z0-9\\\.]|(ру|рф|Ру|РУ)([^А-я]|$))","g");
	 var re174_0_ = "";
// используется счетчик №172


       // Лишние знаки в середине строки

//  Пробел  +  лишняя точка
// Исключения:   |  .ру  |  .рф  |
 var re180 = new RegExp("(\\\s|"+nbspChar+")\\\.([а-пс-яё]|р(?![уф]([^А-я]|$)))","g");
 var re180_ = "$1$2";
 var count_180 = 0;

//  Знак + пробел  +  лишняя точка
// Исключения:   .РУ  |  .Ру  |
 var re181 = new RegExp("([…\\\.,:;\\\?!\\\)\\\]—–\\\-])(\\\s|"+nbspChar+")\\\.([А-ПС-ЯЁ]|Р(?![Уу]([^А-я]|$)))","g");
 var re181_ = "$1$2$3";
// используется счетчик №180

//  Знак + пробел  +  лишняя запятая
 var re182 = new RegExp("([…\\\.,:;\\\?!\\\)\\\]—–\\\-])(\\\s|"+nbspChar+"),([А-яA-Za-zЁё])","g");
 var re182_ = "$1$2$3";
 var count_182 = 0;


// ---------------------------------------------------------------
/// СТАНДАРТИЗАЦИЯ ТЕГОВ курсива и жирности  :  операции  № 2хх
// ---------------------------------------------------------------


       // Объединение
       //  * исключения:   |   скобки   |  кавычки   |  .  |  !  |  ?  |  ,  —  |

// Объединение курсива
 var re201 = new RegExp("</EM>(([\\\s\\\-–—,;:…]|"+nbspChar+"){0,3})<EM>","g");
 var re201_ = "$1";
 var count_201 = 0;

// Объединение полужирностей
 var re202 = new RegExp("</STRONG>(([\\\s\\\-–—,;:…]|"+nbspChar+"){0,3})<STRONG>","g");
 var re202_ = "$1";
// используется счетчик №201
         //  далее индивидуальный повтор №201 для случая </EM></STRONG> + знаки + <STRONG><EM>


// Нормализация 1-2 символов курсивных/полужирных знаков препинания
// Исключения:    |  (!)  |  «?»  |   и т.п.
// В скрипте эта формула выполняется два раза подряд
 var re203 = new RegExp("(<EM>|<STRONG>)(([\\\-–—_\\\.…,;:!\\\?/~\\\[\\\]\\\(\\\)„“«»\\\"’%]){0,2})(</EM>|</STRONG>)","g");
 var re203_ = "$2";
 var count_203 = 0;


       //  Переплетения
       //  * распутаются не все
       //  ** стартовая формула не для ускорения вычислений, а для поиска сплетения

// Стык   </EM></STRONG>...<EM>   и   </EM>...<STRONG><EM>
 var re215s = new RegExp("(</EM></STRONG>([\\\s\\\-–—,;:…]|"+nbspChar+"){0,3}<EM>)|(</EM>([\\\s\\\-–—,;:…]|"+nbspChar+"){0,3}<STRONG><EM>)","g");
 var re215 = new RegExp("<STRONG><EM>([^<>]{1,})</EM></STRONG>","g");
 var re215_ = "<EM><STRONG>$1</STRONG></EM>";
 var count_215 = 0;
         //  далее индивидуальный повтор № 201, 202

// Стык   </STRONG></EM>...<STRONG>   и   </STRONG>...<EM><STRONG>
 var re216s = new RegExp("(</STRONG></EM>([\\\s\\\-–—,;:…]|"+nbspChar+"){0,3}<STRONG>)|(</STRONG>([\\\s\\\-–—,;:…]|"+nbspChar+"){0,3}<EM><STRONG>)","g");
 var re216 = new RegExp("<EM><STRONG>([^<>]{1,})</STRONG></EM>","g");
 var re216_ = "<STRONG><EM>$1</EM></STRONG>";
// используется счетчик №215
         //  далее индивидуальный повтор № 202, 201


       // Стандартное ударение (&#769;) для выделенной буквы
       //  Исключения:  |  Буквица  |  ё  |  заглавная буква без выделения тегами (в 50% случаях — это результат ошибочного пропуска пробела)  |

// Буква  +  выделенная строчная    ›››   Буква  +  строчная  +  знак ударения
 var re220s = new RegExp(">[аеиоуыэюя]<","g");  //  стартовая формула для № 220, 221
 var re220 = new RegExp("([А-яЁё])(<EM><STRONG>([аеиоуыэюя])</STRONG></EM>|<STRONG><EM>([аеиоуыэюя])</EM></STRONG>|<STRONG>([аеиоуыэюя])</STRONG>|<EM>([аеиоуыэюя])</EM>)","g");
 var re220_ = "$1$3$4$5$6"+Ud;
 var count_220 = 0;

// выделенная строчная  +  буква    ›››   строчная  +  знак ударения  +  буква
 var re221 = new RegExp("(<EM><STRONG>([аеиоуыэюя])</STRONG></EM>|<STRONG><EM>([аеиоуыэюя])</EM></STRONG>|<STRONG>([аеиоуыэюя])</STRONG>|<EM>([аеиоуыэюя])</EM>)([а-яё])","g");
 var re221_ = "$2$3$4$5"+Ud+"$6";

// строчная  +  выделенная Заглавная    ›››   строчная  +  Заглавная  +  спец. знак
// * FalseSim — временно выполняет обязанности ударения
 var re222s = new RegExp(">[АЕИОУЫЭЮЯ]<","g");
 var re222 = new RegExp("([а-яё])(<EM><STRONG>([АЕИОУЫЭЮЯ])</STRONG></EM>|<STRONG><EM>([АЕИОУЫЭЮЯ])</EM></STRONG>|<STRONG>([АЕИОУЫЭЮЯ])</STRONG>|<EM>([АЕИОУЫЭЮЯ])</EM>)","g");
 var re222_ = "$1$3$4$5$6"+FalseSim;

//  Заглавная  +  спец. знак    ›››   строчная  +  знак ударения      (продолжение №222)
 var re223 = new RegExp("[АЕИОУЫЭЮЯ](?="+FalseSim+")","g");    //  Для извлечение заглавных букв
 var m223 = [];                 //   Массив для этих букв, в котором будет производиться понижение регистра
 var re224 = new RegExp("[АЕИОУЫЭЮЯ]"+FalseSim,"");     //  Для добавление букв с пониженным регистром (модификатора "g" здесь нет, поэтому замена будет происходить по одной букве)

//   ----------------------- конец для "Стандартное ударение (&#769;) для выделенной буквы" ---------------------


//  Нормализация: пробел+знак на Окраине эмфазиса/стронга
 var re241 = new RegExp("("+sIB+")([…\\\.,:;\\\?!\\\(\\\)\\\[\\\]«„“»”\\\"—–\\\-]{1,2})(\\\s|"+nbspChar+")|(\\\s|"+nbspChar+")([…\\\.,:;\\\?!\\\(\\\)\\\[\\\]«„“»”\\\"—–\\\-]{1,2})("+fIB+")","g");
 var re241_ = "$2$3$1$6$4$5";
 var count_241 = 0;


       // Выделение и снятие выделения со скобок и кавычек на окраине тега
       // (Формула не будет реагировать, когда в нужном выделении стоит посторонний тег)

// Снятие выделения с одиночной квадратной скобки на окраине
 var re250 = new RegExp("("+sIB+")([^А-яA-Za-zЁё0-9\\\[\\\]]{0,3})(\\\[)([^<\\\[\\\]]{0,})("+fIB+")|("+sIB+")([^<\\\[\\\]]{0,})(\\\])([^А-яA-Za-zЁё0-9\\\[\\\]]{0,3})("+fIB+")","g");
 var re250_ = "$2$3$1$4$5$6$7$10$8$9";
 var count_250 = 0;

// Выделение пары квадратных скобок
 var re251 = new RegExp("(\\\[)([^А-яA-Za-zЁё0-9\\\[\\\]]{0,3})("+sIB+")([^<\\\[\\\]]{0,})("+fIB+")([^А-яA-Za-zЁё0-9\\\[\\\]]{0,3})(\\\])","g");
 var re251_ = "$3$1$2$4$6$7$5";
 var count_251 = 0;


// Снятие выделения с одиночной круглой скобки на окраине
 var re252 = new RegExp("("+sIB+")([^А-яA-Za-zЁё0-9\\\(\\\)]{0,3})(\\\()([^<\\\(\\\)]{0,})("+fIB+")|("+sIB+")([^<\\\(\\\)]{0,})(\\\))([^А-яA-Za-zЁё0-9\\\(\\\)]{0,3})("+fIB+")","g");
 var re252_ = "$2$3$1$4$5$6$7$10$8$9";
// используется счетчик №250

// Выделение пары круглых скобок
 var re253 = new RegExp("(\\\()([^А-яA-Za-zЁё0-9\\\(\\\)]{0,3})("+sIB+")([^<\\\(\\\)]{0,})("+fIB+")([^А-яA-Za-zЁё0-9\\\(\\\)]{0,3})(\\\))","g");
 var re253_ = "$3$1$2$4$6$7$5";
// используется счетчик №251


// Выделение пары угловых кавычек
// * без снятия выделения с непарной кавычки (иначе ошибки в "«прямая_речь, — не_выделенные_слова_персонажа, — прямая_речь»", или в случае, когда выделенный окавыченый текст растягивается на несколько абзацев)
 var re255 = new RegExp("(«)([…\\\.„“\\\"\\\-–\\\(\\\[]{0,3})("+sIB+")([^<«»]{0,})(("+fIB+")([…\\\.,:;\\\?!“”\\\"\\\-–\\\)\\\]]{0,4})(»)|(»)([…\\\.,:;\\\?!\\\-–\\\)\\\]]{0,4})("+fIB+"))","g");
 var re255_ = "$3$1$2$4$7$8$6$9$10$11";
 var count_255 = 0;
	 var re256 = new RegExp("("+sIB+")([…\\\.\\\-–\\\(\\\[]{0,3})(«)([^<«»]{0,})("+fIB+")([…\\\.,:;\\\?!“”\\\"\\\-–\\\)\\\]]{0,4})(»)","g");
	 var re256_ = "$1$2$3$4$6$7$5";


// Выделение запятой и точки+запятая в конце выделения
 var re260 = new RegExp("("+fIB+")(,|\\\.,)","g");
 var re260_ = "$2$1";
 var count_260 = 0;


// Снятие выделения со сноски на окраине выделения
 var re270 = new RegExp("("+NC+")("+fIB+")|("+sIB+")("+NC+")","g");
 var re270_ = "$2$1$4$3";
 var count_270 = 0;


// ---------------------------------------------------------------
/// РЕЖИМЫ  :  операции  № 3хх
// ---------------------------------------------------------------


       //  Дефис ››› Тире (R_Def = false)

// Буква + дефис + пробел   ›››   Буква + тире + пробел
 var re301 = new RegExp("([А-яA-Za-zЁё“»”\\\"])("+fIB+"){0,1}\\\-("+fIB+"){0,1}(\\\s|"+nbspChar+")","g");
 var re301_ = "$1$2—$3 ";
 var count_301 = 0;
	// без тегов
	 var re301_0 = new RegExp("([А-яA-Za-zЁё“»”\\\"])\\\-(\\\s|"+nbspChar+")","g");
	 var re301_0_ = "$1— ";

//  Пробел + дефис + буква   ›››   Пробел + тире + буква
 var re302 = new RegExp("(\\\s|"+nbspChar+")("+sIB+"){0,1}\\\-("+sIB+"){0,1}([А-яA-Za-zЁё«„“\\\"])","g");
 var re302_ = " $2—$3$4";
	// без тегов
	 var re302_0 = new RegExp("(\\\s|"+nbspChar+")\\\-([А-яA-Za-zЁё«„“\\\"])","g");
	 var re302_0_ = " —$2";
// используется счетчик №301


       //  Тире ››› Дефис (R_Tire = false)

// Буква + тире + пробел   ›››   Буква + дефис + пробел
 var re310 = new RegExp("([А-яA-Za-zЁё“»”\\\"])("+fIB+"){0,1}—("+fIB+"){0,1}(\\\s|"+nbspChar+")","g");
 var re310_ = "$1$2-$3 ";
 var count_310 = 0;
	// без тегов
	 var re310_0 = new RegExp("([А-яA-Za-zЁё“»”\\\"])—(\\\s|"+nbspChar+")","g");
	 var re310_0_ = "$1- ";

//  Пробел + тире + буква   ›››   Пробел + дефис + буква
 var re311 = new RegExp("(\\\s|"+nbspChar+")("+sIB+"){0,1}—("+sIB+"){0,1}([А-яA-Za-zЁё«„“\\\"])","g");
 var re311_ = " $2-$3$4";
	// без тегов
	 var re311_0 = new RegExp("(\\\s|"+nbspChar+")—([А-яA-Za-zЁё«„“\\\"])","g");
	 var re311_0_ = " -$2";
// используется счетчик №310

//  Буква + тире + буква   ›››   Буква + дефис + буква
 var re312 = new RegExp("([А-яA-Za-zЁё“»”\\\"])("+aIB+"){0,1}—(?=("+aIB+"){0,1}[А-яA-Za-zЁё«„“\\\"])","g");
 var re312_ = "$1$2-";
 var count_312 = 0;
	// без тегов
	 var re312_0 = new RegExp("([А-яA-Za-zЁё“»”\\\"])—(?=[А-яA-Za-zЁё«„“\\\"])","g");
	 var re312_0_ = "$1-";


       //  К.тире ››› Дефис (R_KTi = true)

// Не_цифра + к/тире + не_цифра   ›››   Не_цифра + дефис + не_цифра
 var re320 = new RegExp("(^|[^0-9])("+aIB+"){0,1}–(?=("+aIB+"){0,1}([^0-9]|$))","g");
 var re320_ = "$1$2-";
 var count_320 = 0;
	// без тегов
	 var re320_0 = new RegExp("(^|[^0-9])–(?=([^0-9]|$))","g");
	 var re320_0_ = "$1-";


       //  К.тире ››› Тире (R_KTi = false)

// Не_цифра + к/тире + не_цифра   ›››   Не_цифра + тире + не_цифра
 var re321 = new RegExp("(^|[^0-9])("+aIB+"){0,1}–(?=("+aIB+"){0,1}([^0-9]|$))","g");
 var re321_ = "$1$2—";
 var count_321 = 0;
	// без тегов
	 var re321_0 = new RegExp("(^|[^0-9])–(?=([^0-9]|$))","g");
	 var re321_0_ = "$1—";


         //  Сохранение длинного тире между названиями

//      "Москва—Кассиопея"
 var reNm1s = new RegExp("[а-яa-zё]([—][\\\s"+nbspChar+"]{0,1}|[\\\s"+nbspChar+"][—])[А-ЯA-ZЁ]","g");
 var reNm1 = new RegExp("(^|[^А-яA-Za-zЁё])([А-ЯA-ZЁ][а-яa-zё]{1,})([—][\\\s"+nbspChar+"]{0,1}|[\\\s"+nbspChar+"][—])(?=[А-ЯA-ZЁ][а-яa-zё]{1,}([^А-яA-Za-zЁё]|$))","g");
 var reNm1_ = "$1$2"+FalseTire;
 var countNm = 0;


// ---------------------------------------------------------------
/// ПУНКТУАЦИЯ (без тире)  :  операции  № 4хх
// ---------------------------------------------------------------

// * Формулы записаны проще из-за того, что многие теги курсива и жирности перемещены или удалены, и в некоторых местах они уже быть не могут


       //  Начало строки

// Кавычки в начале строки
 var re401 = new RegExp("^([«„»“”\\\"]…{0,1})(\\\s|"+nbspChar+")","g");
 var re401_ = "$1";
 var count_401 = 0;

// Многоточие в начале строки
 var re402 = new RegExp("^…(\\\s|"+nbspChar+")(?=("+sIB+"){0,1}[«„\\\"А-яA-Za-zЁё0-9])","g");
 var re402_ = "…";
 var count_402 = 0;
	// без тегов
 var re402_0 = new RegExp("^…(\\\s|"+nbspChar+")(?=[«„\\\"А-яA-Za-zЁё0-9])","g");
	 var re402_0_ = "…";


       //  Конец строки

// Кавычки в конце строки
 var re410 = new RegExp("(\\\s|"+nbspChar+")(…{0,1}[«„»“”\\\"])$","g");
 var re410_ = "$2";
 var count_410 = 0;

// Многоточие в конце строки
 var re411 = new RegExp("([А-яA-Za-zЁё0-9»\\\"])("+fIB+"){0,1}(\\\s|"+nbspChar+")…$","g");
 var re411_ = "$1$2…";
 var count_411 = 0;
	// без тегов
	 var re411_0 = new RegExp("([А-яA-Za-zЁё0-9»\\\"])(\\\s|"+nbspChar+")…$","g");
	 var re411_0_ = "$1…";


       //   Лишний пробел + знак

//  Лишний пробел  +  "."
//  Исключения:  |  .ru и т.п.  |  .RU и т.п.  |  .ру  |  .рф  |  .Ру  |  .РУ  |
 var re420 = new RegExp("(\\\s|"+nbspChar+")\\\.("+sIB+"){0,1}($|(?![A-Za-z]|(ру|рф|Ру|РУ)([^А-я]|$)))","g");
 var re420_ = ".$2$3";
 var count_420 = 0;
	// без тегов
	 var re420_0 = new RegExp("(\\\s|"+nbspChar+")\\\.($|(?![A-Za-z]|(ру|рф|Ру|РУ)([^А-я]|$)))","g");
	 var re420_0_ = ".$2";
   //  после результативной операции — повтор №150

//  Лишний пробел  +  ";"
//  Исключения: Смайлы
 var re421 = new RegExp("(\\\s|"+nbspChar+")(;)(("+sIB+"){0,1}[А-яA-Za-zЁё0-9«„\\\"][А-яA-Za-zЁё0-9,]|\\\s|"+nbspChar+"|$)","g");
 var re421_ = "$2$3";
	// без тегов
	 var re421_0 = new RegExp("(\\\s|"+nbspChar+")(;)([А-яA-Za-zЁё0-9«„\\\"][А-яA-Za-zЁё0-9,]|\\\s|"+nbspChar+"|$)","g");
	 var re421_0_ = "$2$3";
// используется счетчик №420

//  Лишний пробел  +  ":"
//  Исключения: Смайлы, деление
 var re421a = new RegExp("([А-яA-Za-zЁё\\\)\\\]«„“»”\\\"])("+fIB+"){0,1}(\\\s|"+nbspChar+")(:)(("+sIB+"){0,1}[А-яA-Za-zЁё0-9«„\\\"][А-яA-Za-zЁё0-9,]|\\\s|"+nbspChar+"|$)","g");
 var re421a_ = "$1$2$4$5";
	// без тегов
	 var re421a_0 = new RegExp("([А-яA-Za-zЁё\\\)\\\]«„“»”\\\"])(\\\s|"+nbspChar+")(:)([А-яA-Za-zЁё0-9«„\\\"][А-яA-Za-zЁё0-9,]|\\\s|"+nbspChar+"|$)","g");
	 var re421a_0_ = "$1$3$4";
// используется счетчик №420

//  Лишний пробел  +   |   !   |  ?  |
//  Исключение: использование этих знаков, как самостоятельное обозначение восклицания и вопроса без текста
 var re422 = new RegExp("([А-яA-Za-zЁё0-9\\\?!\\\(\\\)\\\[\\\]«„“»”\\\"])("+fIB+"){0,1}(\\\s|"+nbspChar+")(?=[!\\\?]([^A-Za-z]|$))","g");
 var re422_ = "$1$2";
	 var re422_0 = new RegExp("([А-яA-Za-zЁё0-9\\\?!\\\(\\\)\\\[\\\]«„“»”\\\"])(\\\s|"+nbspChar+")(?=[!\\\?]([^A-Za-z]|$))","g");
	 var re422_0_ = "$1";
// используется счетчик №420

//  Лишний пробел  +     )   ]   ,   »
 var re423 = new RegExp("(\\\s|"+nbspChar+")([\\\)\\\],»])","g");
 var re423_ = "$2";
// используется счетчик №420
   //  после результативной операции — повтор №150

// Лишний пробел  +  [сноска]
 var re424 = new RegExp("(\\\s|"+nbspChar+")("+NC+")","g");
 var re424_ = "$2";
 var count_424 = 0;

// Лишний пробел  +  многоточие
 var re425 = new RegExp("(\\\s|"+nbspChar+")…([\\\)\\\]»])","g");
 var re425_ = "…$2";
 var count_425 = 0;

// Лишний пробел  +  многоточие + пробел
 var re426 = new RegExp("([А-яA-Za-zЁё»\\\"])("+fIB+"){0,1}(\\\s|"+nbspChar+")…(\\\s|"+nbspChar+")","g");
 var re426_ = "$1$2…$4";
	// без тегов
	 var re426_0 = new RegExp("([А-яA-Za-zЁё»\\\"])(\\\s|"+nbspChar+")…(\\\s|"+nbspChar+")","g");
	 var re426_0_ = "$1…$3";
// используется счетчик №425


       //  Кавычки   |  "  |  »  |
       // * кавычка  =“=  бывает и правой, и левой

//  кавычки "»  +  знак  +  пропущенный пробел
//  исключения:   |  …текст  |  .текст  |
 var re431 = new RegExp("([\\\"»])("+fIB+"){0,1}([:;,\\\?!\\\)\\\]]|[\\\?!]\\\.\\\.)("+fIB+"){0,1}("+sIB+"){0,1}([А-яA-Za-zЁё])","g");
 var re431_ = "$1$2$3$4 $5$6";
 var count_431 = 0;
	// без тегов
	 var re431_0 = new RegExp("([\\\"»])([:;,\\\?!\\\)\\\]]|[\\\?!]\\\.\\\.)([А-яA-Za-zЁё])","g");
	 var re431_0_ = "$1$2 $3";

//  Лишний пробел  +  кавычка  +  знак
 var re432 = new RegExp("([А-яA-Za-zЁё]…{0,1})("+fIB+"){0,1}(\\\s|"+nbspChar+")([\\\"“”])([:;,\\\.\\\?!\\\)\\\]]|[\\\?!]\\\.\\\.)("+fIB+"){0,1}(\\\s|"+nbspChar+"|$)","g");
 var re432_ = "$1$2$4$5$6$7";
 var count_432 = 0;
	// без тегов
	 var re432_0 = new RegExp("([А-яA-Za-zЁё]…{0,1})(\\\s|"+nbspChar+")([\\\"“”])([:;,\\\.\\\?!\\\)\\\]]|[\\\?!]\\\.\\\.)(\\\s|"+nbspChar+"|$)","g");
	 var re432_0_ = "$1$3$4$5";

//  (Лишний пробел)  +  ошибочная кавычка  +  знак  +  пробел   ›››   обычная кавычка  +  знак  +  пробел
 var re433 = new RegExp("([А-яA-Za-zЁё][…“»]{0,1})(\\\s|"+nbspChar+"){0,1}([«„])([:;,\\\.\\\?!\\\)\\\]]|[\\\?!]\\\.\\\.)("+fIB+"){0,1}(\\\s|"+nbspChar+"|$)","g");
 var re433_ = "$1\"$4$5$6";
	// без тегов
	 var re433_0 = new RegExp("([А-яA-Za-zЁё][…“»]{0,1})(\\\s|"+nbspChar+"){0,1}([«„])([:;,\\\.\\\?!\\\)\\\]]|[\\\?!]\\\.\\\.)(\\\s|"+nbspChar+"|$)","g");
	 var re433_0_ = "$1\"$4$5";
// используется счетчик №432


       //  Знак  +  лишний пробел

//  "(",  "[",  "«",  "„"  +  (многоточие)  +  лишний пробел
 var re440 = new RegExp("([\\\(\\\[«„][…]{0,1})(\\\s|"+nbspChar+")(?=[^:;])","g");
 var re440_ = "$1";
 var count_440 = 0;

//  Сноска  +  лишний пробел
 var re441 = new RegExp("("+NC+")(\\\s|"+nbspChar+")([\\\.:\\\?!]|…(\\\s|"+nbspChar+"|[\\\)\\\]»]))","g");
 var re441_ = "$1$3";
 var count_441 = 0;


       //  Знак  +  пропущенный пробел

//  Точка  +  пропущенный пробел
// Искл.:   |  С.Т.А.Л.К.Е.Р.   |   file.NAME   |   .РУ   |   .Рф   |  код   |
 var re450= new RegExp("([а-яa-zё»]{2})("+fIB+"){0,1}(\\\.)("+fIB+"){0,1}("+sIB+"){0,1}([А-ПС-ЯЁ]|Р(?![Ууф]([^А-я]|$)))","g");
 var re450_ = "$1$2$3$4 $5$6";
 var count_450 = 0;
	// без тегов
	 var re450_0= new RegExp("([а-яa-zё»]{2})(\\\.)([А-ПС-ЯЁ]|Р(?![Ууф]([^А-я]|$)))","g");
	 var re450_0_ = "$1$2 $3";

// Искл.:   |  31.ХII.2024   |  код   |
 var re450a= new RegExp("([0-9])("+fIB+"){0,1}(\\\.)("+fIB+"){0,1}("+sIB+"){0,1}([А-ЯЁ][а-я])","g");
 var re450a_ = "$1$2$3$4 $5$6";
 var count_450a = 0;
	// без тегов
	 var re450a_0= new RegExp("([0-9])(\\\.)([А-ЯЁ][а-я])","g");
	 var re450a_0_ = "$1$2 $3";

//  "?"/"!"  +  пропущенный пробел
// Искл.:   |   неполный электронный адрес   |
 var re451= new RegExp("([а-яa-zё])("+fIB+"){0,1}([\\\?!])("+fIB+"){0,1}("+sIB+"){0,1}([А-ЯЁ])","g");
 var re451_ = "$1$2$3$4 $5$6";
	// без тегов
	 var re451_0= new RegExp("([а-яa-zё])([\\\?!])([А-ЯЁ])","g");
	 var re451_0_ = "$1$2 $3";
// используется счетчик №450

//  ";" или ":" +  пропущенный пробел
// Исключения:  |  координата (А;b) (0;0)  |  &lt; и т.п.  |  счет 1:0  |  ход е2:е4  |  mail:Vasia  |  Большинство смайликов  |
 var re453= new RegExp("([А-яЁё»])("+fIB+"){0,1}([:;])("+fIB+"){0,1}("+sIB+"){0,1}([А-яA-Za-zЁё«„\\\"][А-яA-Za-zЁё,])","g");
 var re453_ = "$1$2$3$4 $5$6";
	// без тегов
	 var re453_0= new RegExp("([А-яЁё»])([:;])([А-яA-Za-zЁё«„\\\"][А-яA-Za-zЁё,])","g");
	 var re453_0_ = "$1$2 $3";
// используется счетчик №450

//  "," +  пропущенный пробел
// Исключения:  |  f(А,b)  |  3,14159  |
 var re454= new RegExp("([А-яЁё])("+fIB+"){0,1}(,)("+fIB+"){0,1}("+sIB+"){0,1}([А-яA-Za-zЁё«„])","g");
 var re454_ = "$1$2,$4 $5$6";
	// без тегов
	 var re454_0= new RegExp("([А-яЁё])(,)([А-яA-Za-zЁё«„])","g");
	 var re454_0_ = "$1, $3";
// используется счетчик №450

 var re454a= new RegExp("([0-9])("+fIB+"){0,1}(,)("+fIB+"){0,1}("+sIB+"){0,1}([А-яЁё«„])","g");
 var re454a_ = "$1$2,$4 $5$6";
	// без тегов
	 var re454a_0= new RegExp("([0-9])(,)([А-яЁё«„])","g");
	 var re454a_0_ = "$1, $3";
// используется счетчик №450

//  "?!."  +  пропущенный пробел
 var re455= new RegExp("([А-яA-Za-zЁё0-9»])("+fIB+"){0,1}([\\\?!][\\\?!\\\.]{2,4})("+fIB+"){0,1}("+sIB+"){0,1}([«„А-яA-ZЁё0-9])","g");
 var re455_ = "$1$2$3$4 $5$6";
	// без тегов
	 var re455_0= new RegExp("([А-яA-Za-zЁё0-9»])([\\\?!][\\\?!\\\.]{2,4})([«„А-яA-ZЁё0-9])","g");
	 var re455_0_ = "$1$2 $3";
// используется счетчик №450


       //  Пропущенный пробел  +  знак

//  Пропущенный пробел  +  "«" или "„"
 var re460= new RegExp("([А-яA-Za-zЁё:,\\\.\\\?!»]|[А-я>];)("+fIB+"){0,1}("+sIB+"){0,1}(«|„)("+sIB+"){0,1}([А-яA-Za-zЁё])","g");
 var re460_ = "$1$2 $3$4$5$6";
 var count_460 = 0;
	// без тегов
	 var re460_0= new RegExp("([А-яA-Za-zЁё:,\\\.\\\?!»]|[А-я>];)(«|„)([А-яA-Za-zЁё])","g");
	 var re460_0_ = "$1 $2$3";


       //  Сноски

//   [сноска]  +  кавычки    ›››    кавычки  +  [сноска]
 var re470 = new RegExp("("+NC+")("+sIB+"){0,1}([«„“»”\\\"])([\\\s\\\.,:;\\\?!\\\)\\\]—]|"+nbspChar+"|$)","g");
 var re470_ = "$3$1$2$4";
 var count_470 = 0;
	// без тегов
	 var re470_0 = new RegExp("("+NC+")([«„“»”\\\"])([\\\s\\\.,:;\\\?!\\\)\\\]—]|"+nbspChar+"|$)","g");
	 var re470_0_ = "$2$1$3";

// [сноска]  +  пропущенный пробел
 var re471 = new RegExp("("+NC+")("+sIB+"){0,1}([А-яЁёA-Za-z0-9\\\-—\\\(\\\[„«])","g");
 var re471_ = "$1 $2$3";
 var count_471 = 0;
	// без тегов
	 var re471_0 = new RegExp("("+NC+")([А-яЁёA-Za-z0-9\\\-—\\\(\\\[„«])","g");
	 var re471_0_ = "$1 $2";

// [сноска]  +  знак  +  пропущенный пробел
 var re472 = new RegExp("("+NC+")("+sIB+"){0,1}([\\\]\\\)\\\.,:;\\\?!»]{1,4})("+fIB+"){0,1}("+sIB+"){0,1}([«„А-яЁёA-Za-z0-9])","g");
 var re472_ = "$1$2$3$4 $5$6";
 var count_472 = 0;
	// без тегов
	 var re472_0 = new RegExp("("+NC+")([\\\]\\\)\\\.,:;\\\?!»]{1,4})([«„А-яЁёA-Za-z0-9])","g");
	 var re472_0_ = "$1$2 $3";


// ---------------------------------------------------------------
/// ТИРЕ и ДЕФИСЫ  :  операции  № 5хх
// ---------------------------------------------------------------


       // Короткое тире


       //  промежутки, даты

         //  дополнительные переменные
         var mesiaz = "январ[ье]|феврал[ье]|марте?|апрел[ье]|ма[йе]|июн[ье]|июл[ье]|августе?|сентябр[ье]|октябр[ье]|ноябр[ье]|декабр[ье]|весна|весной|летом?|осенью?|зима|зимой"; //  ("+mesiaz+")
         var Mesiaz = "[Яя]нвар[ье]|[Фф]еврал[ье]|[Мм]арте?|[Аа]прел[ье]|[Мм]а[йе]|[Ии]юн[ье]|[Ии]юл[ье]|[Аа]вгусте?|[Сс]ентябр[ье]|[Оо]ктябр[ье]|[Нн]оябр[ье]|[Дд]екабр[ье]|[Вв]есна|[Вв]есной|[Лл]етом?|[Оо]сенью?|[Зз]има|[Зз]имой"; // ("+Mesiaz+")
         var mesiaZA = "января|февраля|марта|апреля|мая|июня|июля|августа|сентября|октября|ноября|декабря|весны|лета|осени|зимы"; //  ("+mesiaZA+")
         var Natchalo = "[Нн]ачал[аое]|[Нн]ачалом|[Сс]ередин[ыае]|[Сс]ерединой|[Кк]онец|[Кк]онцом|[Кк]онц[ае]"; //  ("+Natchalo+")
         var natchalo = "начал[аое]|началом|середин[ыае]|серединой|конец|концом|конц[ае]"; //  ("+natchalo+")


//  Короткое тире меж римских чисел:  "II–V век"
 var re501 = new RegExp("([IVXLC])([\\\-—](\\\s|"+nbspChar+"){0,1}|(\\\s|"+nbspChar+"){0,1}[\\\-—])([IVXLC]{1,})("+fIB+"){0,1}([^А-яA-Za-zЁё0-9]|$)","g");
 var re501_ = "$1–$5$6$7";
 var count_501 = 0;
	// без тегов
	 var re501_0 = new RegExp("([IVXLC])([\\\-—](\\\s|"+nbspChar+"){0,1}|(\\\s|"+nbspChar+"){0,1}[\\\-—])([IVXLC]{1,})([^А-яA-Za-zЁё0-9]|$)","g");
	 var re501_0_ = "$1–$5$6";

//  Короткое тире меж римских чисел:  "II – начало V века"
 var re502 = new RegExp("([IVXLC])(\\\s|"+nbspChar+"){0,1}[\\\-—](\\\s|"+nbspChar+"){0,1}(("+natchalo+")(\\\s|"+nbspChar+")){0,1}([IVXLC]{1,})("+fIB+"){0,1}([^А-яA-Za-zЁё0-9]|$)","g");
 var re502_ = "$1 – $4$7$8$9";
	// без тегов
	 var re502_0 = new RegExp("([IVXLC])(\\\s|"+nbspChar+"){0,1}[\\\-—](\\\s|"+nbspChar+"){0,1}(("+natchalo+")(\\\s|"+nbspChar+")){0,1}([IVXLC]{1,})([^А-яA-Za-zЁё0-9]|$)","g");
	 var re502_0_ = "$1 – $4$7$8";
// используется счетчик №501


//  Короткое тире между числительными:  "один – два"
//  * если пробелов нет, то дефис сохраняется:  "один-два"
 var re503 = new RegExp("(^|[^А-я])(один|одн[ау]|дв[ае]|три|четыре|пять|шесть|семь|восемь|девять|десять|[a-я]{3,5}надцать|двадцать|тридцать|сорок|пятьдесят|шестьдесят|семьдесят|восемьдесят|девяносто|сто|двести|триста|четыреста|пятьсот|шестьсот|семьсот|восемьсот|девятьсот|тысяч[аи]{0,1})(\\\s|"+nbspChar+")[—\\\-](\\\s|"+nbspChar+")(?=один|дв[ае]|три|четыр|пять|пятнадцат|шест|сем|восем|девят|десять|сорок|девяносто|сто|тысяч|миллион)","g");
 var re503_ = "$1$2 – ";
 var count_503 = 0;


//  короткое тире между месяцами:   "Июнь–август"
 var re504s = new RegExp("([—\\\-]|\\\s|"+nbspChar+")("+mesiaz+"|"+natchalo+")","g");
 var re504 = new RegExp("(^|[^А-я])("+Mesiaz+")([—\\\-](\\\s|"+nbspChar+"){0,1}|(\\\s|"+nbspChar+"){0,1}[—\\\-])(?="+mesiaz+")","g");
 var re504_ = "$1$2–";
 var count_504 = 0;

// продолжение №504
//  короткое тире между месяцами:   "Июнь – начало августа"
 var re505 = new RegExp("(^|[^А-я])("+Mesiaz+"|"+mesiaZA+")(\\\s|"+nbspChar+"){0,1}[—\\\-](\\\s|"+nbspChar+"){0,1}(?=("+mesiaz+")|("+natchalo+")(\\\s|"+nbspChar+")("+mesiaZA+"))","g");
 var re505_ = "$1$2 – ";
// используется счетчик №504


//  Число месяц через н/р пробел (здесь не актуально, можно перенести в семисотые номера)
 var re506 = new RegExp("(\\\d)\\\s{0,1}("+mesiaZA+")","g");
 var re506_ = "$1"+nbspChar+"$2";
 var count_506 = 0;


//  короткое тире между сложными датами
//    месяц год – месяц год      или     Число_месяц (год) – число_месяц (год)       или     комбинация
//  Например:  1 мая 1999 – февраль 2002;   Май 1999 – 1 февраля 2002;   в начале июля 2022 – конце января 2023
 var re507s = new RegExp("([—–\\\-]|\\\s|"+nbspChar+")("+natchalo+"|"+mesiaz+"|"+mesiaZA+")","g");
 var re507 = new RegExp("(^|[^А-я])((("+Mesiaz+"|"+Natchalo+")(\\\s|"+nbspChar+")(\\\d{3,4}))|(((\\\d)|("+Natchalo+"))(\\\s|"+nbspChar+")("+mesiaZA+")((\\\s|"+nbspChar+")\\\d{3,4}){0,1}))(\\\s|"+nbspChar+"){0,1}[—–\\\-](\\\s|"+nbspChar+"){0,1}(?=(((\\\d){1,2}|("+natchalo+"))(\\\s|"+nbspChar+")("+mesiaZA+"))|((("+mesiaz+")|("+natchalo+"))(\\\s|"+nbspChar+")(\\\d){3,4}))","g");
 var re507_ = "$1$2 – ";
 var count_507 = 0;
 var count_507_ = 0;

//  короткое тире между датами и упрощенными порядковыми числительными
//      "50-е – конец 60-х"; "начало 70-х – 80-е годы";
 var re508 = new RegExp("(\\\d\\\-([ехм]|го))(\\\s|"+nbspChar+"){0,1}[—–\\\-](\\\s|"+nbspChar+"){0,1}(?=(("+natchalo+")(\\\s|"+nbspChar+")){0,1}(\\\d{1,4}\\\-([ехм]|го)))","g");
 var re508_ = "$1 – ";
// используется счетчик №507


        //  Коррекция

// Замена дефисов/тире на короткие тире рядом с цифрами
// * в re510 не считается 1-я скобка, а 2-я считается — поэтому она будет 1-й, но отмечать ее не надо, потому что содержимое в скобках "(?=" не учитывается
// ** "(?=" нужно для случая   "-1-" ,  чтобы обработать оба дефиса (тире)
 var re510 = new RegExp("[\\\-—](?=("+sIB+"){0,1}[0-9])|([0-9])("+fIB+"){0,1}[\\\-—](?=[^а-яё]|$)","g");
 var re510_ = "$2$3–";
 var count_510 = 0;
	// без тегов
	 var re510_0 = new RegExp("[\\\-—](?=[0-9])|([0-9])[\\\-—](?=[^а-яё]|$)","g");
	 var re510_0_ = "$1–";

// Замена короткого тире между цифрой и строчной буквой   на   дефис
//  Например:   1-ый
 var re511 = new RegExp("([0-9])("+fIB+"){0,1}[—–]([а-яё])","g");
 var re511_ = "$1$2-$3";
 var count_511 = 0;
	// без тегов
	 var re511_0 = new RegExp("([0-9])[—–]([а-яё])","g");
	 var re511_0_ = "$1-$2";

// Лишний пробел между числами через короткое тире
 var re512s = new RegExp("[0-9](–(\\\s|"+nbspChar+")|(\\\s|"+nbspChar+")–)[0-9]","g");
 var re512 = new RegExp("((^|[–,…\\\(\\\[«„“\\\"]|\\\s|"+nbspChar+")[0-9]{1,10})(–(\\\s|"+nbspChar+")|(\\\s|"+nbspChar+")–)(?=[0-9]{1,10}([–…\\\.,:;\\\?!\\\)\\\]»“”\\\"]|\\\s|"+nbspChar+"|$))","g");
 var re512_ = "$1–";
 var count_512 = 0;

// Замена дефисов/тире на короткие тире между цифрами
 var re514 = new RegExp("([0-9])("+fIB+"){0,1}(\\\s|"+nbspChar+")[\\\-—](\\\s|"+nbspChar+")(?=("+sIB+"){0,1}[0-9])","g");
 var re514_ = "$1$2 – ";
 var count_514 = 0;
	// без тегов
	 var re514_0 = new RegExp("([0-9])(\\\s|"+nbspChar+")[\\\-—](\\\s|"+nbspChar+")(?=[0-9])","g");
	 var re514_0_ = "$1 – ";


//  Замена пробела и короткого тире в ISBN
 var re515s = new RegExp("(ISBN)","g");
 var re515 = new RegExp("(ISBN)\\\s{0,1}([0-9])","g");
 var re515_ = "$1"+nbspChar+"$2";
 var count_515 = 0;

 var re516 = new RegExp("(ISBN)"+nbspChar+"([0-9][0-9\\\-]{0,})–","g"); // в цикле
 var re516_ = "$1"+nbspChar+"$2-";



       // Дефис на тире

// ДЕФИС  в конце строки   на ТИРЕ
 var re520 = new RegExp("(([…\\\.,:\\\?!\\\)\\\]«„“»”\\\"]("+fIB+"){0,1})|(\\\s|"+nbspChar+"))\\\-("+fIB+"){0,1}$","g");
 var re520_ = "$2"+nbspChar+"—$5";
 var count_520 = 0;
	// без тегов
	 var re520_0 = new RegExp("(([…\\\.,:\\\?!\\\)\\\]«„“»”\\\"])|(\\\s|"+nbspChar+"))\\\-$","g");
	 var re520_0_ = "$2"+nbspChar+"—";


// ДЕФИС   между пробелами   на ТИРЕ
 var re521 = new RegExp("(\\\s|"+nbspChar+")\\\-(?=(\\\s|"+nbspChar+"))","g");
 var re521_ = "$1—";
 var count_521 = 0;


// Точка + ДЕФИС + пробел ››› точка + н/р пробел + ТИРЕ + пробел
//  Исключения: Сокращения с дефисом  |  Ж.-П.Сартр  |  ж.-д. транспорт  |  и т.п.
 var re530 = new RegExp("\\\.("+fIB+"){0,1}\\\-("+fIB+"){0,1}(\\\s|"+nbspChar+")","g");
 var re530_ = ".$1$2"+nbspChar+"— ";
 var count_530 = 0;
	// без тегов
	 var re530_0 = new RegExp("\\\.\\\-(\\\s|"+nbspChar+")","g");
	 var re530_0_ = "."+nbspChar+"— ";

// Точка + пробел + ДЕФИС ››› точка + н/р пробел + ТИРЕ +
 var re531 = new RegExp("([а-яa-zё])("+fIB+"){0,1}\\\.("+fIB+"){0,1}(\\\s|"+nbspChar+")("+sIB+"){0,1}\\\-("+sIB+"){0,1}([А-ЯA-ZЁ])","g");
 var re531_ = "$1$2.$3"+nbspChar+"— $5$6$7";
	// без тегов
	 var re531_0 = new RegExp("([а-яa-zё])\\\.(\\\s|"+nbspChar+")\\\-([А-ЯA-ZЁ])","g");
	 var re531_0_ = "$1."+nbspChar+"— $3";
// со сносками
 var re531nc = new RegExp("([а-яa-zё])("+fIB+"){0,1}("+NC+"){0,1}\\\.("+fIB+"){0,1}("+NC+"){0,1}(\\\s|"+nbspChar+")("+sIB+"){0,1}\\\-("+sIB+"){0,1}([А-ЯA-ZЁ])","g");
 var re531nc_ = "$1$2$3.$4$5"+nbspChar+"— $7$8$9";
	// без тегов
	 var re531nc_0 = new RegExp("([а-яa-zё])("+NC+"){0,1}\\\.("+NC+"){0,1}(\\\s|"+nbspChar+")\\\-([А-ЯA-ZЁ])","g");
	 var re531nc_0_ = "$1$2.$3"+nbspChar+"— $5";
// используется счетчик №530


// Знак препинания 1 + ДЕФИС  ›››  Знак препинания 1 + н/р пробел + ТИРЕ
 var re532 = new RegExp("([…,\\\?!\\\)\\\]])("+fIB+"){0,1}(\\\s|"+nbspChar+"){0,1}("+sIB+"){0,1}\\\-("+fIB+"){0,1}(\\\s|"+nbspChar+"){0,1}","g");
 var re532_ = "$1$2$5"+nbspChar+"— $4";
	// без тегов
	 var re532_0 = new RegExp("([…,\\\?!\\\)\\\]])(\\\s|"+nbspChar+"){0,1}\\\-(\\\s|"+nbspChar+"){0,1}","g");
	 var re532_0_ = "$1"+nbspChar+"— ";
// со сносками
 var re532nc = new RegExp("([…,\\\?!\\\)\\\]])("+fIB+"){0,1}("+NC+"){0,1}(\\\s|"+nbspChar+"){0,1}("+sIB+"){0,1}\\\-(\\\s|"+nbspChar+"){0,1}","g");
 var re532nc_ = "$1$2$3"+nbspChar+"— $5";
	// без тегов
	 var re532nc_0 = new RegExp("([…,\\\?!\\\)\\\]])("+NC+"){0,1}(\\\s|"+nbspChar+"){0,1}\\\-(\\\s|"+nbspChar+"){0,1}","g");
	 var re532nc_0_ = "$1$2"+nbspChar+"— ";
// используется счетчик №530

// Знак препинания 2 + ДЕФИС (с пробелом) ››› Знак препинания 2 + н/р пробел + ТИРЕ + пробел
// Исключения:   Смайлы;   код символа;
 var re533 = new RegExp("(:|[А-я>];)("+fIB+"){0,1}((\\\s|"+nbspChar+")("+sIB+"){0,1}\\\-|\\\-("+fIB+"){0,1}(\\\s|"+nbspChar+"))","g");
 var re533_ = "$1$2$6"+nbspChar+"— $5";
	// без тегов
	 var re533_0 = new RegExp("(:|[А-я>];)((\\\s|"+nbspChar+")\\\-|\\\-(\\\s|"+nbspChar+"))","g");
	 var re533_0_ = "$1"+nbspChar+"— ";
// используется счетчик №530

// ДЕФИС  +  многоточие  ›››  ТИРЕ  + пробел  +  многоточие
// + нормализация тире и пробела
 var re534 = new RegExp("\\\-("+fIB+"){0,1}(\\\s|"+nbspChar+"){0,1}("+sIB+"){0,1}…([А-яA-Za-zЁё])","g");
 var re534_ = "—$1 $3…$4";
 var count_534 = 0;
	// без тегов
	 var re534_0 = new RegExp("\\\-(\\\s|"+nbspChar+"){0,1}…([А-яA-Za-zЁё])","g");
	 var re534_0_ = "— …$2";



       // Тире

// Тире + обычный пробел
//  * Исключение:  тире с неразрывным пробелом в начале строки
 var re550 = new RegExp("(.)—("+fIB+"){0,1}("+nbspChar+"){0,1}(?=("+sIB+"){0,1}[А-яA-Za-zЁё0-9…\\\(\\\[«„])","g");
 var re550_ = "$1—$2 ";
 var count_550 = 0;
	// без тегов
	 var re550_0 = new RegExp("(.)—("+nbspChar+"){0,1}(?=[А-яA-Za-zЁё0-9…\\\(\\\[«„])","g");
	 var re550_0_ = "$1— ";


//  Тире/дефис  (+ пробел)   в начале строки
 var re551 = new RegExp("^("+sIB+"){0,1}([«\\\"]){0,1}(—\\\s|[\\\-~](\\\s|"+nbspChar+")|("+sIB+"){0,1}[—\\\-~]("+sIB+"){0,1}([А-яA-Za-zЁё0-9—…\\\(\\\[«„\\\"\\\.\\\?!_]))","g");
 var re551_ = "$1$2—"+nbspChar+"$5$6$7";
 var count_551 = 0;
	// без тегов
	 var re551_0 = new RegExp("^([«\\\"]){0,1}(—\\\s|[\\\-~](\\\s|"+nbspChar+")|[—\\\-~]([А-яA-Za-zЁё0-9—…\\\(\\\[«„\\\"\\\.\\\?!_]))","g");
	 var re551_0_ = "$1—"+nbspChar+"$4";


// Пропущенный пробел перед тире
//    + неразрывный пробел на обычный
//    * Исключение:  тире в конце строки
 var re561 = new RegExp("([А-яA-Za-zЁё0-9]("+aIB+"){0,1}[«„“»”\\\"]{0,1}|[\\\)\\\]])("+fIB+"){0,1}("+nbspChar+"){0,1}("+sIB+"){0,1}—(?=.)","g");
 var re561_ = "$1$3 $5—";
 var count_561 = 0;
	// без тегов
	 var re561_0 = new RegExp("([А-яA-Za-zЁё0-9][«„“»”\\\"]{0,1}|[\\\)\\\]])("+nbspChar+"){0,1}—(?=.)","g");
	 var re561_0_ = "$1 —";

// Пропущенный неразрывный пробел перед тире
//    + обычный пробел на неразрывный
 var re562 = new RegExp("([…\\\.,:\\\?!]|[А-я>];)("+aIB+"){0,1}([«„“»”\\\"]){0,1}("+fIB+"){0,1}\\\s{0,1}("+sIB+"){0,1}—","g");
 var re562_ = "$1$2$3$4"+nbspChar+"$5—";
 var count_562 = 0;
	// без тегов
	 var re562_0 = new RegExp("([…\\\.,:\\\?!]|[А-я>];)([«„“»”\\\"]){0,1}\\\s{0,1}—","g");
	 var re562_0_ = "$1$2"+nbspChar+"—";
//  со сносками
 var re562nc = new RegExp("([…\\\.,:\\\?!]|[А-я>];)("+fIB+"){0,1}([«„“»”\\\"]){0,1}("+fIB+"){0,1}("+NC+"){0,1}\\\s{0,1}("+sIB+"){0,1}—","g");
 var re562nc_ = "$1$2$3$4$5"+nbspChar+"$6—";
	// без тегов
	 var re562nc_0 = new RegExp("([…\\\.,:\\\?!]|[А-я>];)([«„“»”\\\"]){0,1}("+NC+"){0,1}\\\s{0,1}—","g");
	 var re562nc_0_ = "$1$2$3"+nbspChar+"—";


// пробел + ТИРЕ   ›››  неразрывный пробел + ТИРЕ  (в конце строки)
 var re570 = new RegExp("([^\\\s"+nbspChar+"])\\\s{0,1}—("+fIB+"){0,1}$","g");
 var re570_ = "$1"+nbspChar+"—$2";
	// без тегов
	 var re570_0 = new RegExp("([^\\\s"+nbspChar+"])\\\s{0,1}—$","g");
	 var re570_0_ = "$1"+nbspChar+"—";
// используется счетчик №562


// Неучтенные дефисы  ›››  короткое тире
//  В основном здесь обрабатывается пара   буква+дефис
 var re580 = new RegExp("(^|\\\s|"+nbspChar+"|[…,:\\\?!\\\(\\\)\\\[\\\]«„“”\\\";])((<[^>]{1,}>){0,3})\\\-|\\\-(?=((<[^>]{1,}>){0,3})([…,:;\\\?!\\\(\\\)\\\[\\\]„“»”\\\"]|\\\s|"+nbspChar+"))","g");
 var re580_ = "$1$2–";
 var count_580 = 0;
	//  без тегов (любых)
	 var re580_0 = new RegExp("(^|\\\s|"+nbspChar+"|[…,:\\\?!\\\(\\\)\\\[\\\]«„“”\\\";])\\\-|\\\-(?=([…,:;\\\?!\\\(\\\)\\\[\\\]„“»”\\\"]|\\\s|"+nbspChar+"))","g");
	 var re580_0_ = "$1–";


// ---------------------------------------------------------------
/// НЕРАЗРЫВНЫЕ ПРОБЕЛЫ С ЗАКРЕПЛЕНИЕМ  :  операции  № 6хх
// ---------------------------------------------------------------

//  * Формулы с пометкой "s" используются для стартовой проверки у сложной формулы
//  * Формулы с пометкой "sv" используются для сохранения неразрывного пробела
//  ** Замена происходит в три этапа:
//  1. Маскировка уже измененных н/р пробелов.  (sv) -- не добавляется в статистику
//  2. Замена обычных  пробелов на замаскированный н/р пробел. -- добавляется в статистику
//  3. Снятие маскировки после прохождения формулы № 690.



// св. Мария, гр. Корейко, пл. Гагарина, ул. Ленина, оз. Балхаш, (предварительное дополнение к №611)
//  исключение:  им. (это может быть местоимением в конце предложения)
 var re601 = new RegExp("(^|[\\\s\\\"«„“])([Гг]р|оз|[Пп]л|[Сс]в|[Уу]л)\\\.\\\s{0,1}([А-ЯЁ])","g");
 var re601_ = "$1$2."+nbspChar+"$3";
 var count_601 = 0;


       //  Висящие слова

// Добавление в конце абзаца неразрывного пробела перед словом (или числом) настраиваемой длины (зависит от Abz5)
 var re610sv = new RegExp(nbspChar+"([А-яA-Za-zЁё0-9]{1,"+Abz5+"}[^А-яA-Za-zЁё0-9]{0,3}("+fIB+"){0,1})$","g");
 var re610 = new RegExp("\\\s([А-яA-Za-zЁё0-9]{1,"+Abz5+"}[^А-яA-Za-zЁё0-9]{0,3}("+fIB+"){0,1})$","g");
 var re610_ = FalseSim+"$1";
 var count_610 = 0;
	// без тегов
	 var re610sv_0 = new RegExp(nbspChar+"([А-яA-Za-zЁё0-9]{1,"+Abz5+"}[^А-яA-Za-zЁё0-9]{0,3})$","g");
	 var re610_0 = new RegExp("\\\s([А-яA-Za-zЁё0-9]{1,"+Abz5+"}[^А-яA-Za-zЁё0-9]{0,3})$","g");
	 var re610_0_ = FalseSim+"$1";

// Добавление неразрывного пробела перед 1- или 2-символьным словом в конце предложения.
// Формулы зависят от переменных Abz6 и Abz7 (для 1-символьного они равны "0" и "1", для 1-2-символьного — наоборот: "1" и "0")
// Исключения:   И. Фамилия  ;   фр. язык   ;   г. Караганда   ;    оз. Балхаш (добавлены в №601)   ;   Хо! Хо! Хо!   ;
 var re611s = new RegExp("[^\\\.—]"+nbspChar+"[А-яЁё]","g");
 var re611sv = new RegExp("([^\\\?!\\\.\\\-—…])"+nbspChar+"(?=([А-яЁё]{2}|[абия]){"+Abz6+"}[абия]{"+Abz7+"}("+fIB+"){0,1}([»\\\"]{0,1})([\\\.\\\?!…]|[\\\?!]\\\.\\\.)("+fIB+"){0,1}\\\s("+sIB+"){0,1}[А-ЯA-ZЁ])","g");
 var re611 = new RegExp("([^\\\?!\\\.\\\-—…])\\\s(?=([А-яЁё]{2}|[абия]){"+Abz6+"}[абия]{"+Abz7+"}("+fIB+"){0,1}([»\\\"]{0,1})([\\\.\\\?!…]|[\\\?!]\\\.\\\.)("+fIB+"){0,1}\\\s("+sIB+"){0,1}[А-ЯA-ZЁ])","g");
 var re611_ = "$1"+FalseSim;
 var count_611 = 0;
	// без тегов
	 var re611sv_0 = new RegExp("([^\\\?!\\\.\\\-—…])"+nbspChar+"(?=([А-яЁё]{2}|[абия]){"+Abz6+"}[абия]{"+Abz7+"}([»\\\"]{0,1})([\\\.\\\?!…]|[\\\?!]\\\.\\\.)\\\s[А-ЯA-ZЁ])","g");
	 var re611_0 = new RegExp("([^\\\?!\\\.\\\-—…])\\\s(?=([А-яЁё]{2}|[абия]){"+Abz6+"}[абия]{"+Abz7+"}([»\\\"]{0,1})([\\\.\\\?!…]|[\\\?!]\\\.\\\.)\\\s[А-ЯA-ZЁ])","g");
	 var re611_0_ = "$1"+FalseSim;

// Слово длиной в одну букву   +   предлоги "к", "у", "с", "о", "в",   +   слово от 3-х букв и длиннее
 var re615s = new RegExp("[вкусо]"+nbspChar+"[А-яЁё<]","g");
 var re615sv = new RegExp("((\\\s|"+nbspChar+")[а-яё][\\\.,]{0,1}\\\s[вкусо])"+nbspChar+"(("+sIB+"){0,1}[А-яЁё]{3})","g");
 var re615 = new RegExp("((\\\s|"+nbspChar+")[а-яё][\\\.,]{0,1}\\\s[вкусо])\\\s(("+sIB+"){0,1}[А-яЁё]{3})","g");
 var re615_ = "$1"+FalseSim+"$3";
 var count_615 = 0;
	// без тегов
	 var re615sv_0 = new RegExp("((\\\s|"+nbspChar+")[а-яё][\\\.,]{0,1}\\\s[вкусо])"+nbspChar+"([А-яЁё]{3})","g");
	 var re615_0 = new RegExp("((\\\s|"+nbspChar+")[а-яё][\\\.,]{0,1}\\\s[вкусо])\\\s([А-яЁё]{3})","g");
	 var re615_0_ = "$1"+FalseSim+"$3";

// Добавление неразрывного пробела после первого слова длиной в 1 букву в начале предложения
// Исключения: Это слово не может быть всем предложением;   и не может быть первым в абзаце
 var re616s = new RegExp("[А-ЯA-ZЁ]:{0,1}"+nbspChar,"g");
 var re616sv = new RegExp("([\\\.\\\?!…]("+fIB+"){0,1}\\\s("+sIB+"){0,1}[А-ЯA-ZЁ]:{0,1})"+nbspChar,"g");
 var re616 = new RegExp("([\\\.\\\?!…]("+fIB+"){0,1}\\\s("+sIB+"){0,1}[А-ЯA-ZЁ]:{0,1})\\\s","g");
 var re616_ = "$1"+FalseSim;
 var count_616 = 0;
	// без тегов
	 var re616sv_0 = new RegExp("([\\\.\\\?!…]\\\s[А-ЯA-ZЁ]:{0,1})"+nbspChar,"g");
	 var re616_0 = new RegExp("([\\\.\\\?!…]\\\s[А-ЯA-ZЁ]:{0,1})\\\s","g");
	 var re616_0_ = "$1"+FalseSim;


       //  Сохранение н/р пробела
// * счетчик не используется

//  Сохранение н/р пробела  в   р а з р я д к е   (от 4-х букв)
 var re620s = new RegExp("[^А-яA-Za-zЁё]([А-яA-Za-zЁё](\\\s|"+nbspChar+")){3,}[А-яA-Za-zЁё][^А-яA-Za-zЁё]","g");
 var re620sv = new RegExp("([^А-яA-Za-zЁё][А-яA-Za-zЁё])"+nbspChar+"(?=([А-яA-Za-zЁё](\\\s|"+nbspChar+"|"+FalseSim+")){2}[А-яA-Za-zЁё][^А-яA-Za-zЁё])","g");
 var re620_ = "$1"+FalseSim;
	 var re621sv = new RegExp("([^А-яA-Za-zЁё][А-яA-Za-zЁё](\\\s|"+nbspChar+"|"+FalseSim+")[А-яA-Za-zЁё])"+nbspChar+"(?=[А-яA-Za-zЁё](\\\s|"+nbspChar+"|"+FalseSim+")[А-яA-Za-zЁё][^А-яA-Za-zЁё])","g");
	 var re621_ = "$1"+FalseSim;
 var re622sv = new RegExp("([^А-яA-Za-zЁё][А-яA-Za-zЁё]((\\\s|"+nbspChar+"|"+FalseSim+")[А-яA-Za-zЁё]){2})"+nbspChar+"(?=[А-яA-Za-zЁё][^А-яA-Za-zЁё])","g");
 var re622_ = "$1"+FalseSim;


//  Сохранение н/р пробела  в  двухбуквенном инициале
//  Пример: Серов_Вл.
 var re623s = new RegExp(nbspChar+"[А-ЯA-ZЁ]","g");
 var re623sv = new RegExp("([А-ЯA-ZЁ][а-яa-zё]{1,})"+nbspChar+"([А-ЯA-ZЁ][а-яa-zё]\\\.)","g");
 var re623_ = "$1"+FalseSim+"$2";

//  Сохранение н/р пробела  в  приставках к имени
//  Пример:  да_Винчи,  де_Бальзак, де ля_Фер,  фон_Штирлиц
 var re624sv = new RegExp("(^|[^А-яA-Za-zЁё])([Дд][ае]|[Лл][ея]|[Фф]он|[Dd][ae]|[Ll][ea]|[Ff]on)"+nbspChar+"([А-ЯA-ZЁ])","g");
 var re624_ = "$1$2"+FalseSim+"$3";


       // н/р пробел в аббревиатуре

//  ЦК ВКП(б),  ЦК ВЛКСМ,  ЦК КПСС
 var re630s = new RegExp("ЦК","g");
 var re630sv = new RegExp("(ЦК)"+nbspChar+"(КПСС|ВЛКСМ|ВКП)","g");
 var re630sv_ = "$1"+FalseSim+"$2";
 var re630 = new RegExp("(ЦК)\\\s(КПСС|ВЛКСМ)|(ЦК)\\\s(ВКП)(\\\s|"+nbspChar+"){0,1}(\\\(б\\\))","g");
 var re630_ = "$1$3"+FalseSim+"$2$4$6";
 var count_630 = 0;

//  АО,  ООО,  ОАО,  НПО,  ИА,  РИА,  ВИА,  ДК
 var re631s = new RegExp("АО|ДК|ИА|ООО|НПО","g");
 var re631sv = new RegExp("(АО|ДК|ИА|ООО|НПО)"+nbspChar+"([«„\\\"])","g");
 var re631 = new RegExp("(АО|ДК|ИА|ООО|НПО)\\\s([«„\\\"])","g");
 var re631_ = "$1"+FalseSim+"$2";
// используется счетчик №630


       //

// Замена неразрывных пробелов на обычные
// Исключения:  |  о. Сахалин   |  ср. школа   |  Лукьяненко С. В.   |   100 Вт   |   XXI век   |   Людвиг XIV   |   операция Z   |
 var re690s = new RegExp("[^\\\.—]"+nbspChar+"[^—]","g");
 var re690 = new RegExp("([А-яABE-HJKN-UWYZa-zЁё]("+fIB+"){0,1}[\\\)\\\]“»”\\\"\\\?!,…:]{0,2})"+nbspChar+"(?=[\\\(\\\[«„“\\\"…]{0,2}("+sIB+"){0,1}([А-яABE-HJKN-UWYZa-zЁё][А-яA-Za-zЁё]|[а-яa-zё]))","g");
 var re690_ = "$1 ";
 var count_690 = 0;
	// без тегов
	 var re690_0 = new RegExp("([А-яABE-HJKN-UWYZa-zЁё][\\\)\\\]“»”\\\"\\\?!,…:]{0,2})"+nbspChar+"(?=[\\\(\\\[«„“\\\"…]{0,2}([А-яABE-HJKN-UWYZa-zЁё][А-яA-Za-zЁё]|[а-яa-zё]))","g");
	 var re690_0_ = "$1 ";


       //

// Снятие маскировки с неразрывного пробела
 var re691 = new RegExp(FalseSim,"g");
 var re691_ = nbspChar;
 var count_691 = 0;


// ---------------------------------------------------------------
/// СОКРАЩЕНИЯ, ПЕРЕЧИСЛЕНИЯ, ОБОЗНАЧЕНИЯ И Т.П.  :  операции  № 7хх
//       (неразрывные пробелы в тексте)
// ---------------------------------------------------------------


       //   Сокращения: н.э., с.ш., в.д., и т.д., и т.п.

// (и) "так далее" — т. д., "то есть" — т. е., "так как"— т. к., "так называемый"— т. н., "таким образом"— т. о., (и) "тому подобное" — т. п., (в) "том числе"— т. ч.
 var re730 = new RegExp("(^|"+nbspChar+"|[\\\(\\\[\\\s>])([Тт])\\\.\\\s{0,1}([декнопч])\\\.","g");
 var re730_ = "$1$2."+nbspChar+"$3.";
 var count_730 = 0;

// "новой эры" — н. э., "сего года" — с. г., "исполняющий обязанности" — и. о.
 var re731 = new RegExp("(^|"+nbspChar+"|[\\\(\\\[\\\s>])((н)\\\.\\\s{0,1}(э)\\\.|(с)\\\.\\\s{0,1}(г)\\\.|([Ии])\\\.\\\s{0,1}(о)\\\.)","g");
 var re731_ = "$1$3$5$7."+nbspChar+"$4$6$8.";
// используется счетчик №730

// Северной широты, восточной долготы
 var re732 = new RegExp("(^|"+nbspChar+"|[\\\(\\\[\\\s>])(([сю])\\\.\\\s{0,1}(ш)\\\.|([вз])\\\.\\\s{0,1}(д)\\\.)","g");
 var re732_ = "$1$3$5."+nbspChar+"$4$6.";
// используется счетчик №730


             //  * для 735-737 числа через н/р пробел добавляются в №755
// "год рождения" — г. р.
 var re735 = new RegExp("("+nbspChar+"|[0-9\\\(\\\[\\\s>])(г)\\\.\\\s{0,1}(р)\\\.","g");
 var re735_ = "$1$2."+nbspChar+"$3.";
 var count_735 = 0;

// "условные единицы" — у. е.
 var re736 = new RegExp("("+nbspChar+"|[0-9\\\(\\\[\\\s>])(у)\\\.\\\s{0,1}(е)\\\.","g");
 var re736_ = "$1$2."+nbspChar+"$3.";
// используется счетчик №735

// "лошадиные силы" — л. с.
 var re737 = new RegExp("("+nbspChar+"|[0-9\\\(\\\[\\\s>])(л)\\\.\\\s{0,1}(с)\\\.","g");
 var re737_ = "$1$2."+nbspChar+"$3.";
// используется счетчик №735


       //   Обозначения

//  знак №
 var re740s = new RegExp("N","g");
 var re740 = new RegExp("(^|"+nbspChar+"|[\\\(\\\[\\\s>])N(<SUP>[Оо0oO]</SUP>|[oо°])(\\\s|"+nbspChar+"){0,1}(\\\d)","g");
 var re740_ = "$1№"+nbspChar+"$4";
 var count_740 = 0;


 // Формула запуска для № 741, 742
 var re741s = new RegExp("\\\d(\\\s|"+nbspChar+"){0,1}[°oо<]","g");

// Градус Цельсия и др.
// Правильный минус учитывается, но не изменяется
 var re741 = new RegExp("(^|"+nbspChar+"|[\\\s\\\+−\\\.,–\\\(>])(\\\d{1,4})(\\\s|"+nbspChar+"){0,1}(<SUP>[Оо0oO]</SUP>|[oо°])(\\\s|"+nbspChar+"){0,1}([CСKКFR])(?=[<,\\\.;:\\\)\\\s]|"+nbspChar+"|$)","g");
 var re741_ = "$1$2"+nbspChar+"°$6";
 var count_741 = 0;
 var count_741_ = 0;
	// Градус Цельсия
	 var re741C = new RegExp("°С","g");
	 var re741C_ = "°C";
	// Градус Кельвина
	 var re741K = new RegExp("°К","g");
	 var re741K_ = "°K";


// Знак градуса по контексту
// * в сокращении "в.д." (и др.)  уже расставлены неразрывные пробелы в №732
 var re742 = new RegExp("(\\\d)(<SUP>[Оо0oO]</SUP>|[oо])((\\\d)|([^А-яA-Za-zЁё].{0,20})(°|Цельси|Фаренгейт|Кельвин|Реомюр|северной|южной|западной|восточной|[сю]\\\.("+nbspChar+")ш\\\.|[вз]\\\.("+nbspChar+")д\\\.))","g");
 var re742_ = "$1°$3";
 var count_742 = 0;


// Градусы с минутами  23°8′
 var re743a = new RegExp("([0-9])°(\\\s|"+nbspChar+"){0,1}([0-9]{1,2})[’′]","g");
 var re743a_ = "$1°$3′";
 var count_743 = 0;
 var count_743_ = 0;

 // Градусы с минутами и секундами  23°8′48″
 var re743b = new RegExp("([0-9]°[0-9]{1,2}′)(\\\s|"+nbspChar+"){0,1}([0-9]{1,2})[\\\"″]","g");
 var re743b_ = "$1$3″";


 // Формула запуска для № 744, 745
 var re744s = new RegExp("(№|§)","g");

 // Знак параграфа, номера
 var re744 = new RegExp("(№|§)(\\\s){0,1}(\\\d)","g");
 var re744_ = "$1"+nbspChar+"$3";
 var count_744 = 0;

// Пробелы в перечне номеров, параграфов
//      дополнение к №744
 var re745 = new RegExp("(№|§)("+nbspChar+")(([,\\\s\\\d\\\–]|"+nbspChar+"){0,50})(\\\d,)(\\\d)","g");
 var re745_ = "$1$2$3$5 $6";
 var count_745 = 0;


 // Формула запуска для № 746, 747
 var re746s = new RegExp("(^|"+nbspChar+"|[\\\[\\\(\\\s>])(с|сс|стр|p|pp|рис|ст)\\\.","gi");

// Страницы, статьи и т.п.
 var re746 = new RegExp("(^|"+nbspChar+"|[\\\[\\\(\\\s>])(с|сс|стр|p|pp|рис|ст)\\\.(\\\s){0,1}(\\\d)","gi");
 var re746_ = "$1$2."+nbspChar+"$4";
// используется счетчик №744

// Пробелы в перечне страниц, статей и т.п.
//      дополнение к №746
 var re747 = new RegExp("(^|"+nbspChar+"|[\\\[\\\(\\\s>])(с|сс|стр|p|pp|рис|ст)(\\\."+nbspChar+")(([,\\\s\\\d\\\–]|"+nbspChar+"){0,50})(\\\d,)(\\\d)","gi");
 var re747_ = "$1$2$3$4$6 $7";
// используется счетчик №745

// Процент без пробела
 var re748 = new RegExp("([\\\d])(\\\s|"+nbspChar+")%","g");
 var re748_ = "$1%";
 var count_748 = 0;


       // Число + сложное сокращение

// Число + Квадраты и кубы
//  Число через н/р пробел добавляется не в №755, а в №751 — для исключения адреса ("д. 10 кв. 20")
 var re750 = new RegExp("("+nbspChar+"|[0-9\\\[\\\(\\\s>])(кв\\\.|куб\\\.)\\\s{0,1}(м|мм|см|дм|км)(?=[<,\\\.;:\\\)\\\]\\\s]|"+nbspChar+"|$)","g");
 var re750_ = "$1$2"+nbspChar+"$3";
 var count_750 = 0;

// Продолжение №750 - добавление числа
 var re751s = new RegExp("\\\."+nbspChar+"[мсдк]","g");
 var re751 = new RegExp("([\\\d])\\\s{0,1}(("+sIB+"){0,1}(кв\\\.|куб\\\.)"+nbspChar+"(м|мм|см|дм|км))(?=[<,\\\.;:\\\)\\\]\\\s]|"+nbspChar+"|$)","g");
 var re751_ = "$1"+nbspChar+"$2";
	// без тегов
	 var re751_0 = new RegExp("([\\\d])\\\s{0,1}((кв\\\.|куб\\\.)"+nbspChar+"(м|мм|см|дм|км))(?=[<,\\\.;:\\\)\\\]\\\s]|"+nbspChar+"|$)","g");
	 var re751_0_ = "$1"+nbspChar+"$2";


       //

// Единицы измерения
 var re755 = new RegExp("(^|"+nbspChar+"|[–\\\+\\\.,\\\[\\\(\\\s>])([\\\d]{1,4})(\\\s{0,1})("+sIB+"){0,1}((ч|м|г|т|л|р|g)|(кг|мм|мл|см|дм|км|гг|вв|в\\\.|к\\\.|у\\\.|мг|мл|вт|Вт|га|шт|ст|гл|кн)|(тыс|млн|мес|час|мин|сек|чел|мкг|квт|кВт|руб|коп|стр|экз|янв|фев|мар|апр|май|июн|июл|авг|сен|окт|ноя|дек)|(ккал|град|млрд))(?=[<,\\\.;\\\)\\\]\\\s]|"+nbspChar+"|$)","g");
 var re755_ = "$1$2"+nbspChar+"$4$5";
 var count_755 = 0;
	// без тегов
	 var re755_0 = new RegExp("(^|"+nbspChar+"|[–\\\+\\\.,\\\[\\\(\\\s>])([\\\d]{1,4})(\\\s{0,1})((ч|м|г|т|л|р|g)|(кг|мм|мл|см|дм|км|гг|вв|в\\\.|к\\\.|у\\\.|мг|мл|вт|Вт|га|шт|ст|гл|кн)|(тыс|млн|мес|час|мин|сек|чел|мкг|квт|кВт|руб|коп|стр|экз|янв|фев|мар|апр|май|июн|июл|авг|сен|окт|ноя|дек)|(ккал|град|млрд))(?=[<,\\\.;\\\)\\\]\\\s]|"+nbspChar+"|$)","g");
	 var re755_0_ = "$1$2"+nbspChar+"$4";


       //   Начало строки

// Пронумерованный/литерный список:  |  1.  |  1)  |  а.  |  а)  |
 var re760s = new RegExp("(^|>)[«„\\\"]{0,1}(\\\d|[а-яa-zё][\\\.\\\)])","g");
 var re760 = new RegExp("^(("+sIB+"){0,1}[«„\\\"]{0,1}(\\\d{1,3}|[а-яa-zё])[\\\.\\\)]("+fIB+"){0,1})(\\\s{0,1}("+sIB+"){0,1}([А-яA-Za-zЁё—…\\\"«„])|\\\s("+sIB+"){0,1}([0-9]))","g");
 var re760_ = "$1"+nbspChar+"$6$7$8$9";
 var count_760 = 0;
	// без тегов
	 var re760_0 = new RegExp("^([«„\\\"]{0,1}(\\\d{1,3}|[а-яa-zё])[\\\.\\\)])(\\\s{0,1}([А-яA-Za-zЁё—…\\\"«„])|\\\s([0-9]))","g");
	 var re760_0_ = "$1"+nbspChar+"$4$5";

// Пронумерованный список: Ст. 15
//  Должен стоять после №746 (добавляет второй н/р пробел)
 var re761 = new RegExp("^(("+sIB+"){0,1}[«„\\\"]{0,1}(Ст)\\\.)(\\\s|"+nbspChar+"){0,1}(\\\d{1,4})\\\.("+fIB+"){0,1}\\\s","g");
 var re761_ = "$1"+nbspChar+"$5.$6"+nbspChar;
	// без тегов
	 var re761_0 = new RegExp("^([«„\\\"]{0,1}(Ст)\\\.)(\\\s|"+nbspChar+"){0,1}(\\\d{1,4})\\\.\\\s","g");
	 var re761_0_ = "$1"+nbspChar+"$4."+nbspChar;
// используется счетчик №760

// Пронумерованный список: 1980 —
 var re762 = new RegExp("^(("+sIB+"){0,1}[«„\\\"]{0,1}\\\d{1,4}("+fIB+"){0,1})(\\\s|"+nbspChar+"){0,1}[\\\-–—](\\\s|"+nbspChar+")(?=("+sIB+"){0,1}[А-яA-Za-zЁё…\\\"«„])","g");
 var re762_ = "$1"+nbspChar+"— ";
	// без тегов
	 var re762_0 = new RegExp("^([«„\\\"]{0,1}\\\d{1,4})(\\\s|"+nbspChar+"){0,1}[\\\-–—](\\\s|"+nbspChar+")(?=[А-яA-Za-zЁё…\\\"«„])","g");
	 var re762_0_ = "$1"+nbspChar+"— ";
// используется счетчик №760

// Маркерный список:    •  ;  *
 var re763s = new RegExp("(^|>)[•\\\*]","g");
 var re763 = new RegExp("^("+sIB+"){0,1}([•\\\*])\\\s{0,1}([<А-яA-Za-zЁё0-9«„“\\\"])","g");
 var re763_ = "$1$2"+nbspChar+"$3";
	// без тегов
	 var re763_0 = new RegExp("^([•\\\*])\\\s{0,1}([<А-яA-Za-zЁё0-9«„“\\\"])","g");
	 var re763_0_ = "$1"+nbspChar+"$2";
// используется счетчик №760


//  P. S.,   P. P. S.   и   P. S. S.
 var re765s = new RegExp("(^|>)P\\\.","g");
 var re765 = new RegExp("^("+sIB+"){0,1}(P\\\.)(\\\s|"+nbspChar+"){0,1}(S\\\.)("+fIB+"){0,1}((\\\s|"+nbspChar+"){0,1}(?=[<А-ЯA-ZЁ0-9«„“\\\"][^\\\.])|$)","g");
 var re765_ = "$1$2"+nbspChar+"$4$5 ";
	// без тегов
	 var re765_0 = new RegExp("^(P\\\.)(\\\s|"+nbspChar+"){0,1}(S\\\.)((\\\s|"+nbspChar+"){0,1}(?=[<А-ЯA-ZЁ0-9«„“\\\"][^\\\.])|$)","g");
	 var re765_0_ = "$1"+nbspChar+"$3 ";
 var re766 = new RegExp("^("+sIB+"){0,1}(P\\\.)(\\\s|"+nbspChar+"){0,1}([PS]\\\.)(\\\s|"+nbspChar+"){0,1}(S\\\.)("+fIB+"){0,1}((\\\s|"+nbspChar+"){0,1}(?=[<А-ЯA-ZЁ0-9«„“\\\"][^\\\.])|$)","g");
 var re766_ = "$1$2"+nbspChar+"$4"+nbspChar+"$6$7 ";
	// без тегов
	 var re766_0 = new RegExp("^(P\\\.)(\\\s|"+nbspChar+"){0,1}([PS]\\\.)(\\\s|"+nbspChar+"){0,1}(S\\\.)((\\\s|"+nbspChar+"){0,1}(?=[<А-ЯA-ZЁ0-9«„“\\\"][^\\\.])|$)","g");
	 var re766_0_ = "$1"+nbspChar+"$3"+nbspChar+"$5 ";
 var count_765 = 0;
// + повтор №122 для небольшой поправки


       //   Число + слово

// XXI век и XX съезд
 var re770 = new RegExp("([IVX])\\\s{0,1}(в\\\.|вв\\\.|век|съезд)","g");
 var re770_ = "$1"+nbspChar+"$2";
 var count_770 = 0;

// 5 лет
 var re771 = new RegExp("(\\\d)\\\s{0,1}(раз|секунд|минут|час|день|дня|дней|недел|месяц|лет|век|год)(?=[а-я]{0,3}([<,\\\.;…:\\\?!“»”\\\"\\\)\\\]\\\s]|"+nbspChar+"|$))","g");
 var re771_ = "$1"+nbspChar+"$2";
 var count_771 = 0;

// 16 кило
 var re772 = new RegExp("(\\\d)\\\s{0,1}(микро|мили|санти|кило|мега|гига|метр|грамм|градус|гектар|Ватт|Герц|карат|литр|миля|миль|тонн|Вольт|дюйм|фут|верст|фунт|пуд)","g");
 var re772_ = "$1"+nbspChar+"$2";
// используется счетчик №771


       //

// Удаление лишних конечных точек в заголовках
// Исключения:     |  !..  |  т. к.  |  Булгаков М.А.  |  популярные сокращения  |
 var re790 = new RegExp("\\\.("+fIB+"){0,1}$","g");
 var re790ex = new RegExp("(([\\\?!\\\.])|((\\\s|"+nbspChar+"|[\\\.\\\-–])([A-ZА-ЯЁ]|Вл|Дж|вв|вел|гг|гл|др|инк|кн|мес|мин|мл|млн|млрд|обл|окр|пр|руб|сек|соч|ст|стр|тыс|чел|шт|экз|янв|фев|мар|апр|июн|июл|авг|сен|окт|дек|янв|etc|Inc)))\\\.("+fIB+"){0,1}$","gi");
 var re790_ = "$1";
 var count_790 = 0;
	// без тегов
	 var re790_0 = new RegExp("\\\.$","g");
	 var re790ex_0 = new RegExp("(([\\\?!\\\.])|((\\\s|"+nbspChar+"|[\\\.\\\-–])([A-ZА-ЯЁ]|Вл|Дж|вв|вел|гг|гл|др|инк|кн|мес|мин|мл|млн|млрд|обл|окр|пр|руб|сек|соч|ст|стр|тыс|чел|шт|экз|янв|фев|мар|апр|июн|июл|авг|сен|окт|дек|янв|etc|Inc)))\\\.$","gi");
	 var re790_0_ = "";


// ---------------------------------------------------------------
/// СТАНДАРТИЗАЦИЯ ТЕГОВ курсива и жирности  (окончание)  :  операции  № 8хх
// ---------------------------------------------------------------


// Выделение забытых знаков препинания в выделенном абзаце
 var re801ex = new RegExp("^("+sIB+")([^<]{0,})("+fIB+")$","g");
 var re801 = new RegExp("^([^А-яA-Za-zЁё0-9]{0,5})("+sIB+")([^<]{0,})("+fIB+")([^А-яA-Za-zЁё0-9]{0,5})$","g");
 var re801_ = "$2$1$3$5$4";
 var count_801 = 0;

// Выделение забытых знаков препинания в выделенном начале абзаца
 var re802 = new RegExp("^([«\\\"]){0,1}(—"+nbspChar+"){0,1}([\\\(\\\[«\\\"]){0,1}(…){0,1}("+sIB+")([^<]{0,})("+fIB+")([\\\.,…;:!\\\?]{1,3})","g");
 var re802_ = "$1$2$3$5$4$6$8$7";
 var count_802 = 0;

// Выделение забытых знаков препинания в предложении (или в выделенном начале предложения)
 var re803 = new RegExp("([…\\\.,:;\\\?!]"+nbspChar+"—\\\s|[…\\\.\\\?!]\\\s)([\\\(\\\[«\\\"]){0,1}(…){0,1}("+sIB+")([А-ЯA-ZЁ0-9][^<]{0,})("+fIB+")([\\\.,…;:!\\\?]{1,3})","g");
 var re803_ = "$1$2$4$3$5$7$6";
 var count_803 = 0;

// -------------

//  Восстановление длинного тире между названиями
//      "Москва—Кассиопея";
 var reNm2 = new RegExp(FalseTire,"g");
 var reNm2_ = "—";


// ---------------------------------------------------------------
/// ПОСТОБРАБОТКА (поиск)  :  операции  № 9хх
// ---------------------------------------------------------------


// Исправление ошибочного добавления градуса Цельсия (°C)
 var re901s = new RegExp("[\\\d]("+nbspChar+")°[CС][А-яA-Za-zЁё]","g");  //  стартовая
 var m901 = [];                 //  найденные строки с ошибками
 var m901_N = [];            //  номера этих строк
 var count_m901 = 0;      //  счетчик элементов массива

// Заглавная буква посреди слова ››› ударение
 var re911s = new RegExp("[а-яё][АЕИОУЫЭЮЯ]","g");  //  стартовая
 var re911s2 = new RegExp("(^|[^А-яA-Za-zЁё0-9])[А-Я]{0,1}[а-яё]{1,30}[АЕИОУЫЭЮЯ][а-яё]{0,30}([^А-яA-Za-zЁё0-9]|$)","g");  //  стартовая 2
 var m911 = [];                 //  найденные строки с ошибками
 var m911_N = [];            //  номера этих строк
 var count_m911 = 0;      //  счетчик элементов массива


// ---------------------------------------------------------------
/// ВОССТАНОВЛЕНИЕ АДРЕСОВ И ФОРМАТА КОД
// ---------------------------------------------------------------

//   *  Восстановление идет строго в обратном порядке: сначала "адреса", потом "код"

var s1 = ""; // Первая часть абзаца
var s2 = ""; // Вторая часть абзаца

// Восстановление всех фрагментов эл.адресов из массива
 var reUV3 = new RegExp(UrlFalse3+"(.{0,})$","g"); // Первая часть абзаца
 var reUV3_ = "";
	 var reUV4 = new RegExp("^(.{0,}?)"+UrlFalse3,"g"); // Вторая часть абзаца
	 var reUV4_ = "";

// Восстановление всех фрагментов эл.адресов из массива
 var reUV1 = new RegExp("href=\\\""+UrlFalse1+"(.{0,})$","g"); // Первая часть абзаца
 var reUV1_ = "";
	 var reUV2 = new RegExp("^(.{0,}?)"+UrlFalse1,"g"); // Вторая часть абзаца
	 var reUV2_ = "";


// Восстановление всех фрагментов кода из массива
 var reCVs = new RegExp(FalseCode,"g");
 var reCV1 = new RegExp(FalseCode+"(.{0,})$","g");
 var reCV1_ = "";
 var reCV2 = new RegExp("^(.{0,}?)"+FalseCode,"g");
 var reCV2_ = "";

// ------------------------

// Возвращение кода   "&nbsp;"
 var reNBSPon = new RegExp(nbspChar,"g");
 var reNBSPon_ = nbspEntity;

// ------------------------


//  Счетчик измененных абзацев
 var count_GU = 0;  // счетчик
 var m_GU = [];  // массив с индикаторами изменения каждой строки

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОБРАБОТКА ТЕКСТА
                 //      (сборка функции "HandleP")


 var s_="";  //   Копия абзаца (для проверки изменений в строке, для операций)
 var s0="";  //   Копия абзаца (для проверки изменений в строке, для "Cycle")
 var sct="";  // Копия абзаца без тегов (для поиска)

//  для общего цикла
 var count_Cycle=1;  //  счетчик рекордного числа циклов
 var count_Cycle_=0;  //  счетчик циклов для текущей строки
 var count_Cycle_max=100;   //  ограничитель числа циклов

 var count_P= 0;  //  счетчик строк



 //////// функция, обрабатывающая абзац P
 function HandleP(ptr) {

   s=ptr.innerHTML;

   if (nbspEntity=="&nbsp;"  &&  s.search(reNBSPoff)!=-1)  s=s.replace(reNBSPoff, reNBSPoff_);  //  замена кода н/р пробела на обычный символ (времено)

   count_P++;


/// СКРЫТИЕ АДРЕСОВ И ФОРМАТА КОД

//  Удаление   кода   из абзаца и его сохранение в массиве
   if (!R_Code  &&  s.search(/</g)!=-1  &&  s.search(reCode1)!=-1) {
           mCode=s.match(reCode1);  //  Сохранение
           count_Code+=mCode.length;
           Code_=true;
           s=s.replace(reCode1, reCode1_) }  //  Удаление

   if (s.search(re011)!=-1)  { count_011+=s.match(re011).length; s=s.replace(re011, re011_) }

//  Удаление   эл.адреса   из абзаца и его сохранение в массиве
   if (s.search(reUrl1_s)!=-1  &&  s.search(reUrl1)!=-1) {
           mUrl1=s.match(reUrl1);  //  Сохранение
           count_Url1+=mUrl1.length;
           Url1_=true;
           s=s.replace(reUrl1, reUrl1_) }  //  Удаление

   if (s.search(reUrl3)!=-1) {
           while (s.search(re021)!=-1) { count_021+=s.match(re021).length; s=s.replace(re021, re021_) }  //  удаление пробела перед "%"
           if (s.search(reUrl3)!=-1) {
                   mUrl3=s.match(reUrl3)  //  Сохранение
                   count_Url3+=mUrl3.length;
                   Url3_=true;
                   s=s.replace(reUrl3, reUrl3_);  //  Удаление
                   }
           }

s0="";
count_Cycle_=0;
while (s0 !=s  &&  count_Cycle_ <count_Cycle_max)  {      //   Повторение блока операций, пока после обработки в параграфе не будет никаких изменений
   s0=s;
   count_Cycle_++;


/// ПОИСК

   if (s.search(/</g)!=-1)  {
           sct=s.replace(reCT, reCT_);  //  Создание копии абзаца без тегов  //  Актуальна до первого изменения оригинального абзаца
           Em_=(s.search(reEm)!=-1);      // курсив
           St_=(s.search(reSt)!=-1);      // жирность
           EmSt_=(Em_ || St_);         // курсив и жирность
           NoCom_=(s.search(reNoCom)!=-1)         // все сноски
           }
           else  { Em_=St_=EmSt_=NoCom_=false;  sct=s }

   poem_=(ptr.parentNode.className=="stanza");         //   стихи
   QQ_= (sct.search(reQQ)!=-1);         //   «   »
   QuQu_= (sct.search(reQuQu)!=-1);         // поиск всех кавычек
   TiDe_= (sct.search(reTiDe)!=-1);         // поиск всех тире и дефисов  //  поиск отдельных символов производится после замены ряда дефисов/тире (№152)
   TTT_= (sct.search(reTTT)!=-1);         //   …
   P41_= (sct.search(reP41)!=-1);         //   неразрывные пробелы
   P43_= (sct.search(reP43)!=-1);         //   !  ?
   P48_= (sct.search(reP48)!=-1);         //   :;
   NN_= (sct.search(reNN)!=-1)         // числа
   XXI_=(sct.search(reXXI)!=-1)       // римские числа
   Sokr_= (sct.search(reSokr)!=-1);         //   сокращение + пробел


/// ВАЛИДАЦИЯ ЗНАКОВ ПРЕПИНАНИЯ И Т.П.  :  операции  № 1хх

   if (s.search(re101)!=-1)  { count_101+=s.match(re101).length; s=s.replace(re101, re101_) }
   if (s.search(re102)!=-1)  {
           count_102+=s.match(re102).length;
           s=s.replace(re102, re102_);
           if (poem_  &&  s.search(re102a)!=-1)  { s=s.replace(re102a, re102a_); P41_=true }    }
   if (s.search(re103)!=-1)  { count_103+=s.match(re103).length; s=s.replace(re103, re103_); P41_=true }
   if (s.search(re104)!=-1)  { count_104+=s.match(re104).length; s=s.replace(re104, re104_); TiDe_=true }
   if (s.search(re105)!=-1)  { count_105+=s.match(re105).length; s=s.replace(re105, re105_); TiDe_=true }
   if (s.search(re106)!=-1)  { count_106+=s.match(re106).length; s=s.replace(re106, re106_) }
   if (s.search(re107)!=-1)  { count_107+=s.match(re107).length; s=s.replace(re107, re107_) }
   if (s.search(re108)!=-1)  { count_108+=s.match(re108).length; s=s.replace(re108, re108_); QuQu_=true }
   if (s.search(re110)!=-1)  {
           count_110+=s.match(re110).length;
           s=s.replace(re110, re110_);
           if (s.search(/&nbsp;/)!=-1) {
                   P41_=true;
                   if (nbspEntity=="&nbsp;")
                           s=s.replace(reNBSPoff, reNBSPoff_); }    }
   if (nbspEntity!="&nbsp;"  &&  s.search(re111)!=-1)  { count_111+=s.match(re111).length; s=s.replace(re111, re111_); P41_=true }
   if (s.search(re114s)!=-1  &&  s.search(re114)!=-1)  { count_114+=s.match(re114).length; s=s.replace(re114, re114_) }
   if (EmSt_  &&  s.search(re119)!=-1)  { count_119+=s.match(re119).length; s=s.replace(re119, re119_) }
   if (!poem_) {
           if (s.search(re120)!=-1)  { count_120+=s.match(re120).length; s=s.replace(re120, re120_) }
           if (s.search(re121)!=-1)  { count_121++; s=s.replace(re121, re121_) }    }
   if (s.search(re122)!=-1)  { count_122++; s=s.replace(re122, re122_) }

   if (s.search(re129ex1)==-1  &&  s.search(re129ex2)==-1    ||    s.search(re129ex_ex)!=-1)
{   // Начало ряда формул, которые будут пропущены для тех строк, которые целиком состоят из некоторых символов


   if (s.search(re130)!=-1)  { count_130+=s.match(re130).length; s=s.replace(re130, re130_); TTT_=true }
   if (TTT_  &&  s.search(re131)!=-1)  { count_131+=s.match(re131).length; s=s.replace(re131, re131_) }
   if (P43_)  {
           if (s.search(re132)!=-1)  { count_132+=s.match(re132).length; s=s.replace(re132, re132_) }
           if (s.search(re133)!=-1)  { count_133+=s.match(re133).length; s=s.replace(re133, re133_) }    }
   if (s.search(re140)!=-1)  { count_140+=s.match(re140).length; s=s.replace(re140, re140_); TTT_=true }
   if (s.search(re141)!=-1)  { count_140+=s.match(re141).length; s=s.replace(re141, re141_); TTT_=true }
   if (s.search(re150)!=-1)  { count_150+=s.match(re150).length; s=s.replace(re150, re150_) }
   if (TiDe_  &&  s.search(re152)!=-1)  { count_152+=s.match(re152).length; s=s.replace(re152, re152_) }


//  повторный поиск в измененном оригинальном абзаце
   Def_= (s.search(reDef)!=-1);      //   -
   Tire_= (s.search(reTire)!=-1);      //   —
   KTi_= (s.search(reKTi)!=-1);      //   –
//---------------

   if (Zp_on_off ==1  &&  sct.search(re155s)!=-1)  {
           if_156=if_155=false;
           if (!EmAll  &&  s.search(re155)!=-1)  {
                   m155=s.match(re155);
                   s=s.replace(re155, FalseSim);
                   for (n=0; n<m155.length; n++)  {
                           if (m155[n].search(re155_2ex) ==-1)  {
                                   m155[n]= m155[n].replace(re155_2, re155_2_);
                                   m155[n]= m155[n].replace(re155_3, "");
                                   Em_=EmSt_=if_155=true;
                                   count_155++;    }
                           s= s.replace(re155_4, "")+m155[n]+s.replace(re155_5, "");    }
                   }
           if (!StAll  &&  s.search(re156)!=-1)  {
                   m156=s.match(re156);
                   s=s.replace(re156, FalseSim);
                   for (n=0; n<m156.length; n++)  {
                           if (m156[n].search(re156_2ex) ==-1  &&  m156[n].match(/_/g).length >1)  {
                                   m156[n]= m156[n].replace(re156_2, re156_2_);
                                   m156[n]= m156[n].replace(re156_3, "");
                                   St_=EmSt_=if_156=true;
                                   count_156++;    }
                           s= s.replace(re156_4, "")+m156[n]+s.replace(re156_5, "");    }
                   }
           if (!EmAll  &&  s.search(re157)!=-1)  {
                   m157=s.match(re157);
                   s=s.replace(re157, FalseSim);
                   for (n=0; n<m157.length; n++)  {
                           if (m157[n].search(re157_2ex) ==-1)  {
                                   m157[n]= m157[n].replace(re157_2, re157_2_);
                                   m157[n]= m157[n].replace(re157_3, re157_3_);
                                   m157[n]= m157[n].replace(/_/g, " ");
                                   Em_=EmSt_=if_155=true;
                                   count_157++;    }
                           s= s.replace(re157_4, "")+m157[n]+s.replace(re157_5, "");    }
                   }
           if ((!EmAll  ||  !StAll)  &&  s.search(re158)!=-1)  {
                   m158=s.match(re158);
                   s=s.replace(re158, FalseSim);
                   for (n=0; n<m158.length; n++)  {
                           if (!StAll  &&  if_156)  { m158[n]= m158[n].replace(re158_2, re158_2_);  count_156++ }
                               else if (!EmAll  &&  if_155)  { m158[n]= m158[n].replace(re158_2, re158_2__);  count_155++ }
                                   else if (!StAll  &&  count_156!=0)  { m158[n]= m158[n].replace(re158_2, re158_2_);  St_=true;  count_156++ }
                                       else if (!EmAll  &&  (count_155!=0  ||  count_157!=0))  { m158[n]= m158[n].replace(re158_2, re158_2__);  Em_=true;  count_155++ }
                                           else if (!StAll)  { m158[n]= m158[n].replace(re158_2, re158_2_);  St_=true;  count_156++ }
                                               else if (!EmAll)  { m158[n]= m158[n].replace(re158_2, re158_2__);  Em_=true;  count_155++ }
                           m158[n]= m158[n].replace(re158_3, "");
                           s= s.replace(re158_4, "")+m158[n]+s.replace(re158_5, "");    }
                   EmSt_=true;
                   }
           }  //  конец для № 155-158

   if (Ud_on_off!=0  &&  s.search(re160s)!=-1)  {
           if (s.search(re161)!=-1)  { count_160+=s.match(re161).length; s=s.replace(re161, re161_) }
           if (s.search(re162)!=-1)  { count_160+=s.match(re162).length; s=s.replace(re162, re162_) }
           if (s.search(re163)!=-1)  { count_160+=s.match(re163).length; s=s.replace(re163, re163_) }
           if (s.search(re164)!=-1)  { count_160+=s.match(re164).length; s=s.replace(re164, re164_) }
           if (s.search(re165)!=-1)  { count_160+=s.match(re165).length; s=s.replace(re165, re165_) }    }
   if (EmSt_)  { if (s.search(re172)!=-1)  { count_172++; s=s.replace(re172, re172_) }    }
        else  { if (s.search(re172_0)!=-1)  { count_172++; s=s.replace(re172_0, re172_0_) }    }
   if (EmSt_)  { if (s.search(re173)!=-1)  { count_172++; s=s.replace(re173, re173_) }    }
        else  { if (s.search(re173_0)!=-1)  { count_172++; s=s.replace(re173_0, re173_0_) }    }
   if (EmSt_)  { if (s.search(re174)!=-1)  { count_172++; s=s.replace(re174, re174_) }    }
        else  { if (s.search(re174_0)!=-1)  { count_172++; s=s.replace(re174_0, re174_0_) }    }
   if (s.search(re180)!=-1)  { count_180+=s.match(re180).length; s=s.replace(re180, re180_) }
   if (s.search(re181)!=-1)  { count_180+=s.match(re181).length; s=s.replace(re181, re181_) }
   if (s.search(re182)!=-1)  { count_182+=s.match(re182).length; s=s.replace(re182, re182_) }


/// СТАНДАРТИЗАЦИЯ ТЕГОВ курсива и жирности  :  операции  № 2хх

   if (EmSt_)  {
           if (Em_  &&  s.search(re201)!=-1)  { count_201+=s.match(re201).length; s=s.replace(re201, re201_) }
           if (St_  &&  s.search(re202)!=-1)  {
                   count_201+=s.match(re202).length; s=s.replace(re202, re202_);
                   if (Em_  &&  s.search(re201)!=-1)  { count_201+=s.match(re201).length; s=s.replace(re201, re201_) }     }  //  повтор №201
           if (s.search(re203)!=-1)  {
                   count_203+=s.match(re203).length; s=s.replace(re203, re203_);
                   if (s.search(re203)!=-1) s=s.replace(re203, re203_) }
           if (Em_  &&  St_)   {
                   if (s.search(re215s)!=-1)  {
                           if (s.search(re215)!=-1)  { s=s.replace(re215, re215_) }
                           if (s.search(re201)!=-1)  { count_215+=s.match(re201).length; s=s.replace(re201, re201_) }  //  повтор №201
                           if (s.search(re202)!=-1)  { count_215+=s.match(re202).length; s=s.replace(re202, re202_) }     }  //  повтор №202
                   if (s.search(re216s)!=-1)  {
                           if (s.search(re216)!=-1)  { s=s.replace(re216, re216_) }
                           if (s.search(re202)!=-1)  { count_215+=s.match(re202).length; s=s.replace(re202, re202_) }  //  повтор №202
                           if (s.search(re201)!=-1)  { count_215+=s.match(re201).length; s=s.replace(re201, re201_) }     }     }  //  повтор №201
           if (Ud_on_off != 0)  {
                   if (s.search(re220s)!=-1)  {
                           if (s.search(re220)!=-1)  { count_220+=s.match(re220).length; s=s.replace(re220, re220_) }
                           if (s.search(re221)!=-1)  { count_220+=s.match(re221).length; s=s.replace(re221, re221_) }     }
                   if (s.search(re222s)!=-1  &&  s.search(re222)!=-1)  {
                           s=s.replace(re222, re222_);
                           m223=s.match(re223);
                           count_220+=m223.length;
                           for (n=0; n<m223.length; n++)
                                   s=s.replace(re224, m223[n].toLowerCase()+Ud) }    }
           while (s.search(re241)!=-1)  {
                   count_241+=s.match(re241).length; s=s.replace(re241, re241_);
                   if (s.search(re203)!=-1)  {                 //  иногда после №241 остается один выделенный знак
                           count_203+=s.match(re203).length; s=s.replace(re203, re203_);
                           if (s.search(re203)!=-1) s=s.replace(re203, re203_) }    }
           if (sct.search(/\[/g)!=-1)   {
                   if (s.search(re250)!=-1)  { count_250+=s.match(re250).length; s=s.replace(re250, re250_) }
                   if (s.search(re251)!=-1)  { count_251+=s.match(re251).length; s=s.replace(re251, re251_) }    }
           if (sct.search(/\(/g)!=-1)   {
                   if (s.search(re252)!=-1)  { count_250+=s.match(re252).length; s=s.replace(re252, re252_) }
                   if (s.search(re253)!=-1)  { count_251+=s.match(re253).length; s=s.replace(re253, re253_) }    }
           if (QQ_)   {
                   if (s.search(re255)!=-1) { count_255+=s.match(re255).length; s=s.replace(re255, re255_) }
                   if (s.search(re256)!=-1) { count_255+=s.match(re256).length; s=s.replace(re256, re256_) }    }
           if (s.search(re260)!=-1)  { count_260+=s.match(re260).length; s=s.replace(re260, re260_) }
           if (NoCom_  &&  s.search(re270)!=-1)  { count_270+=s.match(re270).length; s=s.replace(re270, re270_) }
           }


/// РЕЖИМЫ  :  операции  № 3хх

   if (count_Cycle_ ==1)  {         //  только для первой обработки
           if (!R_Def  &&  Def_)  {
                   if (EmSt_)  {  if (s.search(re301)!=-1)  { count_301+=s.match(re301).length; s=s.replace(re301, re301_) }    }
                        else  {  if (s.search(re301_0)!=-1)  { count_301+=s.match(re301).length; s=s.replace(re301_0, re301_0_) }    }
                   if (EmSt_)  {  if (s.search(re302)!=-1)  { count_301+=s.match(re302).length; s=s.replace(re302, re302_) }    }
                        else  {  if (s.search(re302_0)!=-1)  { count_301+=s.match(re302).length; s=s.replace(re302_0, re302_0_) }    }    }
           if (!R_Tire  &&  Tire_)  {
                   if (EmSt_)  {  if (s.search(re310)!=-1)  { count_310+=s.match(re310).length; s=s.replace(re310, re310_) }    }
                        else  {  if (s.search(re310_0)!=-1)  { count_310+=s.match(re310).length; s=s.replace(re310_0, re310_0_) }    }
                   if (EmSt_)  {  if (s.search(re311)!=-1)  { count_310+=s.match(re311).length; s=s.replace(re311, re311_) }    }
                        else  {  if (s.search(re311_0)!=-1)  { count_310+=s.match(re311).length; s=s.replace(re311_0, re311_0_) }    }
                   if (EmSt_)  {  if (s.search(re312)!=-1)  { count_312+=s.match(re312).length; s=s.replace(re312, re312_) }    }
                        else  {  if (s.search(re312_0)!=-1)  { count_312+=s.match(re312).length; s=s.replace(re312_0, re312_0_) }    }    }
           if (R_KTi  &&  KTi_)  {
                   if (EmSt_)  { if (s.search(re320)!=-1)  { count_320+=s.match(re320).length; s=s.replace(re320, re320_) }    }
                        else  { if (s.search(re320_0)!=-1)  { count_320+=s.match(re320_0).length; s=s.replace(re320_0, re320_0_) }    }    }
               else  {
                       if (EmSt_)  { if (s.search(re321)!=-1)  { count_321+=s.match(re321).length; s=s.replace(re321, re321_) }    }
                            else  { if (s.search(re321_0)!=-1)  { count_321+=s.match(re321_0).length; s=s.replace(re321_0, re321_0_) }    }    }
           while (s.search(reNm1s) != -1  &&  s.search(reNm1) != -1)  {  countNm+=s.match(reNm1).length;  s=s.replace(reNm1, reNm1_); }
           }


//  повторный поиск в измененном оригинальном абзаце
   Def_= (s.search(reDef)!=-1);      //   -
   Tire_= (s.search(reTire)!=-1);      //   —
   KTi_= (s.search(reKTi)!=-1);      //   –
//---------------


/// ПУНКТУАЦИЯ (без тире)  :  операции  № 4хх

   if (QuQu_  &&  s.search(re401)!=-1)  { count_401++; s=s.replace(re401, re401_); QQ_=true }
   if (TTT_)  {
           if (EmSt_)  { if (s.search(re402)!=-1)  { count_402++; s=s.replace(re402, re402_) }    }
                 else  { if (s.search(re402_0)!=-1)  { count_402++; s=s.replace(re402_0, re402_0_) }    }    }
   if (QuQu_  &&  s.search(re410)!=-1)  { count_410++; s=s.replace(re410, re410_); QQ_=true }
   if (TTT_)  {
           if (EmSt_)  { if (s.search(re411)!=-1)  { count_411++; s=s.replace(re411, re411_) }    }
                 else  { if (s.search(re411_0)!=-1)  { count_411++; s=s.replace(re411_0, re411_0_) }    }    }
   if (EmSt_)  { if (s.search(re420)!=-1)  {
                   count_420+=s.match(re420).length; s=s.replace(re420, re420_);
                   if (s.search(re150)!=-1)  { count_150+=s.match(re150).length; s=s.replace(re150, re150_) }    }    }   // повтор №150
       else  { if (s.search(re420_0)!=-1)  {
                   count_420+=s.match(re420_0).length; s=s.replace(re420_0, re420_0_);
                   if (s.search(re150)!=-1)  { count_150+=s.match(re150).length; s=s.replace(re150, re150_) }    }    }   // повтор №150
   if (P48_)  {
           if (EmSt_)  { if (s.search(re421)!=-1)  { count_420+=s.match(re421).length; s=s.replace(re421, re421_) }    }
               else  { if (s.search(re421_0)!=-1)  { count_420+=s.match(re421_0).length; s=s.replace(re421_0, re421_0_) }    }
           if (EmSt_)  { if (s.search(re421a)!=-1)  { count_420+=s.match(re421a).length; s=s.replace(re421a, re421a_) }    }
               else  { if (s.search(re421a_0)!=-1)  { count_420+=s.match(re421a_0).length; s=s.replace(re421a_0, re421a_0_) }    }    }
   if (P43_)  {
           if (EmSt_)  { if (s.search(re422)!=-1)  { count_420+=s.match(re422).length; s=s.replace(re422, re422_) }    }
               else  { if (s.search(re422_0)!=-1)  { count_420+=s.match(re422_0).length; s=s.replace(re422_0, re422_0_) }    }    }
   if (s.search(re423)!=-1)  {
           count_420+=s.match(re423).length; s=s.replace(re423, re423_);
           if (s.search(re150)!=-1)  { count_150+=s.match(re150).length; s=s.replace(re150, re150_) }    }   // повтор №150
   if (NoCom_  &&  s.search(re424)!=-1)  { count_424+=s.match(re424).length; s=s.replace(re424, re424_) }
   if (TTT_)  {
           if (s.search(re425)!=-1)  { count_425+=s.match(re425).length; s=s.replace(re425, re425_) }
           if (EmSt_)  { if (s.search(re426)!=-1)  { count_425+=s.match(re426).length; s=s.replace(re426, re426_) }    }
                 else  { if (s.search(re426_0)!=-1)  { count_425+=s.match(re426_0).length; s=s.replace(re426_0, re426_0_) }    }    }
   if (QuQu_)  {
           if (EmSt_)  { if (s.search(re431)!=-1)  { count_431+=s.match(re431).length; s=s.replace(re431, re431_); QQ_=true }    }
                 else  { if (s.search(re431_0)!=-1)  { count_431+=s.match(re431_0).length; s=s.replace(re431_0, re431_0_); QQ_=true }    }
           if (EmSt_)  { if (s.search(re432)!=-1)  { count_432+=s.match(re432).length; s=s.replace(re432, re432_); QQ_=true }    }
                 else  { if (s.search(re432_0)!=-1)  { count_432+=s.match(re432_0).length; s=s.replace(re432_0, re432_0_); QQ_=true }    }
           if (EmSt_)  { if (s.search(re433)!=-1)  { count_432+=s.match(re433).length; s=s.replace(re433, re433_); QQ_=true }    }
                 else  { if (s.search(re433_0)!=-1)  { count_432+=s.match(re433_0).length; s=s.replace(re433_0, re433_0_); QQ_=true }    }    }
   if (s.search(re440)!=-1)  { count_440+=s.match(re440).length; s=s.replace(re440, re440_) }
   if (NoCom_  &&  s.search(re441)!=-1)  { count_441+=s.match(re441).length; s=s.replace(re441, re441_) }
   if (EmSt_)  { if (s.search(re450)!=-1)  { count_450+=s.match(re450).length; s=s.replace(re450, re450_) }    }
        else  { if (s.search(re450_0)!=-1)  { count_450+=s.match(re450_0).length; s=s.replace(re450_0, re450_0_) }    }
   if (NN_)  {
           if (EmSt_)  { if (s.search(re450a)!=-1)  { count_450+=s.match(re450a).length; s=s.replace(re450a, re450a_) }    }
                else  { if (s.search(re450a_0)!=-1)  { count_450+=s.match(re450a_0).length; s=s.replace(re450a_0, re450a_0_) }    }    }
   if (P43_)  {
           if (EmSt_)  { if (s.search(re451)!=-1)  { count_450+=s.match(re451).length; s=s.replace(re451, re451_) }    }
                else  { if (s.search(re451_0)!=-1)  { count_450+=s.match(re451_0).length; s=s.replace(re451_0, re451_0_) }    }    }
   if (P48_)  {
           if (EmSt_)  { if (s.search(re453)!=-1)  { count_450+=s.match(re453).length; s=s.replace(re453, re453_) }    }
                else  { if (s.search(re453_0)!=-1)  { count_450+=s.match(re453_0).length; s=s.replace(re453_0, re453_0_) }    }    }
   if (EmSt_)  { if (s.search(re454)!=-1)  { count_450+=s.match(re454).length; s=s.replace(re454, re454_) }    }
        else  { if (s.search(re454_0)!=-1)  { count_450+=s.match(re454_0).length; s=s.replace(re454_0, re454_0_) }    }
   if (NN_)  {
           if (EmSt_)  { if (s.search(re454a)!=-1)  { count_450+=s.match(re454a).length; s=s.replace(re454a, re454a_) }    }
                else  { if (s.search(re454a_0)!=-1)  { count_450+=s.match(re454a_0).length; s=s.replace(re454a_0, re454a_0_) }    }    }
   if (EmSt_)  { if (s.search(re455)!=-1)  { count_450+=s.match(re455).length; s=s.replace(re455, re455_) }    }
        else  { if (s.search(re455_0)!=-1)  { count_450+=s.match(re455_0).length; s=s.replace(re455_0, re455_0_) }    }
   if (QuQu_)  {
           if (EmSt_)  { if (s.search(re460)!=-1)  { count_460+=s.match(re460).length; s=s.replace(re460, re460_) }    }
                 else  { if (s.search(re460_0)!=-1)  { count_460+=s.match(re460_0).length; s=s.replace(re460_0, re460_0_) }    }    }
   if (NoCom_)  {
           if (QuQu_)  {
                   if (EmSt_)  { if (s.search(re470)!=-1)  { count_470+=s.match(re470).length; s=s.replace(re470, re470_) }    }
                         else  { if (s.search(re470_0)!=-1)  { count_470+=s.match(re470_0).length; s=s.replace(re470_0, re470_0_) }    }    }
           if (EmSt_)  { if (s.search(re471)!=-1)  { count_471+=s.match(re471).length; s=s.replace(re471, re471_) }    }
                 else  { if (s.search(re471_0)!=-1)  { count_471+=s.match(re471_0).length; s=s.replace(re471_0, re471_0_) }    }
           if (EmSt_)  { if (s.search(re472)!=-1)  { count_472+=s.match(re472).length; s=s.replace(re472, re472_) }    }
                 else  { if (s.search(re472_0)!=-1)  { count_472+=s.match(re472_0).length; s=s.replace(re472_0, re472_0_) }    }    }


/// ТИРЕ и ДЕФИСЫ  :  операции  № 5хх

   if (TiDe_) {
           if (XXI_) {
                   if (EmSt_)  {
                           if (s.search(re501)!=-1)  { count_501+=s.match(re501).length; s=s.replace(re501, re501_); KTi_=true }
                           if (s.search(re502)!=-1)  { count_501+=s.match(re502).length; s=s.replace(re502, re502_); KTi_=true }    }
                       else  {
                               if (s.search(re501_0)!=-1)  { count_501+=s.match(re501_0).length; s=s.replace(re501_0, re501_0_); KTi_=true }
                               if (s.search(re502_0)!=-1)  { count_501+=s.match(re502_0).length; s=s.replace(re502_0, re502_0_); KTi_=true }    }    }
           while (s.search(re503)!=-1)  { count_503+=s.match(re503).length; s=s.replace(re503, re503_); KTi_=true }
           if (s.search(re504s)!=-1) {
                   while (s.search(re504)!=-1)  { count_504+=s.match(re504).length; s=s.replace(re504, re504_); KTi_=true }
                   while (s.search(re505)!=-1)  { count_504+=s.match(re505).length; s=s.replace(re505, re505_); KTi_=true }    }    }
   if (NN_  &&  s.search(re506)!=-1)  { count_506+=s.match(re506).length; s=s.replace(re506, re506_) }
   if (TiDe_  &&  NN_)  {
           if (s.search(re507s)!=-1  &&  s.search(re507)!=-1) {
                   s_=s;
                   count_507_=s_.match(re507).length;  s_=s_.replace(re507, re507_);
                   if (s!=s_)  { s=s_;  count_507+=count_507_;  KTi_=true }    }
           if (s.search(re508)!=-1)  {
                   s_=s;
                   count_507_=s_.match(re508).length;  s_=s_.replace(re508, re508_);
                   if (s!=s_)  { s=s_;  count_507+=count_507_;  KTi_=true }    }
           if (!dubl)  {
                   if (EmSt_)  { if (s.search(re510)!=-1)  { count_510+=s.match(re510).length; s=s.replace(re510, re510_); KTi_=true }    }
                        else  { if (s.search(re510_0)!=-1)  { count_510+=s.match(re510_0).length; s=s.replace(re510_0, re510_0_); KTi_=true }    }    }
           if (EmSt_)  { if (s.search(re511)!=-1)  { count_511+=s.match(re511).length; s=s.replace(re511, re511_); Def_=true }    }
                else  { if (s.search(re511_0)!=-1)  { count_511+=s.match(re511_0).length; s=s.replace(re511_0, re511_0_); Def_=true }    }
           if (s.search(re512s)!=-1  &&  s.search(re512)!=-1)  { count_512+=s.match(re512).length; s=s.replace(re512, re512_) }
           if (EmSt_)  { if (s.search(re514)!=-1)  { count_514+=s.match(re514).length; s=s.replace(re514, re514_); KTi_=true }    }
                else  { if (s.search(re514_0)!=-1)  { count_514+=s.match(re514_0).length; s=s.replace(re514_0, re514_0_); KTi_=true }    }
           if (s.search(re515s)!=-1)  {
                   if (s.search(re515)!=-1)  { count_515+=s.match(re515).length; s=s.replace(re515, re515_); Def_=true }
                   while (s.search(re516)!=-1)  { count_515+=s.match(re516).length; s=s.replace(re516, re516_); Def_=true }    }    }
   if (Def_)  {
           if (EmSt_)  { if (s.search(re520)!=-1)  { count_520++; s=s.replace(re520, re520_) }    }
                else  { if (s.search(re520_0)!=-1)  { count_520++; s=s.replace(re520_0, re520_0_) }    }
           if (s.search(re521)!=-1)  { count_521+=s.match(re521).length; s=s.replace(re521, re521_) }
           if (EmSt_)  { if (s.search(re530)!=-1)  { count_530+=s.match(re530).length; s=s.replace(re530, re530_) }    }
                else  { if (s.search(re530_0)!=-1)  { count_530+=s.match(re530_0).length; s=s.replace(re530_0, re530_0_) }    }
           if (!NoCom_)  {
                   if (EmSt_)  { if (s.search(re531)!=-1)  { count_530+=s.match(re531).length; s=s.replace(re531, re531_) }    }
                        else  { if (s.search(re531_0)!=-1)  { count_530+=s.match(re531_0).length; s=s.replace(re531_0, re531_0_) }    }    }
               else  {
                       if (EmSt_)  { if (s.search(re531nc)!=-1)  { count_530+=s.match(re531nc).length; s=s.replace(re531nc, re531nc_) }    }
                            else  { if (s.search(re531nc_0)!=-1)  { count_530+=s.match(re531nc_0).length; s=s.replace(re531nc_0, re531nc_0_) }    }    }
           if (!NoCom_)  {
                   if (EmSt_)  { if (s.search(re532)!=-1)  { count_530+=s.match(re532).length; s=s.replace(re532, re532_) }    }
                        else  { if (s.search(re532_0)!=-1)  { count_530+=s.match(re532_0).length; s=s.replace(re532_0, re532_0_) }    }    }
               else  {
                       if (EmSt_)  { if (s.search(re532nc)!=-1)  { count_530+=s.match(re532nc).length; s=s.replace(re532nc, re532nc_) }    }
                            else  { if (s.search(re532nc_0)!=-1)  { count_530+=s.match(re532nc_0).length; s=s.replace(re532nc_0, re532nc_0_) }    }    }
           if (P48_)  {
                   if (EmSt_)  { if (s.search(re533)!=-1)  { count_530+=s.match(re533).length; s=s.replace(re533, re533_) }    }
                        else  { if (s.search(re533_0)!=-1)  { count_530+=s.match(re533_0).length; s=s.replace(re533_0, re533_0_) }    }    }
           if (TTT_)  {
                   if (EmSt_)  { if (s.search(re534)!=-1)  { count_534+=s.match(re534).length; s=s.replace(re534, re534_) }    }
                        else  { if (s.search(re534_0)!=-1)  { count_534+=s.match(re534_0).length; s=s.replace(re534_0, re534_0_) }    }    }
           }

//---------------
  Tire_=(s.search(reTire)!=-1);    //  повторный поиск тире
//---------------

   if (Tire_)  {
           if (EmSt_)  { if (s.search(re550)!=-1)  { count_550+=s.match(re550).length; s=s.replace(re550, re550_) }    }
                else  { if (s.search(re550_0)!=-1)  { count_550+=s.match(re550_0).length; s=s.replace(re550_0, re550_0_) }    }    }
   if (TiDe_ || s.search(/~/g)!=-1)  {
           if (EmSt_)  { if (s.search(re551)!=-1)  { count_551++; s=s.replace(re551, re551_); Tire_=true }    }
                else  { if (s.search(re551_0)!=-1)  { count_551++; s=s.replace(re551_0, re551_0_); Tire_=true }    }    }
   if (Tire_)  {
           if (EmSt_)  { if (s.search(re561)!=-1)  { count_561+=s.match(re561).length; s=s.replace(re561, re561_) }    }
                else  { if (s.search(re561_0)!=-1)  { count_561+=s.match(re561_0).length; s=s.replace(re561_0, re561_0_) }    }

           if (!NoCom_)  {
                   if (EmSt_)  { if (s.search(re562)!=-1)  { count_562+=s.match(re562).length; s=s.replace(re562, re562_) }    }
                        else  { if (s.search(re562_0)!=-1)  { count_562+=s.match(re562_0).length; s=s.replace(re562_0, re562_0_) }    }    }
               else  {
                       if (EmSt_)  { if (s.search(re562nc)!=-1)  { count_562+=s.match(re562nc).length; s=s.replace(re562nc, re562nc_) }    }
                            else  { if (s.search(re562nc_0)!=-1)  { count_562+=s.match(re562nc_0).length; s=s.replace(re562nc_0, re562nc_0_) }    }    }

           if (EmSt_)  { if (s.search(re570)!=-1)  { count_562++; s=s.replace(re570, re570_) }    }
                 else  { if (s.search(re570_0)!=-1)  { count_562++; s=s.replace(re570_0, re570_0_) }    }
           }

//---------------
  Def_=(s.search(reDef)!=-1);    //  повторный поиск дефисов
//---------------

   if (Def_) {
           if (s.search(/</g)!=-1) { if (s.search(re580)!=-1)  { count_580+=s.match(re580).length; s=s.replace(re580, re580_) }    }
                   else { if (s.search(re580_0)!=-1)  { count_580+=s.match(re580_0).length; s=s.replace(re580_0, re580_0_) }    }    }

// ------------------------


/// НЕРАЗРЫВНЫЕ ПРОБЕЛЫ С ЗАКРЕПЛЕНИЕМ  :  операции  № 6хх

   if (s.search(re601)!=-1)  { count_601+=s.match(re601).length; s=s.replace(re601, re601_) }
   if (Abz1!=0)  {
           if (P41_) {
                   if (EmSt_) { if (s.search(re610sv)!=-1) { s=s.replace(re610sv, re610_) }    }
                       else { if (s.search(re610sv_0)!=-1) { s=s.replace(re610sv_0, re610_0_) }    }    }
           if (EmSt_) { if (s.search(re610)!=-1) { count_610++; s=s.replace(re610, re610_) }    }
               else { if (s.search(re610_0)!=-1) { count_610++; s=s.replace(re610_0, re610_0_) }    }
          }
   if (Abz2!=0) {
           if (P41_  &&  s.search(re611s)!=-1) {
                   if (EmSt_) { if (s.search(re611sv)!=-1) { s=s.replace(re611sv, re611_) }    }
                       else { if (s.search(re611sv_0)!=-1) { s=s.replace(re611sv_0, re611_0_) }    }    }
           if (EmSt_) { if (s.search(re611)!=-1) { count_611+=s.match(re611).length; s=s.replace(re611, re611_) }    }
               else { if (s.search(re611_0)!=-1) { count_611+=s.match(re611_0).length; s=s.replace(re611_0, re611_0_) }    }
           }
   if (Abz3!=0) {
           if (P41_  &&  s.search(re615s)!=-1) {
                   if (EmSt_) { if (s.search(re615sv)!=-1) { s=s.replace(re615sv, re615_) }    }
                       else { if (s.search(re615sv_0)!=-1) { s=s.replace(re615sv_0, re615_0_) }    }    }
           if (EmSt_) { if (s.search(re615)!=-1) { count_615+=s.match(re615).length; s=s.replace(re615, re615_) }    }
               else { if (s.search(re615_0)!=-1) { count_615+=s.match(re615_0).length; s=s.replace(re615_0, re615_0_) }    }
           }
   if (Abz4!=0) {
           if (P41_  &&  s.search(re616s)!=-1) {
                   if (EmSt_) { if (s.search(re616sv)!=-1) { s=s.replace(re616sv, re616_) }    }
                       else { if (s.search(re616sv_0)!=-1) { s=s.replace(re616sv_0, re616_0_) }    }    }
           if (EmSt_) { if (s.search(re616)!=-1) { count_616+=s.match(re616).length; s=s.replace(re616, re616_) }    }
               else { if (s.search(re616_0)!=-1) { count_616+=s.match(re616_0).length; s=s.replace(re616_0, re616_0_) }    }
           }
   if (s.search(re620s)!=-1)  {
           while (s.search(re620sv)!=-1)  { s=s.replace(re620sv, re620_) }
           if (s.search(re621sv)!=-1)  { s=s.replace(re621sv, re621_) }
           if (s.search(re622sv)!=-1)  { s=s.replace(re622sv, re622_) }    }

   if (s.search(re623s)!=-1)  {
           if (s.search(re623sv)!=-1)  { s=s.replace(re623sv, re623_) }
           if (s.search(re624sv)!=-1)  { s=s.replace(re624sv, re624_) }    }

   if (s.search(re630s)!=-1)  {
           if (s.search(re630sv)!=-1)  { s=s.replace(re630sv, re630sv_) }
           if (s.search(re630)!=-1)  { count_630+=s.match(re630).length; s=s.replace(re630, re630_) }    }
   if (s.search(re631s)!=-1)  {
           if (s.search(re631sv)!=-1)  { s=s.replace(re631sv, re631_) }
           if (s.search(re631)!=-1)  { count_630+=s.match(re631).length; s=s.replace(re631, re631_) }    }

    if (P41_  &&  s.search(re690s)!=-1)  {
           if (EmSt_)  { if (s.search(re690)!=-1)  { count_690+=s.match(re690).length; s=s.replace(re690, re690_) }    }
               else  { if (s.search(re690_0)!=-1)  { count_690+=s.match(re690_0).length; s=s.replace(re690_0, re690_0_) }    }    }
   if (s.search(re691)!=-1)  { count_691+=s.match(re691).length; s=s.replace(re691, re691_) }


/// СОКРАЩЕНИЯ, ПЕРЕЧИСЛЕНИЯ, ОБОЗНАЧЕНИЯ И Т.П.  :  операции  № 7хх

   if (Sokr_)  {
           if (s.search(re730)!=-1)  { count_730+=s.match(re730).length; s=s.replace(re730, re730_) }
           if (s.search(re731)!=-1)  { count_730+=s.match(re731).length; s=s.replace(re731, re731_) }
           if (s.search(re732)!=-1)  { count_730+=s.match(re732).length; s=s.replace(re732, re732_) }
           if (s.search(re735)!=-1)  { count_735+=s.match(re735).length; s=s.replace(re735, re735_) }
           if (s.search(re736)!=-1)  { count_735+=s.match(re736).length; s=s.replace(re736, re736_) }
           if (s.search(re737)!=-1)  { count_735+=s.match(re737).length; s=s.replace(re737, re737_) }
           }
   if (NN_)  {
           if (s.search(re740s)!=-1  &&  s.search(re740)!=-1)  { count_740+=s.match(re740).length; s=s.replace(re740, re740_) }
           if (s.search(re741s)!=-1)  {
                   if (s.search(re741)!=-1) {
                           s_=s;
                           count_741_=s_.match(re741).length; s_=s_.replace(re741, re741_);
                           if (s_.search(re741C)!=-1)  { s_=s_.replace(re741C, re741C_) }
                           if (s_.search(re741K)!=-1)  { s_=s_.replace(re741K, re741K_) }
                           if (s!=s_)  { s=s_; count_741+=count_741_ }    }   //  сохранение абзаца и увеличение счетчика только в случае, если операции №741 изменили абзац
                   if (s.search(re742)!=-1)  { count_742+=s.match(re742).length; s=s.replace(re742, re742_) }    }
           if (s.search(/°/g)!=-1)  {
                   s_=s;
                   if (s_.search(re743a)!=-1)  { count_743_=s_.match(re743a).length; s_=s_.replace(re743a, re743a_) }
                   if (s!=s_)  { s=s_; count_743+=count_743_ }  //  сохранение абзаца и увеличение счетчика только в случае, если операция №743a изменили абзац
                   if (s_.search(re743b)!=-1)  { count_743_=s_.match(re743b).length; s_=s_.replace(re743b, re743b_) }
                   if (s!=s_)  { s=s_; count_743+=count_743_ }    }   //  сохранение абзаца и увеличение счетчика только в случае, если операция №743b изменили абзац
           if (s.search(re744s)!=-1)  {
                   if (s.search(re744)!=-1)  { count_744+=s.match(re744).length; s=s.replace(re744, re744_) }
                   while  (s.search(re745)!=-1)  { s=s.replace(re745, re745_); count_745++ }    }
           if (s.search(re746s)!=-1)  {
                   if (s.search(re746)!=-1)  { count_744+=s.match(re746).length; s=s.replace(re746, re746_) }
                   while  (s.search(re747)!=-1)  { s=s.replace(re747, re747_); count_745++ }    }
           if (s.search(re748)!=-1)  { count_748+=s.match(re748).length; s=s.replace(re748, re748_) }
           if (Sokr_  &&  s.search(re750)!=-1)  { count_750+=s.match(re750).length; s=s.replace(re750, re750_) }
           if (s.search(re751s)!=-1)  {
                   if (EmSt_)  { if (s.search(re751)!=-1)  { count_750+=s.match(re751).length; s=s.replace(re751, re751_) }    }
                       else  { if (s.search(re751_0)!=-1)  { count_750+=s.match(re751_0).length; s=s.replace(re751_0, re751_0_) }    }    }
           if (EmSt_)  { if (s.search(re755)!=-1)  { count_755+=s.match(re755).length; s=s.replace(re755, re755_) }    }
               else  { if (s.search(re755_0)!=-1)  { count_755+=s.match(re755_0).length; s=s.replace(re755_0, re755_0_) }    }
           }
   if (s.search(re760s)!=-1)  {
           if (EmSt_)  { if (s.search(re760)!=-1)  { count_760++; s=s.replace(re760, re760_) }    }
               else  { if (s.search(re760_0)!=-1)  { count_760++; s=s.replace(re760_0, re760_0_) }    }    }
   if (NN_)  {
           if (EmSt_)  { if (s.search(re761)!=-1)  { count_760++; s=s.replace(re761, re761_) }    }
               else  { if (s.search(re761_0)!=-1)  { count_760++; s=s.replace(re761_0, re761_0_) }    }
           if (EmSt_)  { if (s.search(re762)!=-1)  { count_760++; s=s.replace(re762, re762_) }    }
               else  { if (s.search(re762_0)!=-1)  { count_760++; s=s.replace(re762_0, re762_0_) }    }    }
   if (s.search(re763s)!=-1)  {
           if (EmSt_)  { if (s.search(re763)!=-1)  { count_760++; s=s.replace(re763, re763_) }    }
               else  { if (s.search(re763_0)!=-1)  { count_760++; s=s.replace(re763_0, re763_0_) }    }    }
   if (s.search(re765s)!=-1)  {
           s_=s;
           if (EmSt_)  {
                   if (s_.search(re765)!=-1)  s_=s_.replace(re765, re765_);
                   if (s_.search(re766)!=-1)  s_=s_.replace(re766, re766_);    }
               else  {
                       if (s_.search(re765_0)!=-1)  s_=s_.replace(re765_0, re765_0_);
                       if (s_.search(re766_0)!=-1)  s_=s_.replace(re766_0, re766_0_);    }
           if (s_.search(re122)!=-1)  s_=s_.replace(re122, re122_);
           if (s_!=s)  { count_765++; s=s_ }    }
   if (XXI_  &&  s.search(re770)!=-1)  { count_770+=s.match(re770).length; s=s.replace(re770, re770_) }
   if (NN_)  {
           if (s.search(re771)!=-1)  { count_771+=s.match(re771).length; s=s.replace(re771, re771_) }
           if (s.search(re772)!=-1)  { count_771+=s.match(re772).length; s=s.replace(re772, re772_) }    }

   if (ptr.parentNode.className=="title")  {
           if (EmSt_)  { if (s.search(re790)!=-1  &&  s.search(re790ex)==-1)  { count_790++; s=s.replace(re790, re790_) }    }
               else  { if (s.search(re790_0)!=-1  &&  s.search(re790ex_0)==-1)  { count_790++; s=s.replace(re790_0, re790_0_) }    }    }


/// СТАНДАРТИЗАЦИЯ ТЕГОВ курсива и жирности  (окончание)  :  операции  № 8хх

   if (EmSt_)  {
           if (s.search(re801ex)==-1)  { if (s.search(re801)!=-1) { count_801++; s=s.replace(re801, re801_) }    }
           if (s.search(re802)!=-1)  { count_802++; s=s.replace(re802, re802_) }
           if (s.search(re803)!=-1)  { count_803+=s.match(re803).length; s=s.replace(re803, re803_) }    }


   }   // Конец ряда формул, которые были пропущены для тех строк, которые целиком состоят из некоторых символов
   else count_129ex++;  // счетчик таких строк


   }   // Конец цикла (Cycle) повторных обработок для измененных строк
   if (count_Cycle<count_Cycle_) count_Cycle=count_Cycle_;


//  Восстановление длинного тире между названиями
   if (s.search(reNm2) != -1)  s=s.replace(reNm2, reNm2_);


/// ПОСТОБРАБОТКА (поиск)  :  операции  № 9хх

   if (s.search(re901s)!=-1)  {
           m901[count_m901]=ptr;
           m901_N[count_m901]=count_P;
           count_m901++;    }

   if (Ud_on_off != 0  &&  s.search(re911s) != -1  &&  s.search(re911s2) != -1)  {
           m911[count_m911]=ptr;
           m911_N[count_m911]=count_P;
           count_m911++;    }


/// ВОССТАНОВЛЕНИЕ АДРЕСОВ И ФОРМАТА КОД

// восстановление электронных адресов
   if (Url3_)  {
           for (n=0; s.search(reUV3)!=-1; n++) {
                   s1=s.replace(reUV3, reUV3_);
                   s2=s.replace(reUV4, reUV4_);
                   s= s1+mUrl3[n]+s2 }    }

// восстановление электронных адресов
   if (Url1_)
           for (n=0; s.search(reUV1)!=-1; n++) {
                   s1=s.replace(reUV1, reUV1_);
                   s2=s.replace(reUV2, reUV2_);
                   s= s1+mUrl1[n]+s2;    }

// восстановление кода
   if (Code_)
           for (n=0; s.search(reCV1)!=-1; n++) {
                   s1=s.replace(reCV1, reCV1_);
                   s2=s.replace(reCV2, reCV2_);
                   s= s1+mCode[n]+s2;    }

//---------------

   if (nbspEntity=="&nbsp;"  &&  s.search(reNBSPon)!=-1)  s=s.replace(reNBSPon, reNBSPon_);  //  возвращение кода н/р пробела

//---------------

   //  сохранение абзаца в оригинале только в том случае, если он действительно изменен
   if (ptr.innerHTML != s) {
           count_GU++;          // счетчик изменений
           m_GU[count_P]=true;   // индикация для строки
           ptr.innerHTML=s }

  }   //  конец создания функции "HandleP(ptr)"

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОБРАБОТКА ТЕКСТА
                 //      (применение функции "HandleP")


    window.external.BeginUndoUnit(document,"«Генеральная уборка» v."+NumerusVersion);                               // ОТКАТ (UNDO) начало

 ptr=fbwBody;
 var ptrLvl=[];
 j=0;

aaa:
 while (ptr) {
         if (ptr.nodeName!="P"  &&  ptr.firstChild!=null  &&  (ptr.className!="history" || ObrabotkaHistory)) {
                 ptrLvl[j]=ptr;
                 j++;
                 ptr=ptr.firstChild;
                 }
             else {
                     while (ptr.nextSibling==null)  {
                             j--;
                             ptr=ptrLvl[j];
                             if (j==0) break aaa;
                             }
                     ptr=ptr.nextSibling;
                     }
         if (ptr.nodeName=="P")
                 HandleP(ptr);
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ПОСТОБРАБОТКА  :  Полуавтоматические исправления


 var mElem=[];   var elem1="";   var elem2="";   //  для элементов <LABEL>
 var otvet;   var otvet_txt;   var msgTitle="";   var msg="";   var count_msg;   //  для диалога
 var otmena = false;    //  индикатор кнопки "Отмена"

 var Dict1 = [];   //  словарь заменяемых слов
 var Dict2 = [];   //  словарь правильных слов
 var count_Dict1=0;
 var Dict3 = [];   //  словарь пропущенных слов
 var count_Dict3=0;

         // Функция добавления стиля для выделения
 function LABELstyle(el) {
         var variant=1;               //  1 - красный; 0 - классика
         if (variant==1) {
                 el.style.color="#EEF47C";
                 el.style.backgroundColor="#821A1A";
                 el.style.fontSize="115%";
                 el.style.padding="0.1em";    }
             else {
                     el.style.color="#FFFFFF";
                     el.style.backgroundColor="#335EA8";    }
         }

         // Функция очистки стиля для выделения
 function LABELstyleOf(el) {
         el.style.removeAttribute("color");
         el.style.removeAttribute("backgroundColor");
         el.style.removeAttribute("fontSize");
         }

         // Функция обработки ответа
 function HandleOtvet() {
         if (otvet == 6)  {                                                   // "Да":  исправление ошибки и запоминание слов
                 if (otvet_txt.search(/^ *$/g)==-1  &&  otvet_txt != elem1)  { mElem[n].innerHTML = otvet_txt; Dict2[count_Dict1] = otvet_txt }
                     else  { mElem[n].innerHTML = elem2;  Dict2[count_Dict1] = elem2 }
                 Dict1[count_Dict1] = elem1;
                 count_Dict1++;
                 return 1;    }
         if (otvet == 7)  {                                                   // "Нет":  запоминание слова
                 Dict3[count_Dict3] = elem1;
                 count_Dict3++;
                 return 0;    }
         }

         // Исправление ошибочного добавления градуса Цельсия (°C)

 var re901 = new RegExp("(([\\\d]{1,10})("+nbspEntity+")°[CС]([А-яA-Za-zЁё]{1,30}))(?=[^>]{0,}(<|$))","g");  // основная
 var re901_LABEL = "<LABEL>$1</LABEL>";     //  обрамление тегами   фрагмента с ошибкой
 var re901_1 = "$2"+"0 С$4";  //   исправленный вариант с русской "С"
 var re901_2 = "$2"+"0 C$4";  //   исправленный вариант с латинской "C"
 var count_901 = 0;
 var re902 = new RegExp("^[\\\d]{1,10}("+nbspEntity+")°[CС][А-яA-Za-zЁё]{1,30}$","g");  //  доп. проверка
 var re903 = new RegExp("°[CС][А-яЁё]","g");              //  для выбора варианта исправления
 count_msg=0;
 otmena = false;

 for (j=0;  j<count_m901;  j++) {
         if (otmena)  break;         //  выход из цикла при нажатии кнопки "Отмена"
         ptr=m901[j];                    // получение строки с ошибкой
         s=ptr.innerHTML;
         ptr.innerHTML=s.replace(re901, re901_LABEL);  //  обрамление фрагмента с ошибкой тегами <LABEL>
         mElem=ptr.getElementsByTagName("LABEL");           //  получение всех узлов <LABEL> в строке
L901:
         for (n=0; n<mElem.length; n++) {
                 LABELstyle(mElem[n]);   // добавление стиля
                 elem1 = mElem[n].innerHTML;         //  содержимое узла <LABEL>
                 if (elem1.search(re902)==-1)  continue;     //  пропуск постороннего узла
                 for (k=0; k<count_Dict1; k++) {
                         if (elem1 == Dict1[k])  { count_901++;  mElem[n].innerHTML = Dict2[k]; continue L901 }  //  повторение замены пользователя
                         if (elem1 == Dict2[k])  continue L901;    }          //  пропуск правильных слов
                 for (k=0; k<count_Dict3; k++)
                         if (elem1 == Dict3[k])  continue L901;          //  повторение пропуска для ранее пропущенных слов
                 if (elem1.search(re903)!=-1)  elem2 = elem1.replace(re901, re901_1);    //  сохранение исправленной ошибки в переменной (с русской "С")
                     else  elem2 = elem1.replace(re901, re901_2);               //  сохранение исправленной ошибки в переменной (с латинской "С")
                 GoTo(mElem[n]);                                                       // переход на узел <LABEL>
                 count_msg++;
                 msgTitle = "№ 901  •  Исправление ошибочного добавления градуса Цельсия (°C)  —  "+count_msg;  // Заголовок окна
                 msg = "      ◊	Найдена ошибка:	" + elem1 + "\n	Заменить на:		" + elem2;  //  Текст в окне
                 T_pause -= new Date().getTime();                  // определение продолжительности паузы в вычислениях
                 otvet_txt = window.external.InputBox(msg, msgTitle, elem1);       //  диалоговое окно, запись введенного текста
                 T_pause += new Date().getTime();                  // определение продолжительности паузы в вычислениях
                 otvet = window.external.GetModalResult();            //   возвращение кнопки ответа
                 if (otvet == 2)  { otmena = true;  break }    // "Отмена":  выход из цикла
                 count_901 += HandleOtvet();
                 LABELstyleOf(mElem[n]);  // удаление стиля
                 }
         for (n=mElem.length-1; n>=0; n--)  mElem[n].removeNode(false);      //  удаление формата <LABEL> в строке
         if (s != ptr.innerHTML  &&  ! m_GU[m901_N[j]]) {    //  если строка изменена и до этого не изменялась
                 count_GU++;   //  увеличение счетчика изменений строк
                 m_GU[m901_N[j]]=true;    }   //  отметка строки, как измененная
         }


         // Заглавная посреди слова ››› ударе́ние

 var re911 = new RegExp("(^|[^А-яA-Za-zЁё0-9])([А-Я]{0,1}[а-яё]{1,30})([АЕИОУЫЭЮЯ])([а-яё]{0,30})(?=[^А-яA-Za-zЁё0-9>][^>]{0,}(<|$)|$)","g");  // основная
// var m911_=[];     //  массив для проверки строки на исключение
 var re911_LABEL = "$1<LABEL>$2$3$4</LABEL>";     //  обрамление тегами   фрагмента с ошибкой
 var re912 = new RegExp("^([А-Я]{0,1}[а-яё]{1,})([АЕИОУЫЭЮЯ])([а-яё]{0,})$","g");
 var re912_ = "$2";
 var txt912 = "";               //   Буква, для которой будет производиться понижение регистра
 var re913 = new RegExp("[АЕИОУЫЭЮЯ](?=[а-яё]{0,}$)","g");
 var count_911 = 0;
 count_msg=0;
 otmena = false;

 count_Dict1=0;
 count_Dict3=0;

 for (j=0;  j<count_m911;  j++) {
         if (otmena)  break;         //  выход из цикла при нажатии кнопки "Отмена"
         ptr=m911[j];                    // получение строки с ошибкой
         s=ptr.innerHTML;
//         m911_ = s.match(re911);
//         if ((m911_+"").search(/^.?ГенУборка(,.?ГенУборка){0,}$/g) != -1)  continue;  //  исключение из обработки строки со словом "ГенУборка"
         ptr.innerHTML=s.replace(re911, re911_LABEL);  //  обрамление фрагмента с ошибкой тегами <LABEL>
         mElem=ptr.getElementsByTagName("LABEL");           //  получение всех узлов <LABEL> в строке
L911:
         for (n=0; n<mElem.length; n++) {
                 LABELstyle(mElem[n]);   // добавление стиля
                 elem1 = mElem[n].innerHTML;         //  содержимое узла <LABEL>
                 if (elem1.search(re912)==-1  ||  elem1.search(/ГенУборк/)!=-1)  continue;     //  пропуск постороннего узла или исключения
                 for (k=0; k<count_Dict1; k++) {
                         if (elem1 == Dict1[k])  { count_911++;  mElem[n].innerHTML = Dict2[k]; continue L911 }  //  повторение замены пользователя
                         if (elem1 == Dict2[k])  continue L911;    }          //  пропуск правильных слов
                 for (k=0; k<count_Dict3; k++)
                         if (elem1 == Dict3[k])  continue L911;          //  повторение пропуска для ранее пропущенных слов
                 txt912=elem1.replace(re912, re912_);     //  Извлечение буквы
                 txt912=txt912.toLowerCase()+Ud;           //  Понижение регистра
                 elem2=elem1.replace(re913, txt912)    //  сохранение исправленной ошибки в переменной "elem2"
                 GoTo(mElem[n]);                                                       // переход на узел <LABEL>
                 count_msg++;
                 msgTitle = "№ 911  •  ЗаглАвная бУква посредИ слОва  ›››  ударе́ние  —  "+count_msg;  // Заголовок окна
                 msg = "      ◊	Найдена ошибка:	" + elem1 + "\n	Заменить на:		" + elem2;  //  Текст в окне
                 T_pause -= new Date().getTime();                  // определение продолжительности паузы в вычислениях
                 otvet_txt = window.external.InputBox(msg, msgTitle, elem1);       //  диалоговое окно, запись введенного текста
                 T_pause += new Date().getTime();                  // определение продолжительности паузы в вычислениях
                 otvet = window.external.GetModalResult();            //   возвращение кнопки ответа
                 if (otvet == 2)  { otmena = true;  break }    // "Отмена":  выход из цикла
                 count_911 += HandleOtvet();
                 LABELstyleOf(mElem[n]);  // удаление стиля
                 }
         for (n=mElem.length-1; n>=0; n--)  mElem[n].removeNode(false);      //  удаление формата <LABEL> в строке
         if (s != ptr.innerHTML  &&  ! m_GU[m911_N[j]]) {       //  если строка изменена и до этого не изменялась
                 count_GU++;                                                        //  увеличение счетчика изменений строк
                 m_GU[m911_N[j]]=true;    }      //  отметка строки, как измененная
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// Повышение версии файла и запись в истории изменений


//  Добавление раздела истории, если его нет
 if (History==null)  {                 //   Если нет истории...
         History = document.createElement("DIV");     //   Создание нового раздела
         var Annotation=fbwBody.firstChild;
         while (Annotation!=null  &&  Annotation.className!="annotation") Annotation=Annotation.nextSibling;   //  Поиск аннотации к книге
         if (Annotation!=null)  Annotation.insertAdjacentElement("afterEnd",History);      //  Размещаем новый раздел    или после аннотации (если она есть)...
                 else  fbwBody.insertAdjacentElement("afterBegin",History);                //  ...или в начале "fbwBody"
         History.className = "history";      //  Присваиваем новому разделу    класс "история" и необходимые атрибуты
         History.setAttribute("xmlns:l","http://www.w3.org/1999/xlink");
         History.setAttribute("xmlns:f","http://www.gribuser.ru/xml/fictionbook/2.0");
         History.insertAdjacentElement("beforeEnd",document.createElement("P"));     //  Добавляем пустую строку
         window.external.inflateBlock(History.lastChild)=true;
         }


if (Version_on_off==1  &&  (count_GU!=0  ||  Vsegda_on_off==1)) {

         //  Склонение для "строк"
 var IsprStr="";
 if (count_GU!=0) {
         pad(count_GU);
         var IsprStr_ = [ "исправлена "+count_GU+" строка", "исправлены "+count_GU+" строки", "исправлено "+count_GU+" строк" ];
         IsprStr=IsprStr_[ok]    }
     else IsprStr="исправлений нет";


         //  Функция определения даты по количеству милисекунд
 function fDate(D) {
         var fullDate = new Date(D);
         var Day = fullDate.getDate();
         var Month = ("0" + (1+fullDate.getMonth())).replace(/^.*?(\d{2})$/g, "$1");
         var Year = (fullDate.getFullYear()+"").replace(/^.*?(\d{1,2})$/g, "$1");
         return Day + "." + Month + "." + Year;
         }

         //  Проверка на повторение записи в "истории"
 var Td=new Date().getTime();
 var D=0;
 var Dmilisec=24*60*60*1000;
 var povtorD=false;

 mP = History.getElementsByTagName("P");          //  Получение всех строк в "Истории"
 mPL = mP.length;                                       //  Количество строк

bbb:
 for (jj=0;  jj<mPL;  jj++) {                       //  Последовательный просмотр строк истории
         s=mP[jj].innerHTML;
         if (s.search("ГенУборка–"+NumerusVersion)!=-1  &&  s.search(YouName)!=-1) {    //  Если в строке есть и имя этого скрипта, и имя версии, и  имя пользователя...
                 D=Td;
                 for (n=0; n<10; n++) {
                         if (s.search(fDate(D))!=-1)  { povtorD=true; break bbb; }    //  Проверка на дату проведения генуборки
                         D=D-Dmilisec;
                         if (D<0)  break bbb;     //  защита от некорректной даты
                         }    }
         }

 var VersionFile=document.getElementById("diVersion").value; //  Извлечение значения версии файла
 var Ver = VersionFile;
 var VersionFile_Up = false;
 var History_Add = 0;


//  Если запись не будет повторной за последние 10 дней
 if (!povtorD) {

//  Проверка на валидность версии файла
         var ValidationVersion=(VersionFile.search(/^\d{1,8}(\.\d{1,8}){0,1}$/g)!=-1);    //  сравнение с шаблоном:  "цифры + (точка + цифры)"

//   Изменение версии файла
         if (ValidationVersion) {
                 if (VersionFile.search(/^\d+$/g)!=-1)  Ver=+VersionFile+0.1;   //  если версия без точки — добавление ".1"
                         else {
                                 Ver=VersionFile.replace(/^\d+\./g, "");  //  извлечение цифр после точки + преобразование текста в число
                                 if (Ver.search(/^0/g)!=-1) Ver=0; else Ver=+Ver;
                                 Ver++;
                                 Ver=VersionFile.replace(/\.\d+$/g, "")+"."+Ver;   //   соединение двух групп цифр
                                 }
                                 document.getElementById("diVersion").value=Ver;   //  изменение версии в файле
                                 VersionFile_Up=true;
                                 var Ver_="v."+Ver+" — " }
             else Ver_="";

//   Дополнение истории новой записью
         var reH01 = new RegExp("^(\\\s|"+nbspEntity+"){0,}$","g");
         if (YouName!="")  YouName=YouName+", ";
         if (ValidationVersion  &&  History.innerHTML.search(VersionFile)==-1) {   //  Если в истории нет записи о текущей версии
                 if (History.lastChild.innerHTML.search(reH01)==-1)
                         History.insertAdjacentElement("beforeEnd",document.createElement("P"));   //  добавляем новую строку (если в конце истории нет готовой пустой строки)
                 History.lastChild.innerHTML = "v."+VersionFile+" — ?";  //  Добавление строки с информацией о предыдущей версии
                 History_Add++;
                 }
         if (History.lastChild.innerHTML.search(reH01)==-1)
                 History.insertAdjacentElement("beforeEnd",document.createElement("P"));   //  добавляем новую строку (если в конце истории нет готовой пустой строки)
         History.lastChild.innerHTML = Ver_+"Скрипт «ГенУборка–"+NumerusVersion+"»: "+IsprStr+" — ("+YouName+fDate(new Date().getTime())+")";  //  Добавление строки с информацией о новой версии
         // * Фрагмент "ГенУборка–3.6" необходим для правильной работы других формул скрипта (если этот фрагмент надо поменять, то менять его  надо во всём скрипте)
         History_Add++;

}    }

    window.external.EndUndoUnit(document);                                             // undo (конец записи в систему для отката)

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОКНО РЕЗУЛЬТАТОВ  :  Текущее время и дата


 var currentFullDate = new Date();

 var currentHours = currentFullDate.getHours();
 var currentMinutes = currentFullDate.getMinutes();
 var currentSeconds = currentFullDate.getSeconds();

 if (currentMinutes<10) currentMinutes = "0" + currentMinutes;
 if (currentSeconds<10) currentSeconds = "0" + currentSeconds;

 var currentDay = currentFullDate.getDate();
 var currentMonth = 1+currentFullDate.getMonth();
 var currentYear = currentFullDate.getFullYear();

 if (currentMonth<10) currentMonth = "0" + currentMonth;
currentYear = (currentYear+"").replace(/^.*?(\d{1,2})$/g, "$1");

 var currentTime_ = currentHours + ":" + currentMinutes;
 var currentTime = currentTime_ + ":" + currentSeconds;
 var currentDate_ = currentDay + "." + currentMonth;
// currentDate_="9.05"   //  для тестирования праздников
 var currentDate = currentDate_ + "." + currentYear;

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОКНО РЕЗУЛЬТАТОВ  :  Праздники


 var Prazdniki=false;
 var PrazdnikiText="";
 var DR_=false;
 var DR_Text="";
 if (currentDate_==DR)        { DR_=true; DR_Text="                      С  ДНЁМ  РОЖДЕНИЯ !!!" }
 if (currentDate_=="1.01")  { Prazdniki=true; PrazdnikiText="                        С  НОВЫМ  ГОДОМ !!!" }
 if (currentDate_=="9.05")  { Prazdniki=true; PrazdnikiText="                        С  ДНЁМ  ПОБЕДЫ !!!" }
 if (currentDate_=="30.12" || currentDate_=="31.12")
                                                      { Prazdniki=true; PrazdnikiText="         С  НАСТУПАЮЩИМ  НОВЫМ  ГОДОМ !!!" }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОКНО РЕЗУЛЬТАТОВ  :  Создание списка цитат


 var Kn=[];
 var zitata_N = Math.floor(("000000"+Math.tan(Ts)).replace(/[\.\-]/g, "").replace(/.+(\d{6})\d$/g, "$1")/1000000*271)+1;
  //  * самодельный ГСЧ

//  Из книги "Пословицы и поговорки Великой Отечественной войны"
//                         (составитель Лебедев Павел Федорович)

Kn[1]="Одна у человека мать, одна у него и Родина.";
Kn[2]="Родина любимая — мать родимая.";
Kn[3]="Родина — мать, умей за нее постоять.";
Kn[4]="Где ни жить — Родине служить.";
Kn[5]="С Родиной разлука — одна мука.";
Kn[6]="Всякому мила своя сторона.";
Kn[7]="Своя земля и в горсти мила.";
Kn[8]="На чужой стороне и весна не красна.";
Kn[9]="Где кто родится, там и пригодится.";
Kn[10]="На чужбине родная землица во сне снится.";
Kn[11]="На своей стороне мило, на чужой — постыло.";
Kn[12]="На чужой стороне и сокола зовут вороною.";
Kn[13]="Всякая сосна своему лесу весть подает.";
Kn[14]="Родная страна — колыбель, чужая — дырявое корыто.";
Kn[15]="На солнце тепло, на родине добро.";
Kn[16]="Человек без Родины что соловей без песни.";
Kn[17]="Глупа та птица, которой свое гнездо не мило.";
Kn[18]="Кукушка кукует — по бездомью горюет.";
Kn[19]="Расставшийся с другом плачет семь лет, расставшийся с Родиной — всю жизнь.";
Kn[20]="Нет ничего на свете краше, чем Родина наша.";
Kn[21]="Нашей страны шире не найти в мире.";
Kn[22]="Русское раздолье — человеку приволье.";
Kn[23]="Богата русская земля — говорится не зря.";
Kn[24]="Я тобой горжусь, милая Русь.";
Kn[25]="Человек без Родины что солдат без оружия.";
Kn[26]="Счастье Родины дороже жизни.";
Kn[27]="Береги страну как зеницу ока.";
Kn[28]="Может, и голову сложу, а Родине послужу.";
Kn[29]="Нам Отчизна дорога, охраняем родные берега.";
Kn[30]="Пусть знает ворог: нам край свой дорог.";
Kn[31]="Кто любовь к Отчизне имеет, тот врага одолеет.";
Kn[32]="Мы бережем свою Родину-мать, за нее мы готовы жизнь отдать.";
Kn[33]="С нами родная земля, нам светят звезды Кремля.";
Kn[34]="Великие победы нас ждут впереди под лучами красной звезды.";
Kn[35]="Красная звезда светит всегда.";
Kn[36]="Теперь все дороги ведут в Москву.";
Kn[37]="Москва от глаз далека, да сердцу близка.";
Kn[38]="Москва — наша столица, Москвой народ гордится.";
Kn[39]="Москва — всем столицам голова.";
Kn[40]="Москва — столица, любо подивиться.";
Kn[41]="У русской столицы не видать границы.";
Kn[42]="По Москве ходить — глаз с нее не сводить.";
Kn[43]="Москва — Родины украшенье, врагам устрашение.";
Kn[44]="Кремль тем и красен, что с народом согласен.";
Kn[45]="Наша страна дружбой сильна.";
Kn[46]="У нас все народы живут в ладу — врагам на беду.";
Kn[47]="Солнце не померкнет над нами, братство — наша сила и знамя.";
Kn[48]="Народное братство дороже всякого богатства.";
Kn[49]="Если дружба велика, будет Родина крепка.";
Kn[50]="Дружбу нашу не разделят просторы, моря и горы.";
Kn[51]="Страна растет — врагов метет.";
Kn[52]="Не тот человек, кто для себя живет, а тот человек, кто народу силы отдает.";
Kn[53]="За Родину и народ иду вперед.";
Kn[54]="Человек без народа что дерево без плода.";
Kn[55]="Чтобы с врагами биться, надо всем сплотиться.";
Kn[56]="Не трудно врагов победить, если всем заодно быть.";
Kn[57]="Наш народ сплочен и един, он непобедим.";
Kn[58]="Кто на нас нападает, тот в могилу попадает.";
Kn[59]="Россия с давних пор давала врагу отпор.";
Kn[60]="Никогда Россия ярма не носила.";
Kn[61]="За наше Отечество все человечество.";
Kn[62]="Не летать фашистским стаям над нашим краем.";
Kn[63]="Мы не боимся свинцовой тучи: наши полки могучи.";
Kn[64]="Кто на Советский Союз покушается, тот после раскается.";
Kn[65]="Бей фашистов не в бровь, а в глаз — таков народа наказ.";
Kn[66]="Любовь к народу, ненависть к врагу — душа победы.";
Kn[67]="От Родины награда — сердцу отрада.";
Kn[68]="Отчизна родная — для нас святая.";
Kn[69]="Знает свет: тверже русских нет.";
Kn[70]="Наш народ — герой, ходит на врага стеной.";
Kn[71]="Сыновья русских матерей славятся удалью богатырей.";
Kn[72]="Наша страна героями славится.";
Kn[73]="Кто за Родину горой — тот истинный герой.";
Kn[74]="Без патриотизма не разбить фашизма.";
Kn[75]="Защищай Советскую державу, бей фашистскую ораву.";
Kn[76]="Фашистам смерть неси — не опозорь Руси.";
Kn[77]="Даю Родине слово: мстить фашистам сурово.";
Kn[78]="Во имя Отчизны своей где фашиста увидел — бей.";
Kn[79]="За народное дело бейся смело.";
Kn[80]="Для Родины своей ни сил, ни жизни не жалей.";
Kn[81]="Жизнь отдам, а Родину не продам.";
Kn[82]="С родной земли — умри не сходи.";
Kn[83]="За Родину-мать не страшно умирать.";
Kn[84]="За Родину жизни не пощадим, но врагу ничего не отдадим.";
Kn[85]="Кому нашей земли захочется, тот под ней скорчится.";
Kn[86]="Родину любить — фашистов бить.";
Kn[87]="Бей фашистский сброд — за Родину, за народ.";
Kn[88]="Родину любить — верно Родине служить.";
Kn[89]="Родину беречь — врагов сечь.";
Kn[90]="Для нас война не страх — развеем врага в прах.";
Kn[91]="Гитлер пришел к нам незваным, а уйдет от нас драным.";
Kn[92]="Не придется Гитлеру из Ленинграда сделать море, а из Москвы — поле.";
Kn[93]="Думал Гитлер нашими землями управлять, а придется ему подыхать.";
Kn[94]="Штык советский молодец — скоро Гитлеру конец.";
Kn[95]="У Гитлера не столько расчетов, сколько просчетов.";
Kn[96]="Гитлер предполагает, а Красная Армия располагает.";
Kn[97]="Посмотрим, как Гитлер завоет, когда наши огонь по Берлину откроют.";
Kn[98]="Раздавим Гитлера в блин, как придем в Берлин.";
Kn[99]="Гитлеру-палачу местью отплачу.";
Kn[100]="Пора с Гитлером кончать — хватит ему рычать.";
Kn[101]="Гитлер и его правительство ответят за грабительство.";
Kn[102]="Гитлер кричит, мы весь свет разрушим, а мы Гитлера наперед задушим.";
Kn[103]="Сколько Гитлер ни крути, а от петли не уйти.";
Kn[104]="Гитлер победами хвалится, да в могилу свалится.";
Kn[105]="Хотел Гитлер Россию съесть, да пришлось в лужу сесть.";
Kn[106]="Не довелось свинье на небо дивиться, а Гитлеру в нашем огороде рыться.";
Kn[107]="Медведя знают по когтям, а Геббельса по лживым речам.";
Kn[108]="Фашистские собаки сочиняют враки.";
Kn[109]="Фашист брехней живет.";
Kn[110]="Солдаты у Гитлера вшивы, сводки у Геббельса лживы.";
Kn[111]="От осины не жди ягоды, от фашиста — правды.";
Kn[112]="Геббельс вертит языком без меры, да нет ему веры.";
Kn[113]="Геббельс мелет, да никто ему не верит.";
Kn[114]="Германия вот-вот развалится, а Геббельс все хвалится.";
Kn[115]="Германия пылает, а Геббельс все лает.";
Kn[116]="Врет, как фашистский бюллетень.";
Kn[117]="Как Геббельс ни врет, а наша берет.";
Kn[118]="Против фашистской лжи ухо востро держи.";
Kn[119]="Фашистские оковы всей Европе знакомы.";
Kn[120]="Лучше волку в зубы, чем фашистам в руки.";
Kn[121]="Фашист гладок, да вид его гадок.";
Kn[122]="Фашист от когтей до носа похож на барбоса.";
Kn[123]="Фашист и сатана — сущность одна.";
Kn[124]="Не ищи в фашисте человека — не найдешь.";
Kn[125]="Легче шакала превратить в голубя, чем фашиста в человека.";
Kn[126]="Фашистов легче убить, чем вразумить.";
Kn[127]="Фашистская власть — грабить и красть.";
Kn[128]="У фашистов особый спорт: кто больше добра сопрет.";
Kn[129]="Видно птицу по полету, а фашиста — по грабежам.";
Kn[130]="Сколько фашисту ни воровать, а виселицы не миновать.";
Kn[131]="Для предателя сгори хоть целый свет, лишь бы он был согрет.";
Kn[132]="Змея один раз в год меняет кожу, а предатель — каждый день.";
Kn[133]="Предатель фашисту пятки лизал, а фашист и спасибо не сказал.";
Kn[134]="У предателя ни Родины, ни друзей.";
Kn[135]="Лучше глаза лишиться, чем доброго имени.";
Kn[136]="Героям — слава, предателям — смерть.";
Kn[137]="Слава греет, позор жжет.";
Kn[138]="Бесчестье хуже смерти.";
Kn[139]="Кто с врагами пьет и гуляет, того и земля не принимает.";
Kn[140]="Думал фриц нашим богатством нажиться, да пришлось в могилу ложиться.";
Kn[141]="Не видать свинье неба, а фашистам нашего хлеба.";
Kn[142]="Кого к столу приглашают, а в фашиста пулю сажают.";
Kn[143]="Кому чарка, кому две, а фашисту — камнем по голове.";
Kn[144]="Угостили фашистов не водкой, а прямой наводкой.";
Kn[145]="Врага не уговаривай: с ним штыком разговаривай.";
Kn[146]="Убил фашистского гада — душа рада.";
Kn[147]="Съели бы фашисты русского мужика, да кишка тонка.";
Kn[148]="Одного фашиста убить — сто детей спасти.";
Kn[149]="Фашиста убить что змею: сто грехов простится.";
Kn[150]="Лучше смерть на поле, чем позор в неволе.";
Kn[151]="Чем позор и неволю терпеть, лучше в бою умереть.";
Kn[152]="Лучше биться орлом, чем жить зайцем.";
Kn[153]="Никогда фашистам не властвовать над нами, никогда не будем рабами.";
Kn[154]="Лучше злая пуля, чем клеймо раба.";
Kn[155]="Славная смерть лучше постыдной жизни.";
Kn[156]="Воевать — не галушки жевать.";
Kn[157]="Не воевать — победы не видать.";
Kn[158]="Слабого огонь войны испепеляет, а сильного как сталь закаляет.";
Kn[159]="Кто за правое дело дерется, у того двойная сила берется.";
Kn[160]="Наше дело правое — бей врага браво.";
Kn[161]="Бей фашистских властей всех мастей.";
Kn[162]="С какой злостью превеликой мы расправимся с фашистской кликой.";
Kn[163]="С врагами биться — на пули не скупиться.";
Kn[164]="Винтовка хлоп — и фашист в гроб.";
Kn[165]="Пришел фашист из Берлина — получил земли три аршина.";
Kn[166]="Не важно, чем бил, — важно, что фашиста убил.";
Kn[167]="Каждой фашистской гадине висеть на перекладине.";
Kn[168]="Всякому свой путь: журавлю — в небо, волку — в лес, а фашисту — в могилу.";
Kn[169]="Упрямого выправит дубина, а фашиста — могила.";
Kn[170]="Какую яму фашист копал — в такую и попал.";
Kn[171]="Фашисты научились воровать, а мы научились фашистов убивать.";
Kn[172]="Наш порог не для фашистских сапог.";
Kn[173]="Фашиста согнем в бараний рог, чтоб не переступал наш порог.";
Kn[174]="Лося бьют в осень, а фашиста всегда.";
Kn[175]="Наше дело святое и правое, мы расправимся с фашистскою оравою.";
Kn[176]="С фашистом разговор короткий: круши его прямой наводкой.";
Kn[177]="Кричал фашист «гоп», да получил пулю в лоб.";
Kn[178]="Фашиста умертвить — доброе дело сотворить.";
Kn[179]="На фронте воевать — славу добывать.";
Kn[180]="Фронт гремит — у врага земля горит.";
Kn[181]="Гремят вспышки на горизонте: то бьют фашистов на фронте.";
Kn[182]="Фашистов разгромили — и в селе порядок водворили.";
Kn[183]="Фашист замахнулся, да промахнулся.";
Kn[184]="Дрался фашист пылко, да остался без затылка.";
Kn[185]="Фашисты козыряли, да головы потеряли.";
Kn[186]="Фашисты пять раз на дню попадают в западню.";
Kn[187]="У фашистов брожение: попали в окружение.";
Kn[188]="Фашистам не все напирать — пришлось и умирать.";
Kn[189]="Трави фашистскую силу — огнем и штыком загоняй в могилу.";
Kn[190]="Чокнемся, фашист, я парень не гордый: я — прикладом, а ты — мордой.";
Kn[191]="На то у винтовок и ложи, чтобы бить фашиста по роже.";
Kn[192]="Слава русского штыка не померкнет века.";
Kn[193]="Штык остёр загнал фрицев в «котел».";
Kn[194]="Наши штыки разгромят фашистские полки.";
Kn[195]="Фашисты войну начали, а мы кончим.";
Kn[196]="Славу свою добывай в бою.";
Kn[197]="Почет и славу собирают по капле.";
Kn[198]="Народ того уважает, кто фашистов уничтожает.";
Kn[199]="На то мы и внуки Суворова, чтобы сражаться здорово.";
Kn[200]="Как учил Александр Суворов — будь к врагу суровым.";
Kn[201]="На краю света фашистов найдем и на суд приведем.";
Kn[202]="Зря фашист блиндажи строит: все равно снаряд накроет.";
Kn[203]="Смерть фашистской своре — на берегу и в море!";
Kn[204]="Солдата мать родит, отец растит, а бой учит.";
Kn[205]="Дерево в огне сгорает, а солдат от огня крепче бывает.";
Kn[206]="Кто первый бой начинает, тот скорее побеждает.";
Kn[207]="Пришла пора гнать фашистов со двора.";
Kn[208]="Фашист наступает — кричит «гут», а отступает — «Гитлер капут».";
Kn[209]="Красна девушка косами, солдат — орденами.";
Kn[210]="Ученый водит, а неуч сзади ходит.";
Kn[211]="Птицу обманывают кормом, а человека — словом.";
Kn[212]="Слово, сказанное без соображения, подобно выстрелу без прицела.";
Kn[213]="Говорить впустую что стрелять вхолостую.";
Kn[214]="У осла длинные уши, а у болтуна длинный язык.";
Kn[215]="У короткого ума длинный язык.";
Kn[216]="Слово не воробей: выпустишь — не поймаешь.";
Kn[217]="Скажешь — не воротишь, напишешь — не сотрешь, отрубишь — не приставишь.";
Kn[218]="Лучше один раз увидеть, чем сто раз услышать.";
Kn[219]="Острый язык — дарование, длинный язык — наказание.";
Kn[220]="Не всегда говори то, что знаешь, но всегда знай, что говоришь.";
Kn[221]="Кто много болтает, тот врагу помогает.";
Kn[222]="Кто зевает — победителем не бывает.";
Kn[223]="Храбрость города берет, а бдительность их бережет.";
Kn[224]="Зря не болтай у телефона: болтун — находка для шпиона.";
Kn[225]="Нет друга — так ищи, а найдешь — береги.";
Kn[226]="Ищи себе друзей таких, чтобы не было стыда от них.";
Kn[227]="Не ходи, дружок, в неизвестный кружок: к таким людям зайдешь, что навек пропадешь.";
Kn[228]="Плохой друг подобен тени: только в светлые дни его и видишь.";
Kn[229]="Не та дружба сильна, что в словах заключена, а та, что в бою скреплена.";
Kn[230]="Для друзей — пироги, для врагов — кулаки.";
Kn[231]="В недруге пуля что во пне, а в друге что во мне.";
Kn[232]="Все за одного, один за всех — вот и обеспечен в бою успех.";
Kn[233]="Не имей сто рублей, а имей сто друзей.";
Kn[234]="В дружбе — правда.";
Kn[235]="Кто нашел друга — нашел сокровище.";
Kn[236]="Сам пропадай, а товарища выручай.";
Kn[237]="Один в поле не воин, а вдвоем с товарищем — взвод.";
Kn[238]="Где дружба и лад — там и клад.";
Kn[239]="Где дружба и совет — там и свет.";
Kn[240]="Трусливый друг опаснее врага, ибо врага опасаешься, а на друга опираешься.";
Kn[241]="Не тот друг, кто медом мажет, а тот, кто правду скажет.";
Kn[242]="Недруг поддакивает, а друг спорит.";
Kn[243]="Дружба крепка не лестью, а правдой и честью.";
Kn[244]="Новых друзей наживай, а старых не забывай.";
Kn[245]="Прямо страху в глаза смотри — и страх смигнет.";
Kn[246]="Волков бояться — в лес не ходить.";
Kn[247]="Трус умирает тысячу раз, а смелый всего один раз.";
Kn[248]="Советские воины из металла скроены.";
Kn[249]="Чем больше героев, тем скорее фашистов зароем.";
Kn[250]="Храбрость — сестра победы.";
Kn[251]="На смелого собака лает, а трусливого — рвет.";
Kn[252]="Не числом, а храбростью побеждают.";
Kn[253]="Лучше быть мертвым героем, чем живым трусом.";
Kn[254]="Смелого и пуля облетит, смелый и мину перехитрит.";
Kn[255]="Если не будешь овцой, то волк не съест.";
Kn[256]="Косил Гитлер глаз на Донбасс, а Донбасс опять у нас.";
Kn[257]="И про солдатскую честь пословица есть.";
Kn[258]="Потому и смешно, что фашистам горе пришло.";
Kn[259]="Гитлеровским сателлитам быть разбитым.";
Kn[260]="Знаем, за что бьем, потому и с победой придем.";
Kn[261]="Кто за правое дело стоит, тот всегда победит.";
Kn[262]="У правого сила удвоится, говорит пословица.";
Kn[263]="Будет праздник и на улице нашей, всякого праздника краше.";
Kn[264]="Войну закончим — и мир упрочим.";
Kn[265]="Как фашисты нам ни грозили, а мы их сразили.";
Kn[266]="Фашистов разгромили — добро сотворили.";
Kn[267]="Хотел Гитлер покорить весь мир, да лопнул как мыльный пузырь.";
Kn[268]="Задохнулась фашистская стая девятого мая.";
Kn[269]="Разбили фашистскую орду в сорок пятом году.";
Kn[270]="Прогнали фрицев — можно веселиться.";
Kn[271]="Советская Армия врага разгромила, она стоит на страже мира.";

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОКНО РЕЗУЛЬТАТОВ  :  Функция подсчета затраченного времени


 var tempus=0;

 function time(T) {

 var Tmin  = Math.floor(T/60000);
 var TsecD = (T%60000)/1000;
 var Tsec = Math.floor(TsecD);

 if (Tmin ==0)
         tempus = (TsecD+"").replace(/(.{1,5}).*/g, "$1").replace(".", ",")+" сек";
     else {
             tempus = Tmin+" мин";
             if (Tsec !=0)
                     tempus += " " + Tsec+ " с" }

 return tempus;

 }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОКНО РЕЗУЛЬТАТОВ  :  Демонстрационный режим "Показать все строки"


 var d=0;
 var g=0;
 var dm=false;
 if (VseStroki_on_off == 1) {
         d="показать нули";
         dm=true;
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОКНО РЕЗУЛЬТАТОВ  :  Сборка массива с результатами обработки (для win XP)



 var Tf=new Date().getTime();
 var mSt=[];
 var ind=0;


 mSt[ind]="                                 –= ◊ =–";  ind++;
 mSt[ind]="         . . . «Генеральная уборка» v."+NumerusVersion+" . . .	";  ind++;
 mSt[ind]="    ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ̍ ";  ind++;
 mSt[ind]="";  ind++;

                                   mSt[ind]="• СТАТИСТИКА:";  ind++;
                                   mSt[ind]="   Время выполнения  .  .  .  .  .  .  .  .	"+time(Tf - Ts - T_pause);  ind++;
 if (T_pause!=d) { mSt[ind]="   Диалоговые паузы   .  .  .  .  .  .  .  .	"+time(T_pause);  ind++; }
                                   mSt[ind]="   Циклов обработки  .  .  .  .  .  .  .  .	"+count_Cycle;  ind++;
                                   mSt[ind]="   Проверено строк  .  .  .  .  .  .  .  .  .	"+count_P;  ind++;
                                   mSt[ind]="   Исправлено строк   .  .  .  .  .  .  .  .	"+count_GU;  ind++;

var cTaT=ind;  //  число строк в первом разделе


                                           mSt[ind]="";  ind++;
                                           mSt[ind]="• СПЕЦ. РЕЖИМ:";  ind++;
 if (dubl  ||  dm)        { mSt[ind]="   Дефис + цифра  –  сохранение дефиса";  ind++ }
 if (!R_Def  ||  dm)    { mSt[ind]="   Дефис + буква    ›››    Тире";  ind++ }
  if (!R_KTi  ||  dm)   { mSt[ind]="   Короткое тире + буква    ›››    Тире";  ind++ }
  if (!R_Tire  ||  dm)  { mSt[ind]="   Тире + буква    ›››    Короткое тире или Дефис";  ind++ }

 if (cTaT==ind-2) ind=ind-2;  //  Удаление двух последних строк, если нет пунктов с исправлениями
 cTaT=ind;

                                              mSt[ind]="";  ind++;
                                              mSt[ind]="• ВНЕ ОБРАБОТКИ:";  ind++;
 if (count_Code!=d)     { mSt[ind]="   Формат «код»  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .	"+count_Code;  ind++ }
 if (count_Url1!=d)      { mSt[ind]="   Сноски и ссылки .  .  .  .  .  .  .  .  .  .  .  .  .  .	"+count_Url1;  ind++ }
 if (count_Url3!=d)      { mSt[ind]="   Эл. адреса в тексте  .  .  .  .  .  .  .  .  .  .  .  .	"+count_Url3;  ind++ }
 if (count_129ex!=d)  { mSt[ind]="   Строки из символов   .  .  .  .  .  .  .  .  .  .  .  .	"+count_129ex;  ind++ }
 if (countNm!=d)         { mSt[ind]="   Тире между названиями   .  .  .  .  .  .  .  .  .  .	"+countNm;  ind++ }

 if (cTaT==ind-2) ind=ind-2;  //  Удаление двух последних строк, если нет пунктов с исправлениями
 cTaT=ind;  //  число строк в общей статистике /или/ минимальная высота колонки


  mSt[ind]="";  ind++;
  mSt[ind]="• ИСПРАВЛЕНИЯ:";  ind++;

 var cTaT2=ind;
 var count_eLine=0;

 if (count_011!=d)  { mSt[ind]="011. ошибочное примечание   .  .  .  .  .  .  .  .	"+count_011;  ind++ }
 if (count_021!=d)  { mSt[ind]="021. лишний пробел перед % в адресе   .  .  .	"+count_021;  ind++ }

 if (cTaT2!=ind)      { mSt[ind]="";  ind++;  cTaT2=ind;  count_eLine++ }   //  Добавление пустой строки, если есть пункты с исправлениями

 if (count_101!=d)  { mSt[ind]="101. лишние спец. символы   .  .  .  .  .  .  .  .  .	"+count_101;  ind++ }
 if (count_102!=d)  { mSt[ind]="102. спец. символы  ›››  обычный пробел  .  .	"+count_102;  ind++ }
 if (count_103!=d)  { mSt[ind]="103. спец. символы  ›››  н/р пробел .  .  .  .  .  .	"+count_103;  ind++ }
 if (count_104!=d)  { mSt[ind]="104. спец. символы  ›››  дефис  .  .  .  .  .  .  .  .	"+count_104;  ind++ }
 if (count_105!=d)  { mSt[ind]="105. спец. символы  ›››  тире .  .  .  .  .  .  .  .  .	"+count_105;  ind++ }
 if (count_106!=d)  { mSt[ind]="106. спец. символ  ›››  запятая .  .  .  .  .  .  .  .	"+count_106;  ind++ }
 if (count_107!=d)  { mSt[ind]="107. стандартизация апострофов  .  .  .  .  .  .	"+count_107;  ind++ }
 if (count_108!=d)  { mSt[ind]="108. двойной апостроф  ›››  кавычки   .  .  .  .	"+count_108;  ind++ }
 if (count_110!=d)  { mSt[ind]="110. пропущенный \"&\"  .  .  .  .  .  .  .  .  .  .  .  .	"+count_110;  ind++ }
 if (count_111!=d)  { mSt[ind]="111. &nbsp;  ›››  н/р пробел   .  .  .  .  .  .  .  .  .	"+count_111;  ind++ }
 if (count_114!=d)  { mSt[ind]="114. чистка пустых ссылок   .  .  .  .  .  .  .  .  .	"+count_114;  ind++ }
 if (count_119!=d)  { mSt[ind]="119. снятие выделения с пробелов   .  .  .  .  .	"+count_119;  ind++ }
 if (count_120!=d)  { mSt[ind]="120. ряд пробелов  ›››  обычный пробел   .  .	"+count_120;  ind++ }
 if (count_121!=d)  { mSt[ind]="121. удаление начального пробела  .  .  .  .  .	"+count_121;  ind++ }
 if (count_122!=d)  { mSt[ind]="122. удаление конечного пробела .  .  .  .  .  .	"+count_122;  ind++ }
 if (count_130!=d)  { mSt[ind]="130. три точки  ›››  многоточие   .  .  .  .  .  .  .	"+count_130;  ind++ }
 if (count_131!=d)  { mSt[ind]="131. многоточие + лишние точки/запятые	"+count_131;  ind++ }
 if (count_132!=d)  { mSt[ind]="132. ? и !  + точки/запятые  ›››  ?.. и !..   .  .  .	"+count_132;  ind++ }
 if (count_133!=d)  { mSt[ind]="133. ?!  + точки/запятая  ›››  ?!.  .  .  .  .  .  .  .	"+count_133;  ind++ }
 if (count_140!=d)  { mSt[ind]="140. две точки  ›››  многоточие   .  .  .  .  .  .  .	"+count_140;  ind++ }
 if (count_150!=d)  { mSt[ind]="150. пунктуация + лишние знаки   .  .  .  .  .  .	"+count_150;  ind++ }
 if (count_152!=d)  { mSt[ind]="152. ряд дефисов/тире  ›››  тире   .  .  .  .  .  .	"+count_152;  ind++ }
 if (count_155!=d)  { mSt[ind]="155. _текст в курсив_  .  .  .  .  .  .  .  .  .  .  .  .	"+count_155;  ind++ }
 if (count_156!=d)  { mSt[ind]="156. _т_е_к_с_т_  ›››  жирность  .  .  .  .  .  .  .	"+count_156;  ind++ }
 if (count_157!=d)  { mSt[ind]="157. _текст_в_курсив_   .  .  .  .  .  .  .  .  .  .  .	"+count_157;  ind++ }
 if (count_160!=d)  { mSt[ind]="160. диакрúтика  ›››  ударе́ние   .  .  .  .  .  .  .	"+count_160;  ind++ }
 if (count_172!=d)  { mSt[ind]="172. лишние знаки в начале строки  .  .  .  .  .	"+count_172;  ind++ }
 if (count_180!=d)  { mSt[ind]="180. пробел + лишняя точка .  .  .  .  .  .  .  .  .	"+count_180;  ind++ }
 if (count_182!=d)  { mSt[ind]="182. пробел + лишняя запятая   .  .  .  .  .  .  .	"+count_182;  ind++ }

 if (cTaT2!=ind)      { mSt[ind]="";  ind++;  cTaT2=ind;  count_eLine++ }   //  Добавление пустой строки, если есть пункты с исправлениями

 if (count_201!=d)  { mSt[ind]="201. объединение тегов .  .  .  .  .  .  .  .  .  .  .	"+count_201;  ind++ }
 if (count_203!=d)  { mSt[ind]="203. удаление выделения для знаков .  .  .  .	"+count_203;  ind++ }
 if (count_215!=d)  { mSt[ind]="215. сложное объединение тегов  .  .  .  .  .  .	"+count_215;  ind++ }
 if (count_220!=d)  { mSt[ind]="220. выделЕние буквы ››› ударе́ние .  .  .  .  .	"+count_220;  ind++ }
 if (count_241!=d)  { mSt[ind]="241. снятие выделения с пробел+знак   .  .  .	"+count_241;  ind++ }
 if (count_250!=d)  { mSt[ind]="250. снятие выделения с одной скобки  .  .  .	"+count_250;  ind++ }
 if (count_251!=d)  { mSt[ind]="251. выделение пары скобок   .  .  .  .  .  .  .  .	"+count_251;  ind++ }
 if (count_255!=d)  { mSt[ind]="255. выделение пары угловых кавычек  .  .  .	"+count_255;  ind++ }
 if (count_260!=d)  { mSt[ind]="260. выделение запятой .  .  .  .  .  .  .  .  .  .  .	"+count_260;  ind++ }
 if (count_270!=d)  { mSt[ind]="270. снятие выделения со сноски  .  .  .  .  .  .	"+count_270;  ind++ }

 if (cTaT2!=ind)      { mSt[ind]="";  ind++;  cTaT2=ind;  count_eLine++ }   //  Добавление пустой строки, если есть пункты с исправлениями

 if (count_301!=d)  { mSt[ind]="301. дефис рядом с буквой  ›››  тире .  .  .  .  .	"+count_301;  ind++ }
 if (count_310!=d)  { mSt[ind]="310. тире рядом с буквой  ›››  дефис .  .  .  .  .	"+count_310;  ind++ }
 if (count_312!=d)  { mSt[ind]="312. тире между букв  ›››  дефис   .  .  .  .  .  .	"+count_312;  ind++ }
 if (count_320!=d)  { mSt[ind]="320. короткое тире  ›››  дефис .  .  .  .  .  .  .  .	"+count_320;  ind++ }
 if (count_321!=d)  { mSt[ind]="321. короткое тире  ›››  тире   .  .  .  .  .  .  .  .	"+count_321;  ind++ }

 if (cTaT2!=ind)      { mSt[ind]="";  ind++;  cTaT2=ind;  count_eLine++ }   //  Добавление пустой строки, если есть пункты с исправлениями

 if (count_401!=d)  { mSt[ind]="401. первые кавычки + лишний пробел .  .  .	"+count_401;  ind++ }
 if (count_402!=d)  { mSt[ind]="402. первое многоточие + лишний пробел	"+count_402;  ind++ }
 if (count_410!=d)  { mSt[ind]="410. лишний пробел + последние кавычки	"+count_410;  ind++ }
 if (count_411!=d)  { mSt[ind]="411. лишний пробел + многоточие в конце	"+count_411;  ind++ }
 if (count_420!=d)  { mSt[ind]="420. лишний пробел перед знаками .  .  .  .  .	"+count_420;  ind++ }
 if (count_424!=d)  { mSt[ind]="424. лишний пробел перед сноской  .  .  .  .  .	"+count_424;  ind++ }
 if (count_425!=d)  { mSt[ind]="425. лишний пробел перед многоточием .  .	"+count_425;  ind++ }
 if (count_431!=d)  { mSt[ind]="431. кавычки+знак + пропущенный пробел	"+count_431;  ind++ }
 if (count_432!=d)  { mSt[ind]="432. лишний пробел + кавычки+знак .  .  .  .	"+count_432;  ind++ }
 if (count_440!=d)  { mSt[ind]="440. открывающие знаки + лишний пробел	"+count_440;  ind++ }
 if (count_441!=d)  { mSt[ind]="441. сноска + лишний пробел + знак   .  .  .  .	"+count_441;  ind++ }
 if (count_450!=d)  { mSt[ind]="450. знаки + пропущенный пробел   .  .  .  .  .	"+count_450;  ind++ }
 if (count_460!=d)  { mSt[ind]="460. вставка пробела перед кавычкой .  .  .  .	"+count_460;  ind++ }
 if (count_470!=d)  { mSt[ind]="470. перемещение сноски за кавычки .  .  .  .	"+count_470;  ind++ }
 if (count_471!=d)  { mSt[ind]="471. сноска + пропущенный пробел .  .  .  .  .	"+count_471;  ind++ }
 if (count_472!=d)  { mSt[ind]="472. сноска+знак + пропущенный пробел	"+count_472;  ind++ }

 if (cTaT2!=ind)      { mSt[ind]="";  ind++;  cTaT2=ind;  count_eLine++ }   //  Добавление пустой строки, если есть пункты с исправлениями

 if (count_501!=d)  { mSt[ind]="501. короткое тире меж римских чисел   .  .	"+count_501+"*";  ind++ }
 if (count_503!=d)  { mSt[ind]="503. короткое тире между числительными	"+count_503+"*";  ind++ }
 if (count_504!=d)  { mSt[ind]="504. короткое тире между месяцами   .  .  .  .	"+count_504+"*";  ind++ }
 if (count_506!=d)  { mSt[ind]="506. число-месяц через н/р пробел  .  .  .  .  .	"+count_506;  ind++ }
 if (count_507!=d)  { mSt[ind]="507. короткое тире в сложных датах   .  .  .  . 	"+count_507+"*";  ind++ }
 if (count_510!=d)  { mSt[ind]="510. короткое тире рядом с числом  .  .  .  .  .	"+count_510;  ind++ }
 if (count_511!=d)  { mSt[ind]="511. число-буква через дефис .  .  .  .  .  .  .  .	"+count_511;  ind++ }
 if (count_512!=d)  { mSt[ind]="512. лишний пробел в промежутке чисел	"+count_512;  ind++ }
 if (count_514!=d)  { mSt[ind]="514. короткое тире между числами  .  .  .  .  .	"+count_514+"*";  ind++ }
 if (count_515!=d)  { mSt[ind]="515. н/р пробел и дефис в ISBN   .  .  .  .  .  .  .	"+count_515+"*";  ind++ }
 if (count_520!=d)  { mSt[ind]="520. дефис в конце строки  ›››  тире .  .  .  .  .	"+count_520;  ind++ }
 if (count_521!=d)  { mSt[ind]="521. дефис меж пробелов  ›››  тире   .  .  .  .  .	"+count_521;  ind++ }
 if (count_530!=d)  { mSt[ind]="530. дефис после знаков  ›››  тире .  .  .  .  .  .	"+count_530;  ind++ }
 if (count_534!=d)  { mSt[ind]="534. дефис + многоточие  ›››  тире .  .  .  .  .  .	"+count_534;  ind++ }
 if (count_550!=d)  { mSt[ind]="550. обычный пробел после тире  .  .  .  .  .  .	"+count_550;  ind++ }
 if (count_551!=d)  { mSt[ind]="551. тире + н/р пробел в начале строки .  .  .	"+count_551;  ind++ }
 if (count_561!=d)  { mSt[ind]="561. обычный пробел перед тире  .  .  .  .  .  .	"+count_561;  ind++ }
 if (count_562!=d)  { mSt[ind]="562. неразрывный пробел перед тире .  .  .  .	"+count_562;  ind++ }
 if (count_580!=d)  { mSt[ind]="580. неучтенный дефис ››› короткое тире .  .	"+count_580+"*";  ind++ }

 if (cTaT2!=ind)      { mSt[ind]="";  ind++;  cTaT2=ind;  count_eLine++ }   //  Добавление пустой строки, если есть пункты с исправлениями

 if (count_601!=d)  { mSt[ind]="601. сокращ. + Имя через н/р пробел  .  .  .  .	"+count_601;  ind++ }
 if (count_610!=d)  { mSt[ind]="610. висящее слово в конце строки   .  .  .  .  .	"+count_610;  ind++ }
 if (count_611!=d)  { mSt[ind]="611. висящее слово в конце предложения	"+count_611;  ind++ }
 if (count_615!=d)  { mSt[ind]="615. прикрепление предлога .  .  .  .  .  .  .  .  .	"+count_615;  ind++ }
 if (count_616!=d)  { mSt[ind]="616. висящее слово в начале предложения	"+count_616;  ind++ }
 if (count_630!=d)  { mSt[ind]="630. н/р пробел в аббревиатуре  .  .  .  .  .  .  .	"+count_630;  ind++ }
 if (count_690!=d)  { mSt[ind]="690. н/р пробел ››› обычный  .  .  .  .  .  .  .  .  .	"+count_690;  ind++ }

 if (cTaT2!=ind)      { mSt[ind]="";  ind++;  cTaT2=ind;  count_eLine++ }   //  Добавление пустой строки, если есть пункты с исправлениями

 if (count_730!=d)  { mSt[ind]="730. н.э.,  с.ш.,  в.д.,  и т.д.,  и т.п.  .  .  .  .  .	"+count_730;  ind++ }
 if (count_735!=d)  { mSt[ind]="735. г.р.,  л.с.  и  у.е.   .  .  .  .  .  .  .  .  .  .  .  .	"+count_735;  ind++ }
 if (count_740!=d)  { mSt[ind]="740. восстановление знака \"№\"  .  .  .  .  .  .  .	"+count_740;  ind++ }
 if (count_741!=d)  { mSt[ind]="741. градус Цельсия, Кельвина и др.   .  .  .  .	"+count_741;  ind++ }
 if (count_742!=d)  { mSt[ind]="742. восстановление знака градуса  .  .  .  .  .	"+count_742;  ind++ }
 if (count_743!=d)  { mSt[ind]="743. градусы-минуты-секунды .  .  .  .  .  .  .  .	"+count_743;  ind++ }
 if (count_744!=d)  { mSt[ind]="744. н/р пробел после №, §, стр. и т.п.   .  .  .	"+count_744;  ind++ }
 if (count_745!=d)  { mSt[ind]="745. пробелы в перечне номеров  .  .  .  .  .  .	"+count_745;  ind++ }
 if (count_748!=d)  { mSt[ind]="748. лишний пробел перед \"%\" .  .  .  .  .  .  .  .	"+count_748;  ind++ }
 if (count_750!=d)  { mSt[ind]="750. кв. и куб. ед. изм.  через н/р пробел  .  .	"+count_750;  ind++ }
 if (count_755!=d)  { mSt[ind]="755. число + ед. изм.  через н/р пробел .  .  .	"+count_755;  ind++ }
 if (count_760!=d)  { mSt[ind]="760. н/р пробел в маркированных списках	"+count_760;  ind++ }
 if (count_765!=d)  { mSt[ind]="765. P. S., P.P.S., P.S.S.  через н/р пробел  .  .	"+count_765;  ind++ }
 if (count_770!=d)  { mSt[ind]="770. XX век, V съезд и т.п.  через н/р пробел	"+count_770;  ind++ }
 if (count_771!=d)  { mSt[ind]="771. 2 дня, 5 тонн и т.п.  через н/р пробел	"+count_771;  ind++ }
 if (count_790!=d)  { mSt[ind]="790. лишние точки в заголовках .  .  .  .  .  .  .	"+count_790;  ind++ }

 if (cTaT2!=ind)      { mSt[ind]="";  ind++;  cTaT2=ind;  count_eLine++ }   //  Добавление пустой строки, если есть пункты с исправлениями

 if (count_801!=d)  { mSt[ind]="801. выделение всей строки   .  .  .  .  .  .  .  .	"+count_801;  ind++ }
 if (count_802!=d)  { mSt[ind]="802. выделение начала строки   .  .  .  .  .  .  .	"+count_802;  ind++ }
 if (count_803!=d)  { mSt[ind]="803. выделение предложения  .  .  .  .  .  .  .  .	"+count_803;  ind++ }

 if (cTaT2!=ind)      { mSt[ind]="";  ind++;  cTaT2=ind;  count_eLine++ }   //  Добавление пустой строки, если есть пункты с исправлениями

 if (count_901!=d)  { mSt[ind]="901. ошибочный °C  ›››  исходный текст  .  .  .	"+count_901;  ind++ }
 if (count_911!=d)  { mSt[ind]="911. выдЕление кАпсом  ›››  ударе́ние  .  .  .  .	"+count_911;  ind++ }

 if (cTaT2!=ind)      { mSt[ind]="";  ind++;  cTaT2=ind;  count_eLine++ }   //  Добавление пустой строки, если есть пункты с исправлениями


 //  Удаление пустых строк в разделе "Исправления"
 if (count_eLine !=0  &&  (ind-cTaT-2-count_eLine)/count_eLine  <=1.5)   //  если в подразделе в среднем оказалось по 1,5 операции (или меньше)
         for (n=cTaT+2; n<ind; n++)                                                //  ищем пустые строки
                 if (mSt[n] =="")  { mSt.splice(n, 1);  ind-- }               // и удаляем их


 if (mSt[ind-1]=="")   ind--;   //  Удаление последней пустой строки, если она есть

 if (cTaT==ind-2) ind=ind-2;  //  Удаление двух последних строк, если нет пунктов в разделе "Исправления"


 // подсчет количества помеченных операций (не исправлений), и создание текста соответствующего этому числу
 switch (!!count_501 + !!count_503 + !!count_504 + !!count_507 + !!count_514 + !!count_515 + !!count_580 + 7*dm) {
         case 0:  break;
         case 1:
             mSt[ind]="";  ind++;
             mSt[ind]="* отмеченная операция часто возвращает текст";  ind++;
             mSt[ind]="      в исходное состояние";  ind++;  break;
         default:
             mSt[ind]="";  ind++;
             mSt[ind]="* отмеченные операции часто возвращают текст";  ind++;
             mSt[ind]="      в исходное состояние";  ind++;  break;
         }

//  История
 if (VersionFile_Up || History_Add  ||  dm)  { mSt[ind]="";  ind++ }
 if (VersionFile_Up  ||  dm)                      { mSt[ind]="• Версия файла:  "+VersionFile+" ››› "+Ver;  ind++ }
 if (History_Add==1  ||  dm)                   { mSt[ind]="• Добавлена новая строка в историю";  ind++ }
 if (History_Add==2  ||  dm)                   { mSt[ind]="• Добавлены две строки в историю";  ind++ }

//  Сборка строк цитаты
                                             mSt[ind]="";  ind++;
                                             mSt[ind]="• ПОСЛОВИЦА:";  ind++;
 var reZit = new RegExp("^((  (?!—)|.){0,45})(\\\s\\\s|$)(.{0,})$","g");   // Разделение на строки
 var reZit_1 = "$1";
 var reZit_2 = "$4";
 var fragment = "";
 var otstup = "            ";
// zitata_N=75;
 fragment=("00"+zitata_N).replace(/.*(...)$/g, "$1")+".  "+Kn[zitata_N].replace(reF02, reF02_);
 while (fragment != otstup) {
         mSt[ind]=fragment.replace(reZit, reZit_1);
//         ind++;  mSt[ind]=fragment.replace(reZit, reZit_1).length;
         fragment=otstup+fragment.replace(reZit, reZit_2);
         ind++ }

//  Праздники
 if (Prazdniki || DR_)  { mSt[ind]="";  ind++ }
 if (DR_)                           { mSt[ind]=DR_Text;  ind++ }
 if (Prazdniki)               { mSt[ind]=PrazdnikiText;  ind++ }


//  Сборка строк текущей даты и времени
 mSt[ind]="";  ind++;
 mSt[ind]= "• "+currentDate+" • "+currentTime+" •";  ind++;

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОКНО РЕЗУЛЬТАТОВ  :  Подсчет количества и высоты колонок в таблице с результатами обработки


 if (Vysota_teksta<30)  Vysota_teksta=30;  // установка минимальной высоты
 var Kolo=Vysota_teksta-3;   //  высота колонки (в конце сборки страниц могут добавиться 3 строки)
 var page;   // страницы
 var firstPage = 0;   //  Учет возможного добавления пустой строки в конце первой страницы


 if (Vysota_teksta >= ind) {   // Если все строки могут поместиться на одной странице
         page=1;
         Kolo=ind;
         }
     else {         // иначе...
         page=Math.ceil(ind/Kolo);  //  подсчет количества страниц
         Kolo=Math.ceil(ind/page);  //  подсчет высоты колонки при равномерном распределении строк по страницам
         if  (Kolo<=cTaT-1) {      //  если высота колонки оказалась меньше высоты статистики...
                 Kolo=cTaT-1;  //  увеличение высоты колонки до высоты "статистики" (с учетом возможного добавления одной строки)
                 page=Math.ceil(ind/Kolo);  //  пересчет количества страниц
                 }
             else  if  (Kolo<cTaT+6) {                  //  если высота колонки оказалась немного выше "статистики"
                     Kolo=Math.ceil((ind-cTaT)/(page-1));   //  пересчет высоты колонки с учетом будущего добавления пустых строк после статистики
                     for (n=0; n<Kolo-cTaT; n++) {
                             mSt.splice(cTaT, 0, "");   // добавление пустых строк в массив результатов (после статистики)
                             ind++;
                             }
                     }
                 else  firstPage = 1;  //  в остальных случаях колонка и страницы не меняются, но есть вероятность добавления пустой строки в конце первой страницы

         Kolo=Math.ceil((ind+page-2+firstPage)/page);  //  пересчет высоты колонки с учетом возможного добавления пустых строк в конце страниц (не считая первую и последнюю [page-2]) + вероятность добавления пустой строки в конце первой страницы (firstPage)
// * Поскольку предыдущая операция может и не добавить строку в колонку, необходимо сделать контрольный пересчет:
         if  (Kolo<=cTaT) {     //  если высота колонки оказалась меньше высоты статистики...
                 Kolo=cTaT;  //  увеличение высоты колонки до высоты "статистики"
                 }
         }

 while  ( ind <= Kolo*page+5)  { mSt[ind]="";  ind++ }  //  Добавление пустых строк до полного заполнения ими общей высоты во всех страницах
//  * +5 строк - на всякий случай (лишний запас не помешает)

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОКНО РЕЗУЛЬТАТОВ  :  Распределение строк по страницам


 var mPage=[];   // массив страниц
 var _k=0;  // смещение строк
 
 for (n=0; n < page; n++) {
         mPage[n]="";
         if (mSt[n*Kolo+_k] == "")  _k++;  //  пропуск пустой строки в начале страницы
         for (k=0 ;  k<Kolo;  k++) {
                 if (k==Kolo-1  &&        //  если "последняя" строка на странице...
                     (mSt[k+n*Kolo+_k].search(/^• (?!Добавлен|Версия|[0-9])/) != -1  ||           //  это заголовок
                     mSt[k+n*Kolo+_k+2] == ""  &&      //  или это 2-я строка перед пустой строкой,
                         mSt[k+n*Kolo+_k+1] != ""  &&      //  при условии, что следующая строка не пустая...
                         mSt[k+n*Kolo+_k-2] != ""))     //  и что вторая строка выше не пустая...
                             { mPage[n]+="\n";  _k--;   break }      //  то в конце страницы добавляется пустая строка, а "последняя" строка переносятся на следующую страницу.
                 mPage[n]+=mSt[k+n*Kolo+_k]+"	\n";        // Стандартное заполнение страницы
                 }
         if (page!=1) {
                 mPage[n]+="\n";
                 if (n!=page-1)  mPage[n]+="◊  Стр. "+(n+1)+"  ◊  Показать  следующую  страницу?";
                         else  mPage[n]+="◊  Стр. "+(n+1)+" (последняя)  ◊  Закрыть окно?";
                 }
         }

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------



                 /// ОКНО РЕЗУЛЬТАТОВ  :  Вывод страниц с результатами на экран

 otvet = true;
 n=0;

 while (otvet) {        // Цикл для страниц
         if (page == 1) {
                 MsgBox (mPage[0]);
                 break;
                 }
         otvet = AskYesNo (mPage[n]);
         n++;
         if (n == page)  {
                 n=0;
                 otvet = !otvet;
                 }
         }

 var mPoka=["Всего доброго", "Всего лучшего", "Всего наилучшего", "Всего хорошего", "Всех благ", "До встречи", "До новых встреч", "До свидания", "До связи", "До скорого свидания", "До скорого", "До скорой встречи", "Не поминайте лихом", "Позвольте откланяться", "Позвольте попрощаться", "Пока", "Разрешите откланяться", "Разрешите попрощаться", "Счастливо оставаться", "Счастливо", "Удачи", "Успехов", "Честь имею кланяться", "Честь имею"];

// MsgBox ("   "+mPoka[Math.floor((zitata_N-1)/271 * mPoka.length)]+"   ");  //  выключено

// ---------------------------------------------------------------
// ----------------------------------------------
// -----------------------------

}







                 ///  ИСТОРИЯ
// v.1.0 — Создание скрипта - jurgennt
//                                             Engine by ©Sclex
//                                                    01.05.2007 – 07.05.2008
//~~~~~~~~~~~~~~~~~~
// v.1.01 — курсивное лидирующее тире в диалогах №08 — Faiber
//~~~~~~~~~~~~~~~~~~
// v.1.02 — курсив в списках №50
//~~~~~~~~~~~~~~~~~~
// v.1.03 — тире за препинаниями после скобки №13
//~~~~~~~~~~~~~~~~~~
// v.1.04 — открывающие кавычки перед лидирующим тире в диалогах №08
//              запрещение вставки пробела после точки, если после следующей буквы стоит точка №31
//              пробел перед % после цифр №53
//              неразрывный после № и § перед цифрами №54
//              оставил в покое многоточие №05
//              лидирующая тильда ушла в №08
//              тире после запятой, перед которой точка №13
//              начальные и конечные пробелы абзаца в курсиве №81, 82
//~~~~~~~~~~~~~~~~~~
// v.1.05 — тотальная замена коротких тире на длинные №07 — Faiber
//              две точки после слова в одноточие №38
//              в сносках не только цифры в квадратных скобках, а ваще всё что угодно
//~~~~~~~~~~~~~~~~~~
// v.1.06 — замена конечных дефисов на тире производится только в стихах №19 — Faiber
//              удаление лишних точек в заголовках №84
//              счётчики статистики
//              примитивная унификация сносок №40 — Faiber
//              дефис после точки не меняется на тире №13
//~~~~~~~~~~~~~~~~~~
// v.1.07 — вынос сноски за многоточие в конце строки №46
//~~~~~~~~~~~~~~~~~~
// v.1.08 — тире вместо дефиса после точки перед Прописной №29 — Faiber
//               препинания после сноски — везде № 46
//~~~~~~~~~~~~~~~~~~
// v.1.09 — удаление лишних ID №90
//~~~~~~~~~~~~~~~~~~
// v.1.10 — отдельный шаблон для тире после препинаний №55
//~~~~~~~~~~~~~~~~~~
// v.1.11 — немного дополнительной статистики
//               укороченное тире в интервалах дат №52, 60–63, 67
//~~~~~~~~~~~~~~~~~~
// v.1.12 — пропущенные пробелы после препинаний №85
//~~~~~~~~~~~~~~~~~~
// v.1.13 — дефис на тире ещё и в курсиве №29
//~~~~~~~~~~~~~~~~~~
// v.1.14 — стык эмфазиса через тире и пр. №56
//~~~~~~~~~~~~~~~~~~
// v.1.16 — тире вместо дефиса после точки перед открывающимися угловыми кавычками №57
//               пробел после букв-пробел-тире  №58
//~~~~~~~~~~~~~~~~~~
// v.1.17 — неверный знак препинания !… -> !.. №86
//               тире после «!..»  №14а — Faiber
//~~~~~~~~~~~~~~~~~~
// v.1.18 — пробел после тире №55a — Faiber
//~~~~~~~~~~~~~~~~~~
// v.1.19 — более жёстко заданы номера сносок без < и > №41…49
//               сноска зашагивает за многоточие только в конце абзаца — №46a
//~~~~~~~~~~~~~~~~~~
// v.1.20 — пробел перед тире после двоеточия и закр. кавычек №26
//~~~~~~~~~~~~~~~~~~
// v.1.21 — пробел перед тире после вопроса\восклицания и двоеточия №13а
//~~~~~~~~~~~~~~~~~~
// v.1.27 — пробел после букв+двоеточия перед кавычками ["] №27
//               пробел после точки перед откр. кавычками [«] №34
//~~~~~~~~~~~~~~~~~~
// v.1.28 — пронумерованный список: статьи Ст. 1… №50a
//~~~~~~~~~~~~~~~~~~
// v.1.29 — удаление неразрывного пробела после тире №01
//~~~~~~~~~~~~~~~~~~
// v.1.30 — мультипрепинания за сноской №46
//~~~~~~~~~~~~~~~~~~
// v.1.31 — уточнил градусы Цельсия №67
//
// вопрос по обычным двойным кавычкам в №№27, 32
//~~~~~~~~~~~~~~~~~~
// v.1.33 — опять. - дефис после препинаний №29, 31
//~~~~~~~~~~~~~~~~~~
// v.1.34 — emphasis'ы со strong'ами загнал в переменные
//~~~~~~~~~~~~~~~~~~
// v.1.35 — #84 попытка оставить на месте точки в заголовках, типа 1980 г.; XXI в.; Буш-мл. и т.п.
//~~~~~~~~~~~~~~~~~~
// v.1.36 — ##40,46,46a + PromtSnoska – возможность отключения простановки квадратных скобок вокруг сноски
//~~~~~~~~~~~~~~~~~~
//v.2.0 — изменения для правильной работы с учетом возможности выбора вида неразрывного пробела в FBE
//======================================
//v.2.1 — отключил «окавычивание» №15,17, 18, 37, 38 — для этого есть скрипты по кавычкам; перестал обращать внимание на сноски 40, 41, 43, 47 — есть скрипты по сноскам
//======================================
//v.2.2 — убрал Ко
//======================================
// v.3.0 — Общая редакция — Александр Ка (11.02.2024)
// • В 2-3 раза увеличено количество функций.
// • В среднем на 45% увеличена скорость выполнения.
// • В 10 раз уменьшено количество ошибок обработки.
// • Меньше пропущенных ошибок.
// • Режимы обработки.
// • Экранирование от изменений формата "код", эл. адресов и ссылок.
// • Значительно улучшено окно вывода результатов.
// • Автоматическая запись в историю изменений.
//  и т.д.
//======================================
// v.3.1 — Александр Ка (18.03.2024)
// Добавлены окна вопросов об обработке/экранировании кода
// Увеличено количество пословиц
//======================================
// v.3.2 — Александр Ка (27.03.2024)
// Добавлена автоматическая повторная обработка строки
// Расширены и улучшены операции по преобразования выделения подчеркиванием в курсивный/полужирный шрифт (№ 155-158).
// Упорядочена структура скрипта (теперь он немного понятней)
//======================================
// v.3.3 — Александр Ка (25.06.2024)
// Проверка/коррекция формул
// Удален №101. Удаление лишних идентификаторов (иногда ошибается)
// Удален №430. Кавычки (») + пропущенный пробел (иногда ошибается)
// Добавлен №901. Исправление ошибочного добавления градуса Цельсия (°C)
// Добавлен №512. Лишний пробел между числами через короткое тире
// Объединение некоторых схожих строк статистики ("исправления")
// Увеличение ширины строк статистики
//======================================
// v.3.4 — Александр Ка (01.09.2024)
// Настройки: Добавлена возможность отключения расстановки ударений; Регулировка высоты колонки в статистике; Возможность включения демонстрационного режима.
// Замена основных циклов на более быстрые и устойчивые к аномалиям структуры
// Небольшая адоптация окон к стилю win7 (удаление/замена декора)
// Исключение из окон вопросов строк с дефисом/тире между римскими числами
// Добавлены, проверены и улучшены операции, предложенные TaKir-ом: № 011, 101, 102, 103, 104, 105, 106, 107, 110.
// Добавлен раздел "Постобработка" с двумя полуавтоматическими операциями:    №901 и новая операция №911
//======================================
// v.3.5 — Александр Ка (10.09.2024)
// Устранение замедления при выборе в FBE прозрачного символа для н/р пробела
// Сохранение длинного тире без пробелов между названиями (например: "Москва—Кассиопея")
// Добавление названий сезонов в промежутки времени
//======================================
// v.3.6 — Александр Ка (10.09.2024)
// Удален №115 (в "Чистке структуры" есть более полная версия этой операции)
// Улучшено добавление строк в "историю"
// Удалена настройка режима "Повторить всё" (теперь он всегда включен)
// Исправлены все ошибки в окнах для win7
// Страничный вид окна результатов
// Мелочи
//~~~~~~~~~~~~~~~~~~


